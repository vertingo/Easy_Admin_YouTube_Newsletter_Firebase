<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 *
 * @final since Symfony 3.3
 */
class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 4; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services = array();
        $this->normalizedIds = array(
            'a2lix_translation_form.default.listener.translationsforms' => 'a2lix_translation_form.default.listener.translationsForms',
            'a2lix_translation_form.default.type.translatedentity' => 'a2lix_translation_form.default.type.translatedEntity',
            'a2lix_translation_form.default.type.translationsfields' => 'a2lix_translation_form.default.type.translationsFields',
            'a2lix_translation_form.default.type.translationsforms' => 'a2lix_translation_form.default.type.translationsForms',
            'a2lix_translation_form.default.type.translationslocalesselector' => 'a2lix_translation_form.default.type.translationsLocalesSelector',
            'appbundle\\controller\\admin\\admincontroller' => 'AppBundle\\Controller\\Admin\\AdminController',
            'appbundle\\controller\\admin\\dashboardcontroller' => 'AppBundle\\Controller\\Admin\\DashboardController',
            'appbundle\\controller\\admin\\toolscontroller' => 'AppBundle\\Controller\\Admin\\ToolsController',
            'appbundle\\controller\\admin\\usercontroller' => 'AppBundle\\Controller\\Admin\\UserController',
            'appbundle\\controller\\appmobileregistercontroller' => 'AppBundle\\Controller\\AppMobileRegisterController',
            'appbundle\\controller\\exemplecontroller' => 'AppBundle\\Controller\\ExempleController',
            'appbundle\\controller\\insertyoutubecontroller' => 'AppBundle\\Controller\\InsertYouTubeController',
            'appbundle\\controller\\main\\maincontroller' => 'AppBundle\\Controller\\Main\\MainController',
            'appbundle\\controller\\registercontroller' => 'AppBundle\\Controller\\RegisterController',
            'appbundle\\controller\\vertingofeedcontrollercontroller' => 'AppBundle\\Controller\\VertinGoFeedControllerController',
            'appbundle\\event\\listener\\sitemapsubscriber' => 'AppBundle\\Event\\Listener\\SitemapSubscriber',
            'appbundle\\form\\exemplefiltertype' => 'AppBundle\\Form\\ExempleFilterType',
            'autowired.appbundle\\entity\\exemple' => 'autowired.AppBundle\\Entity\\Exemple',
            'doctrine.dbal.logger.profiling.mandanta' => 'doctrine.dbal.logger.profiling.mandantA',
            'doctrine.dbal.logger.profiling.mandantb' => 'doctrine.dbal.logger.profiling.mandantB',
            'doctrine.dbal.mandanta_connection' => 'doctrine.dbal.mandantA_connection',
            'doctrine.dbal.mandantb_connection' => 'doctrine.dbal.mandantB_connection',
            'doctrine.orm.mandanta_entity_listener_resolver' => 'doctrine.orm.mandantA_entity_listener_resolver',
            'doctrine.orm.mandanta_entity_manager' => 'doctrine.orm.mandantA_entity_manager',
            'doctrine.orm.mandanta_entity_manager.delegate' => 'doctrine.orm.mandantA_entity_manager.delegate',
            'doctrine.orm.mandanta_entity_manager.property_info_extractor' => 'doctrine.orm.mandantA_entity_manager.property_info_extractor',
            'doctrine.orm.mandanta_listeners.attach_entity_listeners' => 'doctrine.orm.mandantA_listeners.attach_entity_listeners',
            'doctrine.orm.mandanta_manager_configurator' => 'doctrine.orm.mandantA_manager_configurator',
            'doctrine.orm.mandanta_metadata_cache' => 'doctrine.orm.mandantA_metadata_cache',
            'doctrine.orm.mandanta_query_cache' => 'doctrine.orm.mandantA_query_cache',
            'doctrine.orm.mandanta_result_cache' => 'doctrine.orm.mandantA_result_cache',
            'doctrine.orm.mandantb_entity_listener_resolver' => 'doctrine.orm.mandantB_entity_listener_resolver',
            'doctrine.orm.mandantb_entity_manager' => 'doctrine.orm.mandantB_entity_manager',
            'doctrine.orm.mandantb_entity_manager.delegate' => 'doctrine.orm.mandantB_entity_manager.delegate',
            'doctrine.orm.mandantb_entity_manager.property_info_extractor' => 'doctrine.orm.mandantB_entity_manager.property_info_extractor',
            'doctrine.orm.mandantb_listeners.attach_entity_listeners' => 'doctrine.orm.mandantB_listeners.attach_entity_listeners',
            'doctrine.orm.mandantb_manager_configurator' => 'doctrine.orm.mandantB_manager_configurator',
            'doctrine.orm.mandantb_metadata_cache' => 'doctrine.orm.mandantB_metadata_cache',
            'doctrine.orm.mandantb_query_cache' => 'doctrine.orm.mandantB_query_cache',
            'doctrine.orm.mandantb_result_cache' => 'doctrine.orm.mandantB_result_cache',
            'doctrine_cache.providers.doctrine.orm.mandanta_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache',
            'doctrine_cache.providers.doctrine.orm.mandanta_query_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_query_cache',
            'doctrine_cache.providers.doctrine.orm.mandanta_result_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_result_cache',
            'doctrine_cache.providers.doctrine.orm.mandantb_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache',
            'doctrine_cache.providers.doctrine.orm.mandantb_query_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_query_cache',
            'doctrine_cache.providers.doctrine.orm.mandantb_result_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_result_cache',
            'nomaya.socialbarhelper' => 'nomaya.socialBarHelper',
            'nomaya.sociallinkshelper' => 'nomaya.socialLinksHelper',
            'sonata\\blockbundle\\command\\debugblockscommand' => 'Sonata\\BlockBundle\\Command\\DebugBlocksCommand',
            'sonata\\corebundle\\command\\sonatadumpdoctrinemetacommand' => 'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand',
            'sonata\\corebundle\\command\\sonatalistformmappingcommand' => 'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand',
            'sonata\\easyextendsbundle\\command\\dumpmappingcommand' => 'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand',
            'sonata\\easyextendsbundle\\command\\generatecommand' => 'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand',
            'sonata\\mediabundle\\command\\addmassmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMassMediaCommand',
            'sonata\\mediabundle\\command\\addmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMediaCommand',
            'sonata\\mediabundle\\command\\cleanmediacommand' => 'Sonata\\MediaBundle\\Command\\CleanMediaCommand',
            'sonata\\mediabundle\\command\\fixmediacontextcommand' => 'Sonata\\MediaBundle\\Command\\FixMediaContextCommand',
            'sonata\\mediabundle\\command\\migratetojsontypecommand' => 'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand',
            'sonata\\mediabundle\\command\\refreshmetadatacommand' => 'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand',
            'sonata\\mediabundle\\command\\removethumbscommand' => 'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand',
            'sonata\\mediabundle\\command\\syncthumbscommand' => 'Sonata\\MediaBundle\\Command\\SyncThumbsCommand',
            'sonata\\mediabundle\\command\\updatecdnstatuscommand' => 'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand',
            'swiftmailer.mailer.defaultmailer' => 'swiftmailer.mailer.defaultMailer',
            'swiftmailer.mailer.defaultmailer.plugin.messagelogger' => 'swiftmailer.mailer.defaultMailer.plugin.messagelogger',
            'swiftmailer.mailer.defaultmailer.transport' => 'swiftmailer.mailer.defaultMailer.transport',
            'swiftmailer.mailer.immediatemailer' => 'swiftmailer.mailer.immediateMailer',
            'swiftmailer.mailer.immediatemailer.plugin.messagelogger' => 'swiftmailer.mailer.immediateMailer.plugin.messagelogger',
            'swiftmailer.mailer.immediatemailer.transport' => 'swiftmailer.mailer.immediateMailer.transport',
            'videoplayerbundle.youruploadlistener' => 'VideoPlayerBundle.YourUploadListener',
        );
        $this->methodMap = array(
            '1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => 'get16a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService',
            '1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' => 'get1Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService',
            '2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => 'get26a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService',
            '2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' => 'get2Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService',
            '3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => 'get36a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService',
            'AppBundle\\Controller\\Admin\\AdminController' => 'getAppBundle_Controller_Admin_AdminControllerService',
            'AppBundle\\Controller\\Admin\\DashboardController' => 'getAppBundle_Controller_Admin_DashboardControllerService',
            'AppBundle\\Controller\\Admin\\ToolsController' => 'getAppBundle_Controller_Admin_ToolsControllerService',
            'AppBundle\\Controller\\Admin\\UserController' => 'getAppBundle_Controller_Admin_UserControllerService',
            'AppBundle\\Controller\\AppMobileRegisterController' => 'getAppBundle_Controller_AppMobileRegisterControllerService',
            'AppBundle\\Controller\\ExempleController' => 'getAppBundle_Controller_ExempleControllerService',
            'AppBundle\\Controller\\InsertYouTubeController' => 'getAppBundle_Controller_InsertYouTubeControllerService',
            'AppBundle\\Controller\\Main\\MainController' => 'getAppBundle_Controller_Main_MainControllerService',
            'AppBundle\\Controller\\RegisterController' => 'getAppBundle_Controller_RegisterControllerService',
            'AppBundle\\Controller\\VertinGoFeedControllerController' => 'getAppBundle_Controller_VertinGoFeedControllerControllerService',
            'AppBundle\\Event\\Listener\\SitemapSubscriber' => 'getAppBundle_Event_Listener_SitemapSubscriberService',
            'AppBundle\\Form\\ExempleFilterType' => 'getAppBundle_Form_ExempleFilterTypeService',
            'Sonata\\BlockBundle\\Command\\DebugBlocksCommand' => 'getSonata_BlockBundle_Command_DebugBlocksCommandService',
            'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand' => 'getSonata_CoreBundle_Command_SonataDumpDoctrineMetaCommandService',
            'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand' => 'getSonata_CoreBundle_Command_SonataListFormMappingCommandService',
            'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand' => 'getSonata_EasyExtendsBundle_Command_DumpMappingCommandService',
            'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand' => 'getSonata_EasyExtendsBundle_Command_GenerateCommandService',
            'Sonata\\MediaBundle\\Command\\AddMassMediaCommand' => 'getSonata_MediaBundle_Command_AddMassMediaCommandService',
            'Sonata\\MediaBundle\\Command\\AddMediaCommand' => 'getSonata_MediaBundle_Command_AddMediaCommandService',
            'Sonata\\MediaBundle\\Command\\CleanMediaCommand' => 'getSonata_MediaBundle_Command_CleanMediaCommandService',
            'Sonata\\MediaBundle\\Command\\FixMediaContextCommand' => 'getSonata_MediaBundle_Command_FixMediaContextCommandService',
            'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand' => 'getSonata_MediaBundle_Command_MigrateToJsonTypeCommandService',
            'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand' => 'getSonata_MediaBundle_Command_RefreshMetadataCommandService',
            'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand' => 'getSonata_MediaBundle_Command_RemoveThumbsCommandService',
            'Sonata\\MediaBundle\\Command\\SyncThumbsCommand' => 'getSonata_MediaBundle_Command_SyncThumbsCommandService',
            'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand' => 'getSonata_MediaBundle_Command_UpdateCdnStatusCommandService',
            'VideoPlayerBundle.YourUploadListener' => 'getVideoPlayerBundle_YourUploadListenerService',
            'a2lix_translation_form.default.listener.translations' => 'getA2lixTranslationForm_Default_Listener_TranslationsService',
            'a2lix_translation_form.default.listener.translationsForms' => 'getA2lixTranslationForm_Default_Listener_TranslationsFormsService',
            'a2lix_translation_form.default.service.parameter_locale_provider' => 'getA2lixTranslationForm_Default_Service_ParameterLocaleProviderService',
            'a2lix_translation_form.default.service.translation' => 'getA2lixTranslationForm_Default_Service_TranslationService',
            'a2lix_translation_form.default.type.translatedEntity' => 'getA2lixTranslationForm_Default_Type_TranslatedEntityService',
            'a2lix_translation_form.default.type.translations' => 'getA2lixTranslationForm_Default_Type_TranslationsService',
            'a2lix_translation_form.default.type.translationsFields' => 'getA2lixTranslationForm_Default_Type_TranslationsFieldsService',
            'a2lix_translation_form.default.type.translationsForms' => 'getA2lixTranslationForm_Default_Type_TranslationsFormsService',
            'a2lix_translation_form.default.type.translationsLocalesSelector' => 'getA2lixTranslationForm_Default_Type_TranslationsLocalesSelectorService',
            'annotation_reader' => 'getAnnotationReaderService',
            'annotations.cache' => 'getAnnotations_CacheService',
            'annotations.reader' => 'getAnnotations_ReaderService',
            'app.sitemap.blog_post_subscriber' => 'getApp_Sitemap_BlogPostSubscriberService',
            'argument_resolver.default' => 'getArgumentResolver_DefaultService',
            'argument_resolver.request' => 'getArgumentResolver_RequestService',
            'argument_resolver.request_attribute' => 'getArgumentResolver_RequestAttributeService',
            'argument_resolver.service' => 'getArgumentResolver_ServiceService',
            'argument_resolver.session' => 'getArgumentResolver_SessionService',
            'argument_resolver.variadic' => 'getArgumentResolver_VariadicService',
            'arkounay_block_service' => 'getArkounayBlockServiceService',
            'assetic.asset_factory' => 'getAssetic_AssetFactoryService',
            'assetic.asset_manager' => 'getAssetic_AssetManagerService',
            'assetic.controller' => 'getAssetic_ControllerService',
            'assetic.filter_manager' => 'getAssetic_FilterManagerService',
            'assetic.request_listener' => 'getAssetic_RequestListenerService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'autowired.AppBundle\\Entity\\Exemple' => 'getAutowired_AppBundle_Entity_ExempleService',
            'bnbc_upload.form.type.bnbc_ajax_file' => 'getBnbcUpload_Form_Type_BnbcAjaxFileService',
            'cache.annotations' => 'getCache_AnnotationsService',
            'cache.annotations.recorder_inner' => 'getCache_Annotations_RecorderInnerService',
            'cache.app' => 'getCache_AppService',
            'cache.app.recorder_inner' => 'getCache_App_RecorderInnerService',
            'cache.default_clearer' => 'getCache_DefaultClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.serializer.recorder_inner' => 'getCache_Serializer_RecorderInnerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system.recorder_inner' => 'getCache_System_RecorderInnerService',
            'cache.validator' => 'getCache_ValidatorService',
            'cache.validator.recorder_inner' => 'getCache_Validator_RecorderInnerService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'cmf_core.publish_workflow.access_decision_manager' => 'getCmfCore_PublishWorkflow_AccessDecisionManagerService',
            'cmf_core.publish_workflow.checker.default' => 'getCmfCore_PublishWorkflow_Checker_DefaultService',
            'cmf_core.security.published_voter' => 'getCmfCore_Security_PublishedVoterService',
            'cmf_media.browser_file_helper' => 'getCmfMedia_BrowserFileHelperService',
            'cmf_seo.cache.file' => 'getCmfSeo_Cache_FileService',
            'cmf_seo.config_values' => 'getCmfSeo_ConfigValuesService',
            'cmf_seo.error.exclusion_matcher' => 'getCmfSeo_Error_ExclusionMatcherService',
            'cmf_seo.error.suggestion_provider.controller' => 'getCmfSeo_Error_SuggestionProvider_ControllerService',
            'cmf_seo.extractor_strategy.description' => 'getCmfSeo_ExtractorStrategy_DescriptionService',
            'cmf_seo.extractor_strategy.extras' => 'getCmfSeo_ExtractorStrategy_ExtrasService',
            'cmf_seo.extractor_strategy.keywords' => 'getCmfSeo_ExtractorStrategy_KeywordsService',
            'cmf_seo.extractor_strategy.original_route' => 'getCmfSeo_ExtractorStrategy_OriginalRouteService',
            'cmf_seo.extractor_strategy.original_url' => 'getCmfSeo_ExtractorStrategy_OriginalUrlService',
            'cmf_seo.extractor_strategy.read_title' => 'getCmfSeo_ExtractorStrategy_ReadTitleService',
            'cmf_seo.extractor_strategy.title' => 'getCmfSeo_ExtractorStrategy_TitleService',
            'cmf_seo.form.type.seo_metadata' => 'getCmfSeo_Form_Type_SeoMetadataService',
            'cmf_seo.language_listener' => 'getCmfSeo_LanguageListenerService',
            'cmf_seo.presentation' => 'getCmfSeo_PresentationService',
            'cmf_seo.sitemap.controller' => 'getCmfSeo_Sitemap_ControllerService',
            'cmf_seo.sitemap.guesser.categories.default_change_frequency' => 'getCmfSeo_Sitemap_Guesser_Categories_DefaultChangeFrequencyService',
            'cmf_seo.sitemap.guesser_chain' => 'getCmfSeo_Sitemap_GuesserChainService',
            'cmf_seo.sitemap.loader_chain' => 'getCmfSeo_Sitemap_LoaderChainService',
            'cmf_seo.sitemap.provider' => 'getCmfSeo_Sitemap_ProviderService',
            'cmf_seo.sitemap.voter.sitemap_aware_document' => 'getCmfSeo_Sitemap_Voter_SitemapAwareDocumentService',
            'cmf_seo.sitemap.voter_chain' => 'getCmfSeo_Sitemap_VoterChainService',
            'config_cache_factory' => 'getConfigCacheFactoryService',
            'console.command.appbundle_command_populateadminuserscommand' => 'getConsole_Command_AppbundleCommandPopulateadminuserscommandService',
            'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' => 'getConsole_Command_SymfonyBundleSecuritybundleCommandUserpasswordencodercommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService',
            'console.error_listener' => 'getConsole_ErrorListenerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'custom_service' => 'getCustomServiceService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'debug.argument_resolver' => 'getDebug_ArgumentResolverService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' => 'getDebug_DumpListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.file_link_formatter' => 'getDebug_FileLinkFormatterService',
            'debug.log_processor' => 'getDebug_LogProcessorService',
            'debug.security.access.decision_manager' => 'getDebug_Security_Access_DecisionManagerService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'deprecated.form.registry' => 'getDeprecated_Form_RegistryService',
            'deprecated.form.registry.csrf' => 'getDeprecated_Form_Registry_CsrfService',
            'doctrine' => 'getDoctrineService',
            'doctrine.cache_clear_metadata_command' => 'getDoctrine_CacheClearMetadataCommandService',
            'doctrine.cache_clear_query_cache_command' => 'getDoctrine_CacheClearQueryCacheCommandService',
            'doctrine.cache_clear_result_command' => 'getDoctrine_CacheClearResultCommandService',
            'doctrine.cache_collection_region_command' => 'getDoctrine_CacheCollectionRegionCommandService',
            'doctrine.clear_entity_region_command' => 'getDoctrine_ClearEntityRegionCommandService',
            'doctrine.clear_query_region_command' => 'getDoctrine_ClearQueryRegionCommandService',
            'doctrine.database_create_command' => 'getDoctrine_DatabaseCreateCommandService',
            'doctrine.database_drop_command' => 'getDoctrine_DatabaseDropCommandService',
            'doctrine.database_import_command' => 'getDoctrine_DatabaseImportCommandService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger' => 'getDoctrine_Dbal_LoggerService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.dbal.logger.profiling.mandantA' => 'getDoctrine_Dbal_Logger_Profiling_MandantAService',
            'doctrine.dbal.logger.profiling.mandantB' => 'getDoctrine_Dbal_Logger_Profiling_MandantBService',
            'doctrine.dbal.mandantA_connection' => 'getDoctrine_Dbal_MandantAConnectionService',
            'doctrine.dbal.mandantB_connection' => 'getDoctrine_Dbal_MandantBConnectionService',
            'doctrine.ensure_production_settings_command' => 'getDoctrine_EnsureProductionSettingsCommandService',
            'doctrine.fixtures_load_command' => 'getDoctrine_FixturesLoadCommandService',
            'doctrine.generate_entities_command' => 'getDoctrine_GenerateEntitiesCommandService',
            'doctrine.mapping_convert_command' => 'getDoctrine_MappingConvertCommandService',
            'doctrine.mapping_import_command' => 'getDoctrine_MappingImportCommandService',
            'doctrine.mapping_info_command' => 'getDoctrine_MappingInfoCommandService',
            'doctrine.orm.container_repository_factory' => 'getDoctrine_Orm_ContainerRepositoryFactoryService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_entity_manager.delegate' => 'getDoctrine_Orm_DefaultEntityManager_DelegateService',
            'doctrine.orm.default_entity_manager.property_info_extractor' => 'getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.mandantA_entity_listener_resolver' => 'getDoctrine_Orm_MandantAEntityListenerResolverService',
            'doctrine.orm.mandantA_entity_manager' => 'getDoctrine_Orm_MandantAEntityManagerService',
            'doctrine.orm.mandantA_entity_manager.delegate' => 'getDoctrine_Orm_MandantAEntityManager_DelegateService',
            'doctrine.orm.mandantA_entity_manager.property_info_extractor' => 'getDoctrine_Orm_MandantAEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.mandantA_listeners.attach_entity_listeners' => 'getDoctrine_Orm_MandantAListeners_AttachEntityListenersService',
            'doctrine.orm.mandantA_manager_configurator' => 'getDoctrine_Orm_MandantAManagerConfiguratorService',
            'doctrine.orm.mandantB_entity_listener_resolver' => 'getDoctrine_Orm_MandantBEntityListenerResolverService',
            'doctrine.orm.mandantB_entity_manager' => 'getDoctrine_Orm_MandantBEntityManagerService',
            'doctrine.orm.mandantB_entity_manager.delegate' => 'getDoctrine_Orm_MandantBEntityManager_DelegateService',
            'doctrine.orm.mandantB_entity_manager.property_info_extractor' => 'getDoctrine_Orm_MandantBEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.mandantB_listeners.attach_entity_listeners' => 'getDoctrine_Orm_MandantBListeners_AttachEntityListenersService',
            'doctrine.orm.mandantB_manager_configurator' => 'getDoctrine_Orm_MandantBManagerConfiguratorService',
            'doctrine.orm.naming_strategy.default' => 'getDoctrine_Orm_NamingStrategy_DefaultService',
            'doctrine.orm.quote_strategy.default' => 'getDoctrine_Orm_QuoteStrategy_DefaultService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine.query_dql_command' => 'getDoctrine_QueryDqlCommandService',
            'doctrine.query_sql_command' => 'getDoctrine_QuerySqlCommandService',
            'doctrine.schema_create_command' => 'getDoctrine_SchemaCreateCommandService',
            'doctrine.schema_drop_command' => 'getDoctrine_SchemaDropCommandService',
            'doctrine.schema_update_command' => 'getDoctrine_SchemaUpdateCommandService',
            'doctrine.schema_validate_command' => 'getDoctrine_SchemaValidateCommandService',
            'doctrine_cache.contains_command' => 'getDoctrineCache_ContainsCommandService',
            'doctrine_cache.delete_command' => 'getDoctrineCache_DeleteCommandService',
            'doctrine_cache.flush_command' => 'getDoctrineCache_FlushCommandService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantAMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantA_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantAQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantA_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantAResultCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantBMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantB_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantBQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.mandantB_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_MandantBResultCacheService',
            'doctrine_cache.stats_command' => 'getDoctrineCache_StatsCommandService',
            'doctrine_migrations.diff_command' => 'getDoctrineMigrations_DiffCommandService',
            'doctrine_migrations.execute_command' => 'getDoctrineMigrations_ExecuteCommandService',
            'doctrine_migrations.generate_command' => 'getDoctrineMigrations_GenerateCommandService',
            'doctrine_migrations.latest_command' => 'getDoctrineMigrations_LatestCommandService',
            'doctrine_migrations.migrate_command' => 'getDoctrineMigrations_MigrateCommandService',
            'doctrine_migrations.status_command' => 'getDoctrineMigrations_StatusCommandService',
            'doctrine_migrations.version_command' => 'getDoctrineMigrations_VersionCommandService',
            'dubture_ffmpeg.ffmpeg' => 'getDubtureFfmpeg_FfmpegService',
            'dubture_ffmpeg.ffprobe' => 'getDubtureFfmpeg_FfprobeService',
            'easyadmin.autocomplete' => 'getEasyadmin_AutocompleteService',
            'easyadmin.cache.manager' => 'getEasyadmin_Cache_ManagerService',
            'easyadmin.config.manager' => 'getEasyadmin_Config_ManagerService',
            'easyadmin.form.guesser.missing_doctrine_orm_type_guesser' => 'getEasyadmin_Form_Guesser_MissingDoctrineOrmTypeGuesserService',
            'easyadmin.form.type' => 'getEasyadmin_Form_TypeService',
            'easyadmin.form.type.autocomplete' => 'getEasyadmin_Form_Type_AutocompleteService',
            'easyadmin.form.type.divider' => 'getEasyadmin_Form_Type_DividerService',
            'easyadmin.form.type.extension' => 'getEasyadmin_Form_Type_ExtensionService',
            'easyadmin.form.type.group' => 'getEasyadmin_Form_Type_GroupService',
            'easyadmin.form.type.section' => 'getEasyadmin_Form_Type_SectionService',
            'easyadmin.listener.controller' => 'getEasyadmin_Listener_ControllerService',
            'easyadmin.listener.request_post_initialize' => 'getEasyadmin_Listener_RequestPostInitializeService',
            'easyadmin.paginator' => 'getEasyadmin_PaginatorService',
            'easyadmin.query_builder' => 'getEasyadmin_QueryBuilderService',
            'easyadmin.router' => 'getEasyadmin_RouterService',
            'eko_feed.feed' => 'getEkoFeed_FeedService',
            'eko_feed.feed.dump' => 'getEkoFeed_Feed_DumpService',
            'eko_feed.feed.manager' => 'getEkoFeed_Feed_ManagerService',
            'eko_feed.feed.reader' => 'getEkoFeed_Feed_ReaderService',
            'eko_feed.formatter.atom' => 'getEkoFeed_Formatter_AtomService',
            'eko_feed.formatter.rss' => 'getEkoFeed_Formatter_RssService',
            'eko_feed.hydrator.default' => 'getEkoFeed_Hydrator_DefaultService',
            'esi' => 'getEsiService',
            'esi_listener' => 'getEsiListenerService',
            'file.event.deleted' => 'getFile_Event_DeletedService',
            'file.event.directory.created' => 'getFile_Event_Directory_CreatedService',
            'file.event.extract' => 'getFile_Event_ExtractService',
            'file.event.move' => 'getFile_Event_MoveService',
            'file.event.pasted' => 'getFile_Event_PastedService',
            'file.event.rename' => 'getFile_Event_RenameService',
            'file.event.upload' => 'getFile_Event_UploadService',
            'file_locator' => 'getFileLocatorService',
            'file_type_extension' => 'getFileTypeExtensionService',
            'file_type_service' => 'getFileTypeServiceService',
            'filesystem' => 'getFilesystemService',
            'form.extension' => 'getForm_ExtensionService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.server_params' => 'getForm_ServerParamsService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.range' => 'getForm_Type_RangeService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.upload.validator' => 'getForm_TypeExtension_Upload_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_user.change_password.controller' => 'getFosUser_ChangePassword_ControllerService',
            'fos_user.change_password.form.factory' => 'getFosUser_ChangePassword_Form_FactoryService',
            'fos_user.change_password.form.type' => 'getFosUser_ChangePassword_Form_TypeService',
            'fos_user.command.activate_user' => 'getFosUser_Command_ActivateUserService',
            'fos_user.command.change_password' => 'getFosUser_Command_ChangePasswordService',
            'fos_user.command.create_user' => 'getFosUser_Command_CreateUserService',
            'fos_user.command.deactivate_user' => 'getFosUser_Command_DeactivateUserService',
            'fos_user.command.demote_user' => 'getFosUser_Command_DemoteUserService',
            'fos_user.command.promote_user' => 'getFosUser_Command_PromoteUserService',
            'fos_user.listener.authentication' => 'getFosUser_Listener_AuthenticationService',
            'fos_user.listener.email_confirmation' => 'getFosUser_Listener_EmailConfirmationService',
            'fos_user.listener.flash' => 'getFosUser_Listener_FlashService',
            'fos_user.listener.resetting' => 'getFosUser_Listener_ResettingService',
            'fos_user.mailer' => 'getFosUser_MailerService',
            'fos_user.profile.controller' => 'getFosUser_Profile_ControllerService',
            'fos_user.profile.form.factory' => 'getFosUser_Profile_Form_FactoryService',
            'fos_user.profile.form.type' => 'getFosUser_Profile_Form_TypeService',
            'fos_user.registration.controller' => 'getFosUser_Registration_ControllerService',
            'fos_user.registration.form.factory' => 'getFosUser_Registration_Form_FactoryService',
            'fos_user.registration.form.type' => 'getFosUser_Registration_Form_TypeService',
            'fos_user.resetting.controller' => 'getFosUser_Resetting_ControllerService',
            'fos_user.resetting.form.factory' => 'getFosUser_Resetting_Form_FactoryService',
            'fos_user.resetting.form.type' => 'getFosUser_Resetting_Form_TypeService',
            'fos_user.security.controller' => 'getFosUser_Security_ControllerService',
            'fos_user.security.interactive_login_listener' => 'getFosUser_Security_InteractiveLoginListenerService',
            'fos_user.security.login_manager' => 'getFosUser_Security_LoginManagerService',
            'fos_user.user_listener' => 'getFosUser_UserListenerService',
            'fos_user.user_manager' => 'getFosUser_UserManagerService',
            'fos_user.user_provider.username' => 'getFosUser_UserProvider_UsernameService',
            'fos_user.username_form_type' => 'getFosUser_UsernameFormTypeService',
            'fos_user.util.canonical_fields_updater' => 'getFosUser_Util_CanonicalFieldsUpdaterService',
            'fos_user.util.email_canonicalizer' => 'getFosUser_Util_EmailCanonicalizerService',
            'fos_user.util.password_updater' => 'getFosUser_Util_PasswordUpdaterService',
            'fos_user.util.token_generator' => 'getFosUser_Util_TokenGeneratorService',
            'fos_user.util.user_manipulator' => 'getFosUser_Util_UserManipulatorService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.esi' => 'getFragment_Renderer_EsiService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'http_kernel' => 'getHttpKernelService',
            'image.handling' => 'getImage_HandlingService',
            'jms_aop.interceptor_loader' => 'getJmsAop_InterceptorLoaderService',
            'jms_aop.pointcut_container' => 'getJmsAop_PointcutContainerService',
            'jms_di_extra.controller_resolver' => 'getJmsDiExtra_ControllerResolverService',
            'jms_di_extra.metadata.converter' => 'getJmsDiExtra_Metadata_ConverterService',
            'jms_di_extra.metadata.metadata_factory' => 'getJmsDiExtra_Metadata_MetadataFactoryService',
            'jms_di_extra.metadata_driver' => 'getJmsDiExtra_MetadataDriverService',
            'jms_di_extra.service_naming_strategy' => 'getJmsDiExtra_ServiceNamingStrategyService',
            'jms_i18n_routing.cookie_setting_listener' => 'getJmsI18nRouting_CookieSettingListenerService',
            'jms_i18n_routing.loader' => 'getJmsI18nRouting_LoaderService',
            'jms_i18n_routing.route_exclusion_strategy' => 'getJmsI18nRouting_RouteExclusionStrategyService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.accessor_strategy' => 'getJmsSerializer_AccessorStrategyService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.expression_evaluator' => 'getJmsSerializer_ExpressionEvaluatorService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.twig_extension.serializer_runtime_helper' => 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'jms_translation.config_factory' => 'getJmsTranslation_ConfigFactoryService',
            'jms_translation.controller.api_controller' => 'getJmsTranslation_Controller_ApiControllerService',
            'jms_translation.controller.translate_controller' => 'getJmsTranslation_Controller_TranslateControllerService',
            'jms_translation.file_source_factory' => 'getJmsTranslation_FileSourceFactoryService',
            'jms_translation.loader_manager' => 'getJmsTranslation_LoaderManagerService',
            'jms_translation.twig_extension' => 'getJmsTranslation_TwigExtensionService',
            'jms_translation.updater' => 'getJmsTranslation_UpdaterService',
            'kernel.class_cache.cache_warmer' => 'getKernel_ClassCache_CacheWarmerService',
            'knp.doctrine_behaviors.loggable_subscriber' => 'getKnp_DoctrineBehaviors_LoggableSubscriberService',
            'knp.doctrine_behaviors.reflection.class_analyzer' => 'getKnp_DoctrineBehaviors_Reflection_ClassAnalyzerService',
            'knp.doctrine_behaviors.sluggable_subscriber' => 'getKnp_DoctrineBehaviors_SluggableSubscriberService',
            'knp.doctrine_behaviors.translatable_subscriber' => 'getKnp_DoctrineBehaviors_TranslatableSubscriberService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.menu_provider.builder_alias' => 'getKnpMenu_MenuProvider_BuilderAliasService',
            'knp_menu.menu_provider.lazy' => 'getKnpMenu_MenuProvider_LazyService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'lexik_form_filter.apply_filter.doctrine_orm' => 'getLexikFormFilter_ApplyFilter_DoctrineOrmService',
            'lexik_form_filter.data_extraction_method.default' => 'getLexikFormFilter_DataExtractionMethod_DefaultService',
            'lexik_form_filter.data_extraction_method.key_values' => 'getLexikFormFilter_DataExtractionMethod_KeyValuesService',
            'lexik_form_filter.data_extraction_method.text' => 'getLexikFormFilter_DataExtractionMethod_TextService',
            'lexik_form_filter.filter_prepare' => 'getLexikFormFilter_FilterPrepareService',
            'lexik_form_filter.form_data_extractor' => 'getLexikFormFilter_FormDataExtractorService',
            'lexik_form_filter.get_filter.doctrine_orm' => 'getLexikFormFilter_GetFilter_DoctrineOrmService',
            'lexik_form_filter.query_builder_updater' => 'getLexikFormFilter_QueryBuilderUpdaterService',
            'lexik_form_filter.type.filter_boolean' => 'getLexikFormFilter_Type_FilterBooleanService',
            'lexik_form_filter.type.filter_checkbox' => 'getLexikFormFilter_Type_FilterCheckboxService',
            'lexik_form_filter.type.filter_choice' => 'getLexikFormFilter_Type_FilterChoiceService',
            'lexik_form_filter.type.filter_collection_adapter' => 'getLexikFormFilter_Type_FilterCollectionAdapterService',
            'lexik_form_filter.type.filter_date' => 'getLexikFormFilter_Type_FilterDateService',
            'lexik_form_filter.type.filter_date_range' => 'getLexikFormFilter_Type_FilterDateRangeService',
            'lexik_form_filter.type.filter_datetime' => 'getLexikFormFilter_Type_FilterDatetimeService',
            'lexik_form_filter.type.filter_datetime_range' => 'getLexikFormFilter_Type_FilterDatetimeRangeService',
            'lexik_form_filter.type.filter_entity' => 'getLexikFormFilter_Type_FilterEntityService',
            'lexik_form_filter.type.filter_number' => 'getLexikFormFilter_Type_FilterNumberService',
            'lexik_form_filter.type.filter_number_range' => 'getLexikFormFilter_Type_FilterNumberRangeService',
            'lexik_form_filter.type.filter_sharedable' => 'getLexikFormFilter_Type_FilterSharedableService',
            'lexik_form_filter.type.filter_text' => 'getLexikFormFilter_Type_FilterTextService',
            'lexik_form_filter.type_extension.filter_extension' => 'getLexikFormFilter_TypeExtension_FilterExtensionService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.handler.null_internal' => 'getMonolog_Handler_NullInternalService',
            'monolog.handler.server_log' => 'getMonolog_Handler_ServerLogService',
            'monolog.logger.assetic' => 'getMonolog_Logger_AsseticService',
            'monolog.logger.cache' => 'getMonolog_Logger_CacheService',
            'monolog.logger.console' => 'getMonolog_Logger_ConsoleService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'newsletters.annotation.wizard.driver' => 'getNewsletters_Annotation_Wizard_DriverService',
            'newsletters.annotation.wizard.handler' => 'getNewsletters_Annotation_Wizard_HandlerService',
            'newsletters.block.provider.image' => 'getNewsletters_Block_Provider_ImageService',
            'newsletters.block.provider.textarea' => 'getNewsletters_Block_Provider_TextareaService',
            'newsletters.block.provider.textareaandimage' => 'getNewsletters_Block_Provider_TextareaandimageService',
            'newsletters.block_provider_manager' => 'getNewsletters_BlockProviderManagerService',
            'newsletters.class_manager' => 'getNewsletters_ClassManagerService',
            'newsletters.encryption.adapter.mcrypt' => 'getNewsletters_Encryption_Adapter_McryptService',
            'newsletters.mailer' => 'getNewsletters_MailerService',
            'newsletters.mandant_manager' => 'getNewsletters_MandantManagerService',
            'newsletters.renderer.null' => 'getNewsletters_Renderer_NullService',
            'newsletters.renderer.twig' => 'getNewsletters_Renderer_TwigService',
            'newsletters.renderer_manager' => 'getNewsletters_RendererManagerService',
            'newsletters.rendererbridge' => 'getNewsletters_RendererbridgeService',
            'newsletters.rendererbridge.gendertitlestrategy.translator' => 'getNewsletters_Rendererbridge_Gendertitlestrategy_TranslatorService',
            'newsletters.rendererbridge.methodshelper' => 'getNewsletters_Rendererbridge_MethodshelperService',
            'newsletters.template_manager' => 'getNewsletters_TemplateManagerService',
            'nomaya.socialBarHelper' => 'getNomaya_SocialBarHelperService',
            'nomaya.socialLinksHelper' => 'getNomaya_SocialLinksHelperService',
            'oneup_uploader.chunk_manager' => 'getOneupUploader_ChunkManagerService',
            'oneup_uploader.chunks_storage' => 'getOneupUploader_ChunksStorageService',
            'oneup_uploader.command.clear_chunks' => 'getOneupUploader_Command_ClearChunksService',
            'oneup_uploader.command.clear_orphans' => 'getOneupUploader_Command_ClearOrphansService',
            'oneup_uploader.controller.gallery' => 'getOneupUploader_Controller_GalleryService',
            'oneup_uploader.namer.uniqid' => 'getOneupUploader_Namer_UniqidService',
            'oneup_uploader.namer.urlsafe' => 'getOneupUploader_Namer_UrlsafeService',
            'oneup_uploader.orphanage_manager' => 'getOneupUploader_OrphanageManagerService',
            'oneup_uploader.routing.loader' => 'getOneupUploader_Routing_LoaderService',
            'oneup_uploader.storage.gallery' => 'getOneupUploader_Storage_GalleryService',
            'oneup_uploader.templating.uploader_helper' => 'getOneupUploader_Templating_UploaderHelperService',
            'oneup_uploader.twig.extension.uploader' => 'getOneupUploader_Twig_Extension_UploaderService',
            'oneup_uploader.validation_listener.allowed_mimetype' => 'getOneupUploader_ValidationListener_AllowedMimetypeService',
            'oneup_uploader.validation_listener.disallowed_mimetype' => 'getOneupUploader_ValidationListener_DisallowedMimetypeService',
            'oneup_uploader.validation_listener.max_size' => 'getOneupUploader_ValidationListener_MaxSizeService',
            'order_extension' => 'getOrderExtensionService',
            'petkopara_multi_search.builder' => 'getPetkoparaMultiSearch_BuilderService',
            'php_ffmpeg.ffmpeg' => 'getPhpFfmpeg_FfmpegService',
            'php_ffmpeg.ffprobe' => 'getPhpFfmpeg_FfprobeService',
            'presta_sitemap.dump_command' => 'getPrestaSitemap_DumpCommandService',
            'presta_sitemap.dumper_default' => 'getPrestaSitemap_DumperDefaultService',
            'presta_sitemap.generator_default' => 'getPrestaSitemap_GeneratorDefaultService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'redjan_ym_fcm.client' => 'getRedjanYmFcm_ClientService',
            'request_stack' => 'getRequestStackService',
            'resolve_controller_name_subscriber' => 'getResolveControllerNameSubscriberService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.authenticated_voter' => 'getSecurity_Access_AuthenticatedVoterService',
            'security.access.expression_voter' => 'getSecurity_Access_ExpressionVoterService',
            'security.access.role_hierarchy_voter' => 'getSecurity_Access_RoleHierarchyVoterService',
            'security.authentication.guard_handler' => 'getSecurity_Authentication_GuardHandlerService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.provider.anonymous.main' => 'getSecurity_Authentication_Provider_Anonymous_MainService',
            'security.authentication.provider.dao.main' => 'getSecurity_Authentication_Provider_Dao_MainService',
            'security.authentication.session_strategy' => 'getSecurity_Authentication_SessionStrategyService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.csrf.token_storage' => 'getSecurity_Csrf_TokenStorageService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map' => 'getSecurity_Firewall_MapService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d' => 'getSecurity_RequestMatcher_5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1dService',
            'security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db' => 'getSecurity_RequestMatcher_A64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60dbService',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.user_checker' => 'getSecurity_UserCheckerService',
            'security.user_value_resolver' => 'getSecurity_UserValueResolverService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_locator.3368f0f4075960b08010e4ebdaedef01' => 'getServiceLocator_3368f0f4075960b08010e4ebdaedef01Service',
            'service_locator.4307ff7f09475aed9ea8e29ba86cf217' => 'getServiceLocator_4307ff7f09475aed9ea8e29ba86cf217Service',
            'service_locator.552fd1ede5f2836c5944de264b796c06' => 'getServiceLocator_552fd1ede5f2836c5944de264b796c06Service',
            'session' => 'getSessionService',
            'session.handler' => 'getSession_HandlerService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'sngrl.firebase_php_notification' => 'getSngrl_FirebasePhpNotificationService',
            'social_post' => 'getSocialPostService',
            'sonata.block.cache.handler.default' => 'getSonata_Block_Cache_Handler_DefaultService',
            'sonata.block.cache.handler.noop' => 'getSonata_Block_Cache_Handler_NoopService',
            'sonata.block.context_manager.default' => 'getSonata_Block_ContextManager_DefaultService',
            'sonata.block.exception.filter.debug_only' => 'getSonata_Block_Exception_Filter_DebugOnlyService',
            'sonata.block.exception.filter.ignore_block_exception' => 'getSonata_Block_Exception_Filter_IgnoreBlockExceptionService',
            'sonata.block.exception.filter.keep_all' => 'getSonata_Block_Exception_Filter_KeepAllService',
            'sonata.block.exception.filter.keep_none' => 'getSonata_Block_Exception_Filter_KeepNoneService',
            'sonata.block.exception.renderer.inline' => 'getSonata_Block_Exception_Renderer_InlineService',
            'sonata.block.exception.renderer.inline_debug' => 'getSonata_Block_Exception_Renderer_InlineDebugService',
            'sonata.block.exception.renderer.throw' => 'getSonata_Block_Exception_Renderer_ThrowService',
            'sonata.block.exception.strategy.manager' => 'getSonata_Block_Exception_Strategy_ManagerService',
            'sonata.block.form.type.block' => 'getSonata_Block_Form_Type_BlockService',
            'sonata.block.form.type.container_template' => 'getSonata_Block_Form_Type_ContainerTemplateService',
            'sonata.block.loader.chain' => 'getSonata_Block_Loader_ChainService',
            'sonata.block.loader.service' => 'getSonata_Block_Loader_ServiceService',
            'sonata.block.manager' => 'getSonata_Block_ManagerService',
            'sonata.block.menu.registry' => 'getSonata_Block_Menu_RegistryService',
            'sonata.block.renderer.default' => 'getSonata_Block_Renderer_DefaultService',
            'sonata.block.service.container' => 'getSonata_Block_Service_ContainerService',
            'sonata.block.service.empty' => 'getSonata_Block_Service_EmptyService',
            'sonata.block.service.menu' => 'getSonata_Block_Service_MenuService',
            'sonata.block.service.rss' => 'getSonata_Block_Service_RssService',
            'sonata.block.service.template' => 'getSonata_Block_Service_TemplateService',
            'sonata.block.service.text' => 'getSonata_Block_Service_TextService',
            'sonata.block.templating.helper' => 'getSonata_Block_Templating_HelperService',
            'sonata.block.twig.global' => 'getSonata_Block_Twig_GlobalService',
            'sonata.core.date.moment_format_converter' => 'getSonata_Core_Date_MomentFormatConverterService',
            'sonata.core.flashmessage.manager' => 'getSonata_Core_Flashmessage_ManagerService',
            'sonata.core.flashmessage.twig.extension' => 'getSonata_Core_Flashmessage_Twig_ExtensionService',
            'sonata.core.flashmessage.twig.runtime' => 'getSonata_Core_Flashmessage_Twig_RuntimeService',
            'sonata.core.form.type.array' => 'getSonata_Core_Form_Type_ArrayService',
            'sonata.core.form.type.boolean' => 'getSonata_Core_Form_Type_BooleanService',
            'sonata.core.form.type.collection' => 'getSonata_Core_Form_Type_CollectionService',
            'sonata.core.form.type.color' => 'getSonata_Core_Form_Type_ColorService',
            'sonata.core.form.type.color_selector' => 'getSonata_Core_Form_Type_ColorSelectorService',
            'sonata.core.form.type.date_picker' => 'getSonata_Core_Form_Type_DatePickerService',
            'sonata.core.form.type.date_range' => 'getSonata_Core_Form_Type_DateRangeService',
            'sonata.core.form.type.date_range_picker' => 'getSonata_Core_Form_Type_DateRangePickerService',
            'sonata.core.form.type.datetime_picker' => 'getSonata_Core_Form_Type_DatetimePickerService',
            'sonata.core.form.type.datetime_range' => 'getSonata_Core_Form_Type_DatetimeRangeService',
            'sonata.core.form.type.datetime_range_picker' => 'getSonata_Core_Form_Type_DatetimeRangePickerService',
            'sonata.core.form.type.equal' => 'getSonata_Core_Form_Type_EqualService',
            'sonata.core.form.type.translatable_choice' => 'getSonata_Core_Form_Type_TranslatableChoiceService',
            'sonata.core.model.adapter.chain' => 'getSonata_Core_Model_Adapter_ChainService',
            'sonata.core.slugify.cocur' => 'getSonata_Core_Slugify_CocurService',
            'sonata.core.slugify.native' => 'getSonata_Core_Slugify_NativeService',
            'sonata.core.twig.deprecated_template_extension' => 'getSonata_Core_Twig_DeprecatedTemplateExtensionService',
            'sonata.core.twig.extension.text' => 'getSonata_Core_Twig_Extension_TextService',
            'sonata.core.twig.extension.wrapping' => 'getSonata_Core_Twig_Extension_WrappingService',
            'sonata.core.twig.status_extension' => 'getSonata_Core_Twig_StatusExtensionService',
            'sonata.core.twig.status_runtime' => 'getSonata_Core_Twig_StatusRuntimeService',
            'sonata.core.twig.template_extension' => 'getSonata_Core_Twig_TemplateExtensionService',
            'sonata.core.validator.inline' => 'getSonata_Core_Validator_InlineService',
            'sonata.easy_extends.doctrine.mapper' => 'getSonata_EasyExtends_Doctrine_MapperService',
            'sonata.easy_extends.generator.bundle' => 'getSonata_EasyExtends_Generator_BundleService',
            'sonata.easy_extends.generator.odm' => 'getSonata_EasyExtends_Generator_OdmService',
            'sonata.easy_extends.generator.orm' => 'getSonata_EasyExtends_Generator_OrmService',
            'sonata.easy_extends.generator.phpcr' => 'getSonata_EasyExtends_Generator_PhpcrService',
            'sonata.easy_extends.generator.serializer' => 'getSonata_EasyExtends_Generator_SerializerService',
            'sonata.media.adapter.filesystem.local' => 'getSonata_Media_Adapter_Filesystem_LocalService',
            'sonata.media.adapter.image.gd' => 'getSonata_Media_Adapter_Image_GdService',
            'sonata.media.adapter.image.gmagick' => 'getSonata_Media_Adapter_Image_GmagickService',
            'sonata.media.adapter.image.imagick' => 'getSonata_Media_Adapter_Image_ImagickService',
            'sonata.media.adapter.service.s3' => 'getSonata_Media_Adapter_Service_S3Service',
            'sonata.media.block.breadcrumb_index' => 'getSonata_Media_Block_BreadcrumbIndexService',
            'sonata.media.block.breadcrumb_view' => 'getSonata_Media_Block_BreadcrumbViewService',
            'sonata.media.block.breadcrumb_view_media' => 'getSonata_Media_Block_BreadcrumbViewMediaService',
            'sonata.media.block.feature_media' => 'getSonata_Media_Block_FeatureMediaService',
            'sonata.media.block.gallery' => 'getSonata_Media_Block_GalleryService',
            'sonata.media.block.gallery_list' => 'getSonata_Media_Block_GalleryListService',
            'sonata.media.block.media' => 'getSonata_Media_Block_MediaService',
            'sonata.media.buzz.browser' => 'getSonata_Media_Buzz_BrowserService',
            'sonata.media.buzz.connector.curl' => 'getSonata_Media_Buzz_Connector_CurlService',
            'sonata.media.buzz.connector.file_get_contents' => 'getSonata_Media_Buzz_Connector_FileGetContentsService',
            'sonata.media.cdn.server' => 'getSonata_Media_Cdn_ServerService',
            'sonata.media.doctrine.event_subscriber' => 'getSonata_Media_Doctrine_EventSubscriberService',
            'sonata.media.filesystem.local' => 'getSonata_Media_Filesystem_LocalService',
            'sonata.media.form.type.media' => 'getSonata_Media_Form_Type_MediaService',
            'sonata.media.generator.default' => 'getSonata_Media_Generator_DefaultService',
            'sonata.media.manager.category.default' => 'getSonata_Media_Manager_Category_DefaultService',
            'sonata.media.manager.gallery' => 'getSonata_Media_Manager_GalleryService',
            'sonata.media.manager.media' => 'getSonata_Media_Manager_MediaService',
            'sonata.media.metadata.amazon' => 'getSonata_Media_Metadata_AmazonService',
            'sonata.media.metadata.noop' => 'getSonata_Media_Metadata_NoopService',
            'sonata.media.metadata.proxy' => 'getSonata_Media_Metadata_ProxyService',
            'sonata.media.pool' => 'getSonata_Media_PoolService',
            'sonata.media.provider.dailymotion' => 'getSonata_Media_Provider_DailymotionService',
            'sonata.media.provider.file' => 'getSonata_Media_Provider_FileService',
            'sonata.media.provider.image' => 'getSonata_Media_Provider_ImageService',
            'sonata.media.provider.vimeo' => 'getSonata_Media_Provider_VimeoService',
            'sonata.media.provider.youtube' => 'getSonata_Media_Provider_YoutubeService',
            'sonata.media.resizer.simple' => 'getSonata_Media_Resizer_SimpleService',
            'sonata.media.resizer.square' => 'getSonata_Media_Resizer_SquareService',
            'sonata.media.security.connected_strategy' => 'getSonata_Media_Security_ConnectedStrategyService',
            'sonata.media.security.forbidden_strategy' => 'getSonata_Media_Security_ForbiddenStrategyService',
            'sonata.media.security.public_strategy' => 'getSonata_Media_Security_PublicStrategyService',
            'sonata.media.security.session_strategy' => 'getSonata_Media_Security_SessionStrategyService',
            'sonata.media.security.superadmin_strategy' => 'getSonata_Media_Security_SuperadminStrategyService',
            'sonata.media.serializer.handler.gallery' => 'getSonata_Media_Serializer_Handler_GalleryService',
            'sonata.media.serializer.handler.media' => 'getSonata_Media_Serializer_Handler_MediaService',
            'sonata.media.thumbnail.format' => 'getSonata_Media_Thumbnail_FormatService',
            'sonata.media.twig.extension' => 'getSonata_Media_Twig_ExtensionService',
            'sonata.media.twig.global' => 'getSonata_Media_Twig_GlobalService',
            'sonata.media.validator.format' => 'getSonata_Media_Validator_FormatService',
            'sonata.seo.block.breadcrumb.homepage' => 'getSonata_Seo_Block_Breadcrumb_HomepageService',
            'sonata.seo.block.email.share_button' => 'getSonata_Seo_Block_Email_ShareButtonService',
            'sonata.seo.block.facebook.like_box' => 'getSonata_Seo_Block_Facebook_LikeBoxService',
            'sonata.seo.block.facebook.like_button' => 'getSonata_Seo_Block_Facebook_LikeButtonService',
            'sonata.seo.block.facebook.send_button' => 'getSonata_Seo_Block_Facebook_SendButtonService',
            'sonata.seo.block.facebook.share_button' => 'getSonata_Seo_Block_Facebook_ShareButtonService',
            'sonata.seo.block.pinterest.pin_button' => 'getSonata_Seo_Block_Pinterest_PinButtonService',
            'sonata.seo.block.twitter.embed' => 'getSonata_Seo_Block_Twitter_EmbedService',
            'sonata.seo.block.twitter.follow_button' => 'getSonata_Seo_Block_Twitter_FollowButtonService',
            'sonata.seo.block.twitter.hashtag_button' => 'getSonata_Seo_Block_Twitter_HashtagButtonService',
            'sonata.seo.block.twitter.mention_button' => 'getSonata_Seo_Block_Twitter_MentionButtonService',
            'sonata.seo.block.twitter.share_button' => 'getSonata_Seo_Block_Twitter_ShareButtonService',
            'sonata.seo.event.breadcrumb' => 'getSonata_Seo_Event_BreadcrumbService',
            'sonata.seo.page.default' => 'getSonata_Seo_Page_DefaultService',
            'sonata.seo.sitemap.manager' => 'getSonata_Seo_Sitemap_ManagerService',
            'sonata.templating' => 'getSonata_TemplatingService',
            'sonata.templating.locator' => 'getSonata_Templating_LocatorService',
            'sonata.templating.name_parser' => 'getSonata_Templating_NameParserService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'swiftmailer.mailer.defaultMailer' => 'getSwiftmailer_Mailer_DefaultMailerService',
            'swiftmailer.mailer.defaultMailer.plugin.messagelogger' => 'getSwiftmailer_Mailer_DefaultMailer_Plugin_MessageloggerService',
            'swiftmailer.mailer.defaultMailer.transport' => 'getSwiftmailer_Mailer_DefaultMailer_TransportService',
            'swiftmailer.mailer.immediateMailer' => 'getSwiftmailer_Mailer_ImmediateMailerService',
            'swiftmailer.mailer.immediateMailer.plugin.messagelogger' => 'getSwiftmailer_Mailer_ImmediateMailer_Plugin_MessageloggerService',
            'swiftmailer.mailer.immediateMailer.transport' => 'getSwiftmailer_Mailer_ImmediateMailer_TransportService',
            'swiftmailer.transport.replacementfactory' => 'getSwiftmailer_Transport_ReplacementfactoryService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator' => 'getTranslatorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.extension.image' => 'getTwig_Extension_ImageService',
            'twig.extension.nomaya_social_bar' => 'getTwig_Extension_NomayaSocialBarService',
            'twig.extension.nomaya_social_links' => 'getTwig_Extension_NomayaSocialLinksService',
            'twig.extension.stfalcon_tinymce' => 'getTwig_Extension_StfalconTinymceService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.runtime.httpkernel' => 'getTwig_Runtime_HttpkernelService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'type.newsletter' => 'getType_NewsletterService',
            'uri_signer' => 'getUriSignerService',
            'validate_request_listener' => 'getValidateRequestListenerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'validator.validator_factory' => 'getValidator_ValidatorFactoryService',
            'var_dumper.cli_dumper' => 'getVarDumper_CliDumperService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'vich_uploader.adapter.orm' => 'getVichUploader_Adapter_OrmService',
            'vich_uploader.directory_namer_subdir' => 'getVichUploader_DirectoryNamerSubdirService',
            'vich_uploader.download_handler' => 'getVichUploader_DownloadHandlerService',
            'vich_uploader.form.type.file' => 'getVichUploader_Form_Type_FileService',
            'vich_uploader.form.type.image' => 'getVichUploader_Form_Type_ImageService',
            'vich_uploader.listener.clean.exemple_images' => 'getVichUploader_Listener_Clean_ExempleImagesService',
            'vich_uploader.listener.remove.exemple_images' => 'getVichUploader_Listener_Remove_ExempleImagesService',
            'vich_uploader.listener.upload.exemple_images' => 'getVichUploader_Listener_Upload_ExempleImagesService',
            'vich_uploader.metadata_reader' => 'getVichUploader_MetadataReaderService',
            'vich_uploader.namer_base64' => 'getVichUploader_NamerBase64Service',
            'vich_uploader.namer_directory_property' => 'getVichUploader_NamerDirectoryPropertyService',
            'vich_uploader.namer_hash' => 'getVichUploader_NamerHashService',
            'vich_uploader.namer_origname' => 'getVichUploader_NamerOrignameService',
            'vich_uploader.namer_property' => 'getVichUploader_NamerPropertyService',
            'vich_uploader.namer_uniqid' => 'getVichUploader_NamerUniqidService',
            'vich_uploader.property_mapping_factory' => 'getVichUploader_PropertyMappingFactoryService',
            'vich_uploader.storage' => 'getVichUploader_StorageService',
            'vich_uploader.templating.helper.uploader_helper' => 'getVichUploader_Templating_Helper_UploaderHelperService',
            'vich_uploader.upload_handler' => 'getVichUploader_UploadHandlerService',
            'video_player.entity_manager' => 'getVideoPlayer_EntityManagerService',
            'video_player.parser_service' => 'getVideoPlayer_ParserServiceService',
            'video_player.twig.video_player_extension' => 'getVideoPlayer_Twig_VideoPlayerExtensionService',
            'video_player.video_manager.default' => 'getVideoPlayer_VideoManager_DefaultService',
            'video_player.video_player_service' => 'getVideoPlayer_VideoPlayerServiceService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.csp.handler' => 'getWebProfiler_Csp_HandlerService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
            'youwe.file_manager.driver' => 'getYouwe_FileManager_DriverService',
            'youwe.file_manager.manager' => 'getYouwe_FileManager_ManagerService',
            'youwe.file_manager.service' => 'getYouwe_FileManager_ServiceService',
            'youwe.twig.extension' => 'getYouwe_Twig_ExtensionService',
        );
        $this->privates = array(
            '1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => true,
            '1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' => true,
            '2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => true,
            '2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' => true,
            '3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' => true,
            'AppBundle\\Event\\Listener\\SitemapSubscriber' => true,
            'VideoPlayerBundle.YourUploadListener' => true,
            'annotations.cache' => true,
            'annotations.reader' => true,
            'app.sitemap.blog_post_subscriber' => true,
            'argument_resolver.default' => true,
            'argument_resolver.request' => true,
            'argument_resolver.request_attribute' => true,
            'argument_resolver.service' => true,
            'argument_resolver.session' => true,
            'argument_resolver.variadic' => true,
            'assetic.asset_factory' => true,
            'autowired.AppBundle\\Entity\\Exemple' => true,
            'cache.annotations' => true,
            'cache.annotations.recorder_inner' => true,
            'cache.app.recorder_inner' => true,
            'cache.serializer.recorder_inner' => true,
            'cache.system.recorder_inner' => true,
            'cache.validator' => true,
            'cache.validator.recorder_inner' => true,
            'cmf_core.security.published_voter' => true,
            'console.error_listener' => true,
            'controller_name_converter' => true,
            'debug.file_link_formatter' => true,
            'debug.log_processor' => true,
            'debug.security.access.decision_manager' => true,
            'doctrine.dbal.logger' => true,
            'doctrine.dbal.logger.profiling.default' => true,
            'doctrine.dbal.logger.profiling.mandantA' => true,
            'doctrine.dbal.logger.profiling.mandantB' => true,
            'doctrine.orm.container_repository_factory' => true,
            'doctrine.orm.default_entity_manager.delegate' => true,
            'doctrine.orm.mandantA_entity_manager.delegate' => true,
            'doctrine.orm.mandantB_entity_manager.delegate' => true,
            'doctrine.orm.naming_strategy.default' => true,
            'doctrine.orm.quote_strategy.default' => true,
            'form.server_params' => true,
            'fos_user.user_listener' => true,
            'fos_user.user_provider.username' => true,
            'fos_user.util.canonical_fields_updater' => true,
            'fos_user.util.password_updater' => true,
            'jms_di_extra.controller_resolver' => true,
            'jms_i18n_routing.route_exclusion_strategy' => true,
            'jms_serializer.unserialize_object_constructor' => true,
            'knp.doctrine_behaviors.loggable_subscriber' => true,
            'knp.doctrine_behaviors.reflection.class_analyzer' => true,
            'knp.doctrine_behaviors.sluggable_subscriber' => true,
            'knp.doctrine_behaviors.translatable_subscriber' => true,
            'knp_menu.menu_provider.builder_alias' => true,
            'knp_menu.menu_provider.lazy' => true,
            'resolve_controller_name_subscriber' => true,
            'router.request_context' => true,
            'security.access.authenticated_voter' => true,
            'security.access.expression_voter' => true,
            'security.access.role_hierarchy_voter' => true,
            'security.authentication.manager' => true,
            'security.authentication.provider.anonymous.main' => true,
            'security.authentication.provider.dao.main' => true,
            'security.authentication.session_strategy' => true,
            'security.authentication.trust_resolver' => true,
            'security.csrf.token_storage' => true,
            'security.firewall.map' => true,
            'security.logout_url_generator' => true,
            'security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d' => true,
            'security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db' => true,
            'security.role_hierarchy' => true,
            'security.user_checker' => true,
            'security.user_value_resolver' => true,
            'service_locator.3368f0f4075960b08010e4ebdaedef01' => true,
            'service_locator.4307ff7f09475aed9ea8e29ba86cf217' => true,
            'service_locator.552fd1ede5f2836c5944de264b796c06' => true,
            'session.storage.metadata_bag' => true,
            'swiftmailer.mailer.default.transport.eventdispatcher' => true,
            'swiftmailer.transport.replacementfactory' => true,
            'templating.locator' => true,
            'validator.validator_factory' => true,
            'vich_uploader.adapter.orm' => true,
            'vich_uploader.listener.clean.exemple_images' => true,
            'vich_uploader.listener.remove.exemple_images' => true,
            'vich_uploader.listener.upload.exemple_images' => true,
            'vich_uploader.metadata_reader' => true,
            'vich_uploader.property_mapping_factory' => true,
            'web_profiler.csp.handler' => true,
        );
        $this->aliases = array(
            'a2lix_translation_form.default.service.locale_provider' => 'a2lix_translation_form.default.service.parameter_locale_provider',
            'a2lix_translation_form.manager_registry' => 'doctrine',
            'cache.app_clearer' => 'cache.default_clearer',
            'cmf_core.publish_workflow.checker' => 'cmf_core.publish_workflow.checker.default',
            'cmf_seo.cache' => 'cmf_seo.cache.file',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'doctrine.orm.mandantA_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache',
            'doctrine.orm.mandantA_query_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_query_cache',
            'doctrine.orm.mandantA_result_cache' => 'doctrine_cache.providers.doctrine.orm.mandantA_result_cache',
            'doctrine.orm.mandantB_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache',
            'doctrine.orm.mandantB_query_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_query_cache',
            'doctrine.orm.mandantB_result_cache' => 'doctrine_cache.providers.doctrine.orm.mandantB_result_cache',
            'easy_admin.property_accessor' => 'property_accessor',
            'event_dispatcher' => 'debug.event_dispatcher',
            'fos_user.doctrine_registry' => 'doctrine',
            'fos_user.util.username_canonicalizer' => 'fos_user.util.email_canonicalizer',
            'mailer' => 'swiftmailer.mailer.default',
            'presta_sitemap.dumper' => 'presta_sitemap.dumper_default',
            'presta_sitemap.generator' => 'presta_sitemap.generator_default',
            'session.storage' => 'session.storage.native',
            'sonata.block.cache.handler' => 'sonata.block.cache.handler.default',
            'sonata.block.context_manager' => 'sonata.block.context_manager.default',
            'sonata.block.renderer' => 'sonata.block.renderer.default',
            'sonata.media.adapter.image.default' => 'sonata.media.adapter.image.gd',
            'sonata.media.manager.category' => 'sonata.media.manager.category.default',
            'sonata.media.resizer.default' => 'sonata.media.resizer.simple',
            'sonata.seo.page' => 'sonata.seo.page.default',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    /**
     * {@inheritdoc}
     */
    public function isCompiled()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function isFrozen()
    {
        @trigger_error(sprintf('The %s() method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the isCompiled() method instead.', __METHOD__), E_USER_DEPRECATED);

        return true;
    }

    /**
     * Gets the public 'AppBundle\Controller\Admin\AdminController' shared autowired service.
     *
     * @return \AppBundle\Controller\Admin\AdminController
     */
    protected function getAppBundle_Controller_Admin_AdminControllerService()
    {
        $this->services['AppBundle\Controller\Admin\AdminController'] = $instance = new \AppBundle\Controller\Admin\AdminController(new \AppBundle\Service\CsvExporter());

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\Admin\DashboardController' shared autowired service.
     *
     * @return \AppBundle\Controller\Admin\DashboardController
     */
    protected function getAppBundle_Controller_Admin_DashboardControllerService()
    {
        $this->services['AppBundle\Controller\Admin\DashboardController'] = $instance = new \AppBundle\Controller\Admin\DashboardController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\Admin\ToolsController' shared autowired service.
     *
     * @return \AppBundle\Controller\Admin\ToolsController
     */
    protected function getAppBundle_Controller_Admin_ToolsControllerService()
    {
        $this->services['AppBundle\Controller\Admin\ToolsController'] = $instance = new \AppBundle\Controller\Admin\ToolsController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\Admin\UserController' shared autowired service.
     *
     * @return \AppBundle\Controller\Admin\UserController
     */
    protected function getAppBundle_Controller_Admin_UserControllerService()
    {
        $this->services['AppBundle\Controller\Admin\UserController'] = $instance = new \AppBundle\Controller\Admin\UserController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\AppMobileRegisterController' shared autowired service.
     *
     * @return \AppBundle\Controller\AppMobileRegisterController
     */
    protected function getAppBundle_Controller_AppMobileRegisterControllerService()
    {
        $this->services['AppBundle\Controller\AppMobileRegisterController'] = $instance = new \AppBundle\Controller\AppMobileRegisterController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\ExempleController' shared autowired service.
     *
     * @return \AppBundle\Controller\ExempleController
     */
    protected function getAppBundle_Controller_ExempleControllerService()
    {
        $this->services['AppBundle\Controller\ExempleController'] = $instance = new \AppBundle\Controller\ExempleController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\InsertYouTubeController' shared autowired service.
     *
     * @return \AppBundle\Controller\InsertYouTubeController
     */
    protected function getAppBundle_Controller_InsertYouTubeControllerService()
    {
        $this->services['AppBundle\Controller\InsertYouTubeController'] = $instance = new \AppBundle\Controller\InsertYouTubeController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\Main\MainController' shared autowired service.
     *
     * @return \AppBundle\Controller\Main\MainController
     */
    protected function getAppBundle_Controller_Main_MainControllerService()
    {
        $this->services['AppBundle\Controller\Main\MainController'] = $instance = new \AppBundle\Controller\Main\MainController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\RegisterController' shared autowired service.
     *
     * @return \AppBundle\Controller\RegisterController
     */
    protected function getAppBundle_Controller_RegisterControllerService()
    {
        $this->services['AppBundle\Controller\RegisterController'] = $instance = new \AppBundle\Controller\RegisterController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Controller\VertinGoFeedControllerController' shared autowired service.
     *
     * @return \AppBundle\Controller\VertinGoFeedControllerController
     */
    protected function getAppBundle_Controller_VertinGoFeedControllerControllerService()
    {
        $this->services['AppBundle\Controller\VertinGoFeedControllerController'] = $instance = new \AppBundle\Controller\VertinGoFeedControllerController();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'AppBundle\Form\ExempleFilterType' shared autowired service.
     *
     * @return \AppBundle\Form\ExempleFilterType
     */
    protected function getAppBundle_Form_ExempleFilterTypeService()
    {
        return $this->services['AppBundle\Form\ExempleFilterType'] = new \AppBundle\Form\ExempleFilterType();
    }

    /**
     * Gets the public 'Sonata\BlockBundle\Command\DebugBlocksCommand' shared service.
     *
     * @return \Sonata\BlockBundle\Command\DebugBlocksCommand
     */
    protected function getSonata_BlockBundle_Command_DebugBlocksCommandService()
    {
        return $this->services['Sonata\BlockBundle\Command\DebugBlocksCommand'] = new \Sonata\BlockBundle\Command\DebugBlocksCommand();
    }

    /**
     * Gets the public 'Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand' shared service.
     *
     * @return \Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand
     */
    protected function getSonata_CoreBundle_Command_SonataDumpDoctrineMetaCommandService()
    {
        return $this->services['Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand'] = new \Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand();
    }

    /**
     * Gets the public 'Sonata\CoreBundle\Command\SonataListFormMappingCommand' shared service.
     *
     * @return \Sonata\CoreBundle\Command\SonataListFormMappingCommand
     */
    protected function getSonata_CoreBundle_Command_SonataListFormMappingCommandService()
    {
        return $this->services['Sonata\CoreBundle\Command\SonataListFormMappingCommand'] = new \Sonata\CoreBundle\Command\SonataListFormMappingCommand();
    }

    /**
     * Gets the public 'Sonata\EasyExtendsBundle\Command\DumpMappingCommand' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Command\DumpMappingCommand
     */
    protected function getSonata_EasyExtendsBundle_Command_DumpMappingCommandService()
    {
        return $this->services['Sonata\EasyExtendsBundle\Command\DumpMappingCommand'] = new \Sonata\EasyExtendsBundle\Command\DumpMappingCommand();
    }

    /**
     * Gets the public 'Sonata\EasyExtendsBundle\Command\GenerateCommand' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Command\GenerateCommand
     */
    protected function getSonata_EasyExtendsBundle_Command_GenerateCommandService()
    {
        return $this->services['Sonata\EasyExtendsBundle\Command\GenerateCommand'] = new \Sonata\EasyExtendsBundle\Command\GenerateCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\AddMassMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\AddMassMediaCommand
     */
    protected function getSonata_MediaBundle_Command_AddMassMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\AddMassMediaCommand'] = new \Sonata\MediaBundle\Command\AddMassMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\AddMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\AddMediaCommand
     */
    protected function getSonata_MediaBundle_Command_AddMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\AddMediaCommand'] = new \Sonata\MediaBundle\Command\AddMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\CleanMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\CleanMediaCommand
     */
    protected function getSonata_MediaBundle_Command_CleanMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\CleanMediaCommand'] = new \Sonata\MediaBundle\Command\CleanMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\FixMediaContextCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\FixMediaContextCommand
     */
    protected function getSonata_MediaBundle_Command_FixMediaContextCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\FixMediaContextCommand'] = new \Sonata\MediaBundle\Command\FixMediaContextCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\MigrateToJsonTypeCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\MigrateToJsonTypeCommand
     */
    protected function getSonata_MediaBundle_Command_MigrateToJsonTypeCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\MigrateToJsonTypeCommand'] = new \Sonata\MediaBundle\Command\MigrateToJsonTypeCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\RefreshMetadataCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\RefreshMetadataCommand
     */
    protected function getSonata_MediaBundle_Command_RefreshMetadataCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\RefreshMetadataCommand'] = new \Sonata\MediaBundle\Command\RefreshMetadataCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\RemoveThumbsCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\RemoveThumbsCommand
     */
    protected function getSonata_MediaBundle_Command_RemoveThumbsCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\RemoveThumbsCommand'] = new \Sonata\MediaBundle\Command\RemoveThumbsCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\SyncThumbsCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\SyncThumbsCommand
     */
    protected function getSonata_MediaBundle_Command_SyncThumbsCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\SyncThumbsCommand'] = new \Sonata\MediaBundle\Command\SyncThumbsCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\UpdateCdnStatusCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\UpdateCdnStatusCommand
     */
    protected function getSonata_MediaBundle_Command_UpdateCdnStatusCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\UpdateCdnStatusCommand'] = new \Sonata\MediaBundle\Command\UpdateCdnStatusCommand();
    }

    /**
     * Gets the public 'a2lix_translation_form.default.listener.translations' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\EventListener\TranslationsListener
     */
    protected function getA2lixTranslationForm_Default_Listener_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.listener.translations'] = new \A2lix\TranslationFormBundle\Form\EventListener\TranslationsListener(${($_ = isset($this->services['a2lix_translation_form.default.service.translation']) ? $this->services['a2lix_translation_form.default.service.translation'] : $this->get('a2lix_translation_form.default.service.translation')) && false ?: '_'});
    }

    /**
     * Gets the public 'a2lix_translation_form.default.listener.translationsForms' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\EventListener\TranslationsFormsListener
     */
    protected function getA2lixTranslationForm_Default_Listener_TranslationsFormsService()
    {
        return $this->services['a2lix_translation_form.default.listener.translationsForms'] = new \A2lix\TranslationFormBundle\Form\EventListener\TranslationsFormsListener();
    }

    /**
     * Gets the public 'a2lix_translation_form.default.service.parameter_locale_provider' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Locale\DefaultProvider
     */
    protected function getA2lixTranslationForm_Default_Service_ParameterLocaleProviderService()
    {
        return $this->services['a2lix_translation_form.default.service.parameter_locale_provider'] = new \A2lix\TranslationFormBundle\Locale\DefaultProvider(array(0 => 'fr', 1 => 'en'), 'fr', array());
    }

    /**
     * Gets the public 'a2lix_translation_form.default.service.translation' shared service.
     *
     * @return \A2lix\TranslationFormBundle\TranslationForm\TranslationForm
     */
    protected function getA2lixTranslationForm_Default_Service_TranslationService()
    {
        return $this->services['a2lix_translation_form.default.service.translation'] = new \A2lix\TranslationFormBundle\TranslationForm\TranslationForm(${($_ = isset($this->services['form.registry']) ? $this->services['form.registry'] : $this->get('form.registry')) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'a2lix_translation_form.default.type.translatedEntity' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslatedEntityType
     */
    protected function getA2lixTranslationForm_Default_Type_TranslatedEntityService()
    {
        $this->services['a2lix_translation_form.default.type.translatedEntity'] = $instance = new \A2lix\TranslationFormBundle\Form\Type\TranslatedEntityType();

        $instance->setRequestStack(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'a2lix_translation_form.default.type.translations' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsType
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsService()
    {
        return $this->services['a2lix_translation_form.default.type.translations'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsType(${($_ = isset($this->services['a2lix_translation_form.default.listener.translations']) ? $this->services['a2lix_translation_form.default.listener.translations'] : $this->get('a2lix_translation_form.default.listener.translations')) && false ?: '_'}, ${($_ = isset($this->services['a2lix_translation_form.default.service.parameter_locale_provider']) ? $this->services['a2lix_translation_form.default.service.parameter_locale_provider'] : $this->get('a2lix_translation_form.default.service.parameter_locale_provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'a2lix_translation_form.default.type.translationsFields' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsFieldsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsFields'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFieldsType();
    }

    /**
     * Gets the public 'a2lix_translation_form.default.type.translationsForms' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsFormsService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsForms'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsFormsType(${($_ = isset($this->services['a2lix_translation_form.default.service.translation']) ? $this->services['a2lix_translation_form.default.service.translation'] : $this->get('a2lix_translation_form.default.service.translation')) && false ?: '_'}, ${($_ = isset($this->services['a2lix_translation_form.default.listener.translationsForms']) ? $this->services['a2lix_translation_form.default.listener.translationsForms'] : $this->get('a2lix_translation_form.default.listener.translationsForms')) && false ?: '_'}, ${($_ = isset($this->services['a2lix_translation_form.default.service.parameter_locale_provider']) ? $this->services['a2lix_translation_form.default.service.parameter_locale_provider'] : $this->get('a2lix_translation_form.default.service.parameter_locale_provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'a2lix_translation_form.default.type.translationsLocalesSelector' shared service.
     *
     * @return \A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType
     */
    protected function getA2lixTranslationForm_Default_Type_TranslationsLocalesSelectorService()
    {
        return $this->services['a2lix_translation_form.default.type.translationsLocalesSelector'] = new \A2lix\TranslationFormBundle\Form\Type\TranslationsLocalesSelectorType(${($_ = isset($this->services['a2lix_translation_form.default.service.parameter_locale_provider']) ? $this->services['a2lix_translation_form.default.service.parameter_locale_provider'] : $this->get('a2lix_translation_form.default.service.parameter_locale_provider')) && false ?: '_'});
    }

    /**
     * Gets the public 'annotation_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader
     */
    protected function getAnnotationReaderService()
    {
        $this->services['annotation_reader'] = $instance = new \Doctrine\Common\Annotations\CachedReader(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, new \Doctrine\Common\Cache\ArrayCache(), true);

        $instance->cacheProviderBackup = function () {
            return ${($_ = isset($this->services['annotations.cache']) ? $this->services['annotations.cache'] : $this->getAnnotations_CacheService()) && false ?: '_'};
        };

        return $instance;
    }

    /**
     * Gets the public 'arkounay_block_service' shared service.
     *
     * @return \Arkounay\BlockI18nBundle\Service\BlockService
     */
    protected function getArkounayBlockServiceService()
    {
        return $this->services['arkounay_block_service'] = new \Arkounay\BlockI18nBundle\Service\BlockService(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'}, array('roles' => array(0 => 'ROLE_ADMIN')));
    }

    /**
     * Gets the public 'assetic.asset_manager' shared service.
     *
     * @return \Assetic\Factory\LazyAssetManager
     */
    protected function getAssetic_AssetManagerService()
    {
        $a = ${($_ = isset($this->services['templating.loader']) ? $this->services['templating.loader'] : $this->get('templating.loader')) && false ?: '_'};

        $this->services['assetic.asset_manager'] = $instance = new \Assetic\Factory\LazyAssetManager(${($_ = isset($this->services['assetic.asset_factory']) ? $this->services['assetic.asset_factory'] : $this->getAssetic_AssetFactoryService()) && false ?: '_'}, array('twig' => new \Assetic\Factory\Loader\CachedFormulaLoader(new \Assetic\Extension\Twig\TwigFormulaLoader(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.assetic']) ? $this->services['monolog.logger.assetic'] : $this->get('monolog.logger.assetic', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}), new \Assetic\Cache\ConfigCache((__DIR__.'/assetic/config')), true)));

        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'YouweFileManagerBundle', ($this->targetDirs[3].'\\app/Resources/YouweFileManagerBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'YouweFileManagerBundle', ($this->targetDirs[3].'\\vendor\\youwe\\file-manager-bundle\\Youwe\\FileManagerBundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\CoalescingDirectoryResource(array(0 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'NewslettersBundle', ($this->targetDirs[3].'\\app/Resources/NewslettersBundle/views'), '/\\.[^.]+\\.twig$/'), 1 => new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, 'NewslettersBundle', ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/views'), '/\\.[^.]+\\.twig$/'))), 'twig');
        $instance->addResource(new \Symfony\Bundle\AsseticBundle\Factory\Resource\DirectoryResource($a, '', ($this->targetDirs[3].'\\app/Resources/views'), '/\\.[^.]+\\.twig$/'), 'twig');

        return $instance;
    }

    /**
     * Gets the public 'assetic.controller' shared service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Controller\AsseticController
     */
    protected function getAssetic_ControllerService()
    {
        return $this->services['assetic.controller'] = new \Symfony\Bundle\AsseticBundle\Controller\AsseticController(${($_ = isset($this->services['assetic.asset_manager']) ? $this->services['assetic.asset_manager'] : $this->get('assetic.asset_manager')) && false ?: '_'}, new \Assetic\Cache\FilesystemCache((__DIR__.'/assetic/assets')), false, ${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'assetic.filter_manager' shared service.
     *
     * @return \Symfony\Bundle\AsseticBundle\FilterManager
     */
    protected function getAssetic_FilterManagerService()
    {
        return $this->services['assetic.filter_manager'] = new \Symfony\Bundle\AsseticBundle\FilterManager($this, array());
    }

    /**
     * Gets the public 'assetic.request_listener' shared service.
     *
     * @return \Symfony\Bundle\AsseticBundle\EventListener\RequestListener
     */
    protected function getAssetic_RequestListenerService()
    {
        return $this->services['assetic.request_listener'] = new \Symfony\Bundle\AsseticBundle\EventListener\RequestListener();
    }

    /**
     * Gets the public 'assets.context' shared service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), ${($_ = isset($this->services['assets.context']) ? $this->services['assets.context'] : $this->get('assets.context')) && false ?: '_'}), array());
    }

    /**
     * Gets the public 'bnbc_upload.form.type.bnbc_ajax_file' shared service.
     *
     * @return \Bnbc\UploadBundle\Form\Type\AjaxfileType
     */
    protected function getBnbcUpload_Form_Type_BnbcAjaxFileService()
    {
        return $this->services['bnbc_upload.form.type.bnbc_ajax_file'] = new \Bnbc\UploadBundle\Form\Type\AjaxfileType();
    }

    /**
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AppService()
    {
        return $this->services['cache.app'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.app.recorder_inner']) ? $this->services['cache.app.recorder_inner'] : $this->getCache_App_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache.default_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_DefaultClearerService()
    {
        return $this->services['cache.default_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.global_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_GlobalClearerService()
    {
        return $this->services['cache.global_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.system.recorder_inner']) ? $this->services['cache.system.recorder_inner'] : $this->getCache_System_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => ${($_ = isset($this->services['cache.default_clearer']) ? $this->services['cache.default_clearer'] : $this->get('cache.default_clearer')) && false ?: '_'}, 1 => ${($_ = isset($this->services['cmf_seo.cache.file']) ? $this->services['cmf_seo.cache.file'] : $this->get('cmf_seo.cache.file')) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache_warmer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
     */
    protected function getCacheWarmerService()
    {
        $a = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'};
        $b = ${($_ = isset($this->services['templating.filename_parser']) ? $this->services['templating.filename_parser'] : $this->get('templating.filename_parser')) && false ?: '_'};

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[3].'\\app/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}), 1 => new \Symfony\Bundle\AsseticBundle\CacheWarmer\AssetManagerCacheWarmer($this), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer(${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}, (__DIR__.'/validation.php'), ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}), 4 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}), 5 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, (__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}), 6 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer(new \Symfony\Component\DependencyInjection\ServiceLocator(array('twig' => function () {
            $f = function (\Twig\Environment $v) { return $v; }; return $f(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
        })), $c, array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL, ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form') => NULL)), 7 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer($this, new \Symfony\Bundle\TwigBundle\TemplateIterator($a, ($this->targetDirs[3].'\\app'), array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL, ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form') => NULL))), 8 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}), 9 => new \JMS\DiExtraBundle\HttpKernel\ControllerInjectorsWarmer($a, ${($_ = isset($this->services['jms_di_extra.controller_resolver']) ? $this->services['jms_di_extra.controller_resolver'] : $this->getJmsDiExtra_ControllerResolverService()) && false ?: '_'}, array(), false, array()), 10 => ${($_ = isset($this->services['cmf_seo.cache.file']) ? $this->services['cmf_seo.cache.file'] : $this->get('cmf_seo.cache.file')) && false ?: '_'}));
    }

    /**
     * Gets the public 'cmf_core.publish_workflow.access_decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AccessDecisionManager
     */
    protected function getCmfCore_PublishWorkflow_AccessDecisionManagerService()
    {
        return $this->services['cmf_core.publish_workflow.access_decision_manager'] = new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(array(0 => new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishableVoter(), 1 => new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishTimePeriodVoter()), 'unanimous', true);
    }

    /**
     * Gets the public 'cmf_core.publish_workflow.checker.default' shared service.
     *
     * @return \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\PublishWorkflowChecker
     */
    protected function getCmfCore_PublishWorkflow_Checker_DefaultService()
    {
        return $this->services['cmf_core.publish_workflow.checker.default'] = new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\PublishWorkflowChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'}, ${($_ = isset($this->services['cmf_core.publish_workflow.access_decision_manager']) ? $this->services['cmf_core.publish_workflow.access_decision_manager'] : $this->get('cmf_core.publish_workflow.access_decision_manager')) && false ?: '_'}, 'ROLE_CAN_VIEW_NON_PUBLISHED');
    }

    /**
     * Gets the public 'cmf_media.browser_file_helper' shared service.
     *
     * @return \Symfony\Cmf\Bundle\MediaBundle\File\BrowserFileHelper
     */
    protected function getCmfMedia_BrowserFileHelperService()
    {
        return $this->services['cmf_media.browser_file_helper'] = new \Symfony\Cmf\Bundle\MediaBundle\File\BrowserFileHelper(NULL);
    }

    /**
     * Gets the public 'cmf_seo.cache.file' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Cache\FileCache
     */
    protected function getCmfSeo_Cache_FileService()
    {
        return $this->services['cmf_seo.cache.file'] = new \Symfony\Cmf\Bundle\SeoBundle\Cache\FileCache(__DIR__, 'cmf_seo');
    }

    /**
     * Gets the public 'cmf_seo.config_values' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\DependencyInjection\ConfigValues
     */
    protected function getCmfSeo_ConfigValuesService()
    {
        $this->services['cmf_seo.config_values'] = $instance = new \Symfony\Cmf\Bundle\SeoBundle\DependencyInjection\ConfigValues();

        $instance->setTitle(NULL);
        $instance->setDescription(NULL);
        $instance->setTranslationDomain('seo');
        $instance->setOriginalUrlBehaviour('redirect');

        return $instance;
    }

    /**
     * Gets the public 'cmf_seo.error.exclusion_matcher' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Matcher\ExclusionMatcher
     */
    protected function getCmfSeo_Error_ExclusionMatcherService()
    {
        return $this->services['cmf_seo.error.exclusion_matcher'] = new \Symfony\Cmf\Bundle\SeoBundle\Matcher\ExclusionMatcher();
    }

    /**
     * Gets the public 'cmf_seo.error.suggestion_provider.controller' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Controller\SuggestionProviderController
     */
    protected function getCmfSeo_Error_SuggestionProvider_ControllerService()
    {
        return $this->services['cmf_seo.error.suggestion_provider.controller'] = new \Symfony\Cmf\Bundle\SeoBundle\Controller\SuggestionProviderController(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true, ${($_ = isset($this->services['cmf_seo.error.exclusion_matcher']) ? $this->services['cmf_seo.error.exclusion_matcher'] : $this->get('cmf_seo.error.exclusion_matcher')) && false ?: '_'}, array(), array());
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.description' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\DescriptionExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_DescriptionService()
    {
        return $this->services['cmf_seo.extractor_strategy.description'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\DescriptionExtractor();
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.extras' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\ExtrasExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_ExtrasService()
    {
        return $this->services['cmf_seo.extractor_strategy.extras'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\ExtrasExtractor();
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.keywords' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\KeywordsExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_KeywordsService()
    {
        return $this->services['cmf_seo.extractor_strategy.keywords'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\KeywordsExtractor();
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.original_route' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\OriginalRouteExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_OriginalRouteService()
    {
        return $this->services['cmf_seo.extractor_strategy.original_route'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\OriginalRouteExtractor(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.original_url' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\OriginalUrlExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_OriginalUrlService()
    {
        return $this->services['cmf_seo.extractor_strategy.original_url'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\OriginalUrlExtractor();
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.read_title' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\TitleReadExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_ReadTitleService()
    {
        return $this->services['cmf_seo.extractor_strategy.read_title'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\TitleReadExtractor();
    }

    /**
     * Gets the public 'cmf_seo.extractor_strategy.title' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Extractor\TitleExtractor
     */
    protected function getCmfSeo_ExtractorStrategy_TitleService()
    {
        return $this->services['cmf_seo.extractor_strategy.title'] = new \Symfony\Cmf\Bundle\SeoBundle\Extractor\TitleExtractor();
    }

    /**
     * Gets the public 'cmf_seo.form.type.seo_metadata' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Form\Type\SeoMetadataType
     */
    protected function getCmfSeo_Form_Type_SeoMetadataService()
    {
        return $this->services['cmf_seo.form.type.seo_metadata'] = new \Symfony\Cmf\Bundle\SeoBundle\Form\Type\SeoMetadataType('Symfony\\Cmf\\Bundle\\SeoBundle\\Model\\SeoMetadata', array('generic_metadata' => false, 'storage' => 'default'));
    }

    /**
     * Gets the public 'cmf_seo.language_listener' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\EventListener\LanguageListener
     */
    protected function getCmfSeo_LanguageListenerService()
    {
        return $this->services['cmf_seo.language_listener'] = new \Symfony\Cmf\Bundle\SeoBundle\EventListener\LanguageListener();
    }

    /**
     * Gets the public 'cmf_seo.presentation' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\SeoPresentation
     */
    protected function getCmfSeo_PresentationService()
    {
        $this->services['cmf_seo.presentation'] = $instance = new \Symfony\Cmf\Bundle\SeoBundle\SeoPresentation(${($_ = isset($this->services['sonata.seo.page.default']) ? $this->services['sonata.seo.page.default'] : $this->get('sonata.seo.page.default')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['cmf_seo.config_values']) ? $this->services['cmf_seo.config_values'] : $this->get('cmf_seo.config_values')) && false ?: '_'}, ${($_ = isset($this->services['cmf_seo.cache.file']) ? $this->services['cmf_seo.cache.file'] : $this->get('cmf_seo.cache.file')) && false ?: '_'});

        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.title']) ? $this->services['cmf_seo.extractor_strategy.title'] : $this->get('cmf_seo.extractor_strategy.title')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.read_title']) ? $this->services['cmf_seo.extractor_strategy.read_title'] : $this->get('cmf_seo.extractor_strategy.read_title')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.description']) ? $this->services['cmf_seo.extractor_strategy.description'] : $this->get('cmf_seo.extractor_strategy.description')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.extras']) ? $this->services['cmf_seo.extractor_strategy.extras'] : $this->get('cmf_seo.extractor_strategy.extras')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.keywords']) ? $this->services['cmf_seo.extractor_strategy.keywords'] : $this->get('cmf_seo.extractor_strategy.keywords')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.original_url']) ? $this->services['cmf_seo.extractor_strategy.original_url'] : $this->get('cmf_seo.extractor_strategy.original_url')) && false ?: '_'}, 0);
        $instance->addExtractor(${($_ = isset($this->services['cmf_seo.extractor_strategy.original_route']) ? $this->services['cmf_seo.extractor_strategy.original_route'] : $this->get('cmf_seo.extractor_strategy.original_route')) && false ?: '_'}, 0);

        return $instance;
    }

    /**
     * Gets the public 'cmf_seo.sitemap.controller' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Controller\SitemapController
     */
    protected function getCmfSeo_Sitemap_ControllerService()
    {
        return $this->services['cmf_seo.sitemap.controller'] = new \Symfony\Cmf\Bundle\SeoBundle\Controller\SitemapController(${($_ = isset($this->services['cmf_seo.sitemap.provider']) ? $this->services['cmf_seo.sitemap.provider'] : $this->get('cmf_seo.sitemap.provider')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, array('sitemap' => array('templates' => array('html' => 'CmfSeoBundle:Sitemap:index.html.twig', 'xml' => 'CmfSeoBundle:Sitemap:index.xml.twig')), 'categories' => array('templates' => array('html' => 'sitemap/categories.html.twig', 'xml' => 'CmfSeoBundle:Sitemap:index.xml.twig'))));
    }

    /**
     * Gets the public 'cmf_seo.sitemap.guesser.categories.default_change_frequency' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\DefaultChangeFrequencyGuesser
     */
    protected function getCmfSeo_Sitemap_Guesser_Categories_DefaultChangeFrequencyService()
    {
        return $this->services['cmf_seo.sitemap.guesser.categories.default_change_frequency'] = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\DefaultChangeFrequencyGuesser('hourly');
    }

    /**
     * Gets the public 'cmf_seo.sitemap.guesser_chain' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\GuesserChain
     */
    protected function getCmfSeo_Sitemap_GuesserChainService()
    {
        $a = ${($_ = isset($this->services['cmf_seo.presentation']) ? $this->services['cmf_seo.presentation'] : $this->get('cmf_seo.presentation')) && false ?: '_'};
        $b = ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'};

        $c = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\SeoMetadataTitleGuesser($a);

        $d = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\LocationGuesser($b);

        $e = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\DefaultChangeFrequencyGuesser('always');

        $this->services['cmf_seo.sitemap.guesser_chain'] = $instance = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\GuesserChain();

        $instance->addItem($c, -2, 'sitemap');
        $instance->addItem($c, -2, 'categories');
        $instance->addItem($d, -2, 'sitemap');
        $instance->addItem($d, -2, 'categories');
        $instance->addItem($e, -2, 'sitemap');
        $instance->addItem($e, -2, 'categories');
        $instance->addItem(${($_ = isset($this->services['cmf_seo.sitemap.guesser.categories.default_change_frequency']) ? $this->services['cmf_seo.sitemap.guesser.categories.default_change_frequency'] : $this->get('cmf_seo.sitemap.guesser.categories.default_change_frequency')) && false ?: '_'}, -1, 'categories');

        return $instance;
    }

    /**
     * Gets the public 'cmf_seo.sitemap.loader_chain' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\LoaderChain
     */
    protected function getCmfSeo_Sitemap_LoaderChainService()
    {
        return $this->services['cmf_seo.sitemap.loader_chain'] = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\LoaderChain();
    }

    /**
     * Gets the public 'cmf_seo.sitemap.provider' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\UrlInformationProvider
     */
    protected function getCmfSeo_Sitemap_ProviderService()
    {
        return $this->services['cmf_seo.sitemap.provider'] = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\UrlInformationProvider(${($_ = isset($this->services['cmf_seo.sitemap.loader_chain']) ? $this->services['cmf_seo.sitemap.loader_chain'] : $this->get('cmf_seo.sitemap.loader_chain')) && false ?: '_'}, ${($_ = isset($this->services['cmf_seo.sitemap.voter_chain']) ? $this->services['cmf_seo.sitemap.voter_chain'] : $this->get('cmf_seo.sitemap.voter_chain')) && false ?: '_'}, ${($_ = isset($this->services['cmf_seo.sitemap.guesser_chain']) ? $this->services['cmf_seo.sitemap.guesser_chain'] : $this->get('cmf_seo.sitemap.guesser_chain')) && false ?: '_'});
    }

    /**
     * Gets the public 'cmf_seo.sitemap.voter.sitemap_aware_document' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\SitemapAwareDocumentVoter
     */
    protected function getCmfSeo_Sitemap_Voter_SitemapAwareDocumentService()
    {
        return $this->services['cmf_seo.sitemap.voter.sitemap_aware_document'] = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\SitemapAwareDocumentVoter();
    }

    /**
     * Gets the public 'cmf_seo.sitemap.voter_chain' shared service.
     *
     * @return \Symfony\Cmf\Bundle\SeoBundle\Sitemap\VoterChain
     */
    protected function getCmfSeo_Sitemap_VoterChainService()
    {
        $a = ${($_ = isset($this->services['cmf_seo.sitemap.voter.sitemap_aware_document']) ? $this->services['cmf_seo.sitemap.voter.sitemap_aware_document'] : $this->get('cmf_seo.sitemap.voter.sitemap_aware_document')) && false ?: '_'};
        $b = ${($_ = isset($this->services['cmf_core.publish_workflow.checker.default']) ? $this->services['cmf_core.publish_workflow.checker.default'] : $this->get('cmf_core.publish_workflow.checker.default')) && false ?: '_'};

        $c = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\PublishWorkflowVoter($b);

        $this->services['cmf_seo.sitemap.voter_chain'] = $instance = new \Symfony\Cmf\Bundle\SeoBundle\Sitemap\VoterChain();

        $instance->addItem($c, -2, 'sitemap');
        $instance->addItem($c, -2, 'categories');
        $instance->addItem($a, -2, 'sitemap');
        $instance->addItem($a, -2, 'categories');

        return $instance;
    }

    /**
     * Gets the public 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected function getConfigCacheFactoryService()
    {
        return $this->services['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f']) ? $this->services['1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f'] : $this->get1Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f']) ? $this->services['2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f'] : $this->get2Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService()) && false ?: '_'};
        }, 2));
    }

    /**
     * Gets the public 'console.command.appbundle_command_populateadminuserscommand' shared autowired service.
     *
     * @return \AppBundle\Command\PopulateAdminUsersCommand
     */
    protected function getConsole_Command_AppbundleCommandPopulateadminuserscommandService()
    {
        return $this->services['console.command.appbundle_command_populateadminuserscommand'] = new \AppBundle\Command\PopulateAdminUsersCommand();
    }

    /**
     * Gets the public 'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand
     */
    protected function getConsole_Command_SymfonyBundleSecuritybundleCommandUserpasswordencodercommandService()
    {
        return $this->services['console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand'] = new \Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, array(0 => 'FOS\\UserBundle\\Model\\UserInterface'));
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverruncommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverruncommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand(($this->targetDirs[3].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstartcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand(($this->targetDirs[3].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstatuscommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand();
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstopcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand();
    }

    /**
     * Gets the public 'custom_service' shared service.
     *
     * @return \FileManagerBundle\Service\CustomService
     */
    protected function getCustomServiceService()
    {
        return $this->services['custom_service'] = new \FileManagerBundle\Service\CustomService(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'data_collector.dump' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector
     */
    protected function getDataCollector_DumpService()
    {
        return $this->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, 'UTF-8', ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'data_collector.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector(${($_ = isset($this->services['data_collector.form.extractor']) ? $this->services['data_collector.form.extractor'] : $this->get('data_collector.form.extractor')) && false ?: '_'});
    }

    /**
     * Gets the public 'data_collector.form.extractor' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the public 'data_collector.request' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the public 'data_collector.router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the public 'data_collector.translation' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver
     */
    protected function getDebug_ArgumentResolverService()
    {
        return $this->services['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['argument_resolver.request_attribute']) ? $this->services['argument_resolver.request_attribute'] : $this->getArgumentResolver_RequestAttributeService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['argument_resolver.request']) ? $this->services['argument_resolver.request'] : $this->getArgumentResolver_RequestService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['argument_resolver.session']) ? $this->services['argument_resolver.session'] : $this->getArgumentResolver_SessionService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['security.user_value_resolver']) ? $this->services['security.user_value_resolver'] : $this->getSecurity_UserValueResolverService()) && false ?: '_'};
            yield 4 => ${($_ = isset($this->services['argument_resolver.service']) ? $this->services['argument_resolver.service'] : $this->getArgumentResolver_ServiceService()) && false ?: '_'};
            yield 5 => ${($_ = isset($this->services['argument_resolver.default']) ? $this->services['argument_resolver.default'] : $this->getArgumentResolver_DefaultService()) && false ?: '_'};
            yield 6 => ${($_ = isset($this->services['argument_resolver.variadic']) ? $this->services['argument_resolver.variadic'] : $this->getArgumentResolver_VariadicService()) && false ?: '_'};
        }, 7)), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.controller_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(${($_ = isset($this->services['jms_di_extra.controller_resolver']) ? $this->services['jms_di_extra.controller_resolver'] : $this->getJmsDiExtra_ControllerResolverService()) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, ${($_ = isset($this->services['monolog.logger.php']) ? $this->services['monolog.logger.php'] : $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, -1, -1, true, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'debug.dump_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener
     */
    protected function getDebug_DumpListenerService()
    {
        return $this->services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, ${($_ = isset($this->services['var_dumper.cli_dumper']) ? $this->services['var_dumper.cli_dumper'] : $this->get('var_dumper.cli_dumper')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.event']) ? $this->services['monolog.logger.event'] : $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->addListener('oneup_uploader.post_upload', array(0 => function () {
            return ${($_ = isset($this->services['VideoPlayerBundle.YourUploadListener']) ? $this->services['VideoPlayerBundle.YourUploadListener'] : $this->getVideoPlayerBundle_YourUploadListenerService()) && false ?: '_'};
        }, 1 => 'onUpload'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['easyadmin.listener.controller']) ? $this->services['easyadmin.listener.controller'] : $this->get('easyadmin.listener.controller')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('easy_admin.post_initialize', array(0 => function () {
            return ${($_ = isset($this->services['easyadmin.listener.request_post_initialize']) ? $this->services['easyadmin.listener.request_post_initialize'] : $this->get('easyadmin.listener.request_post_initialize')) && false ?: '_'};
        }, 1 => 'initializeRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['jms_i18n_routing.cookie_setting_listener']) ? $this->services['jms_i18n_routing.cookie_setting_listener'] : $this->get('jms_i18n_routing.cookie_setting_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 256);
        $instance->addListener('lexik_filter.prepare', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.filter_prepare']) ? $this->services['lexik_form_filter.filter_prepare'] : $this->get('lexik_form_filter.filter_prepare')) && false ?: '_'};
        }, 1 => 'onFilterBuilderPrepare'), 0);
        $instance->addListener('lexik_filter.apply_filters.orm', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.apply_filter.doctrine_orm']) ? $this->services['lexik_form_filter.apply_filter.doctrine_orm'] : $this->get('lexik_form_filter.apply_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'onApplyFilterCondition'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['assetic.request_listener']) ? $this->services['assetic.request_listener'] : $this->get('assetic.request_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 0);
        $instance->addListener('sonata.block.event.breadcrumb', array(0 => function () {
            return ${($_ = isset($this->services['sonata.seo.event.breadcrumb']) ? $this->services['sonata.seo.event.breadcrumb'] : $this->get('sonata.seo.event.breadcrumb')) && false ?: '_'};
        }, 1 => 'onBlock'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sonata.block.cache.handler.default']) ? $this->services['sonata.block.cache.handler.default'] : $this->get('sonata.block.cache.handler.default')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('oneup_uploader.validation', array(0 => function () {
            return ${($_ = isset($this->services['oneup_uploader.validation_listener.max_size']) ? $this->services['oneup_uploader.validation_listener.max_size'] : $this->get('oneup_uploader.validation_listener.max_size')) && false ?: '_'};
        }, 1 => 'onValidate'), 0);
        $instance->addListener('oneup_uploader.validation', array(0 => function () {
            return ${($_ = isset($this->services['oneup_uploader.validation_listener.allowed_mimetype']) ? $this->services['oneup_uploader.validation_listener.allowed_mimetype'] : $this->get('oneup_uploader.validation_listener.allowed_mimetype')) && false ?: '_'};
        }, 1 => 'onValidate'), 0);
        $instance->addListener('oneup_uploader.validation', array(0 => function () {
            return ${($_ = isset($this->services['oneup_uploader.validation_listener.disallowed_mimetype']) ? $this->services['oneup_uploader.validation_listener.disallowed_mimetype'] : $this->get('oneup_uploader.validation_listener.disallowed_mimetype')) && false ?: '_'};
        }, 1 => 'onValidate'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['newsletters.annotation.wizard.driver']) ? $this->services['newsletters.annotation.wizard.driver'] : $this->get('newsletters.annotation.wizard.driver')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('presta_sitemap.populate', array(0 => function () {
            return ${($_ = isset($this->services['AppBundle\Event\Listener\SitemapSubscriber']) ? $this->services['AppBundle\Event\Listener\SitemapSubscriber'] : $this->getAppBundle_Event_Listener_SitemapSubscriberService()) && false ?: '_'};
        }, 1 => 'populate'), 0);
        $instance->addListener('presta_sitemap.populate', array(0 => function () {
            return ${($_ = isset($this->services['app.sitemap.blog_post_subscriber']) ? $this->services['app.sitemap.blog_post_subscriber'] : $this->getApp_Sitemap_BlogPostSubscriberService()) && false ?: '_'};
        }, 1 => 'populate'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['response_listener']) ? $this->services['response_listener'] : $this->get('response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['streamed_response_listener']) ? $this->services['streamed_response_listener'] : $this->get('streamed_response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1024);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 16);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['validate_request_listener']) ? $this->services['validate_request_listener'] : $this->get('validate_request_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 256);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['resolve_controller_name_subscriber']) ? $this->services['resolve_controller_name_subscriber'] : $this->getResolveControllerNameSubscriberService()) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 24);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleError'), -128);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleTerminate'), -128);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['session_listener']) ? $this->services['session_listener'] : $this->get('session_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 128);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['session.save_listener']) ? $this->services['session.save_listener'] : $this->get('session.save_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1000);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['esi_listener']) ? $this->services['esi_listener'] : $this->get('esi_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fragment.listener']) ? $this->services['fragment.listener'] : $this->get('fragment.listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 48);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 10);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -100);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelTerminate'), -1024);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['debug.debug_handlers_listener']) ? $this->services['debug.debug_handlers_listener'] : $this->get('debug.debug_handlers_listener')) && false ?: '_'};
        }, 1 => 'configure'), 2048);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['debug.debug_handlers_listener']) ? $this->services['debug.debug_handlers_listener'] : $this->get('debug.debug_handlers_listener')) && false ?: '_'};
        }, 1 => 'configure'), 2048);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['router_listener']) ? $this->services['router_listener'] : $this->get('router_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 32);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['router_listener']) ? $this->services['router_listener'] : $this->get('router_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['security.firewall']) ? $this->services['security.firewall'] : $this->get('security.firewall')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 8);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['security.firewall']) ? $this->services['security.firewall'] : $this->get('security.firewall')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['security.rememberme.response_listener']) ? $this->services['security.rememberme.response_listener'] : $this->get('security.rememberme.response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['twig.exception_listener']) ? $this->services['twig.exception_listener'] : $this->get('twig.exception_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), -128);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onCommand'), 255);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onTerminate'), -255);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.controller.listener']) ? $this->services['sensio_framework_extra.controller.listener'] : $this->get('sensio_framework_extra.controller.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.converter.listener']) ? $this->services['sensio_framework_extra.converter.listener'] : $this->get('sensio_framework_extra.converter.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), -128);
        $instance->addListener('kernel.view', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelView'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.security.listener']) ? $this->services['sensio_framework_extra.security.listener'] : $this->get('sensio_framework_extra.security.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('fos_user.security.implicit_login', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.security.interactive_login_listener']) ? $this->services['fos_user.security.interactive_login_listener'] : $this->get('fos_user.security.interactive_login_listener')) && false ?: '_'};
        }, 1 => 'onImplicitLogin'), 0);
        $instance->addListener('security.interactive_login', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.security.interactive_login_listener']) ? $this->services['fos_user.security.interactive_login_listener'] : $this->get('fos_user.security.interactive_login_listener')) && false ?: '_'};
        }, 1 => 'onSecurityInteractiveLogin'), 0);
        $instance->addListener('fos_user.registration.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.registration.confirmed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.resetting.reset.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.change_password.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.create.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.delete.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.profile.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.registration.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.resetting.reset.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.registration.success', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.email_confirmation']) ? $this->services['fos_user.listener.email_confirmation'] : $this->get('fos_user.listener.email_confirmation')) && false ?: '_'};
        }, 1 => 'onRegistrationSuccess'), 0);
        $instance->addListener('fos_user.resetting.reset.initialize', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetInitialize'), 0);
        $instance->addListener('fos_user.resetting.reset.success', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetSuccess'), 0);
        $instance->addListener('fos_user.resetting.reset.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetRequest'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_boolean', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterBoolean'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_checkbox', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterCheckbox'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_choice', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_date', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_date_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_datetime', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateTime'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_datetime_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateTimeRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_entity', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterEntity'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_number', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterNumber'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_number_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterNumberRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_text', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterText'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.text', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterText'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.email', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.integer', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.money', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.number', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.percent', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.search', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.url', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.choice', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.entity', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterEntity'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.country', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.language', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.locale', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.timezone', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.date', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.datetime', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.birthday', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.checkbox', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.radio', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('after.file.uploaded', array(0 => function () {
            return ${($_ = isset($this->services['file.event.upload']) ? $this->services['file.event.upload'] : $this->get('file.event.upload')) && false ?: '_'};
        }, 1 => 'afterFileUploaded'), 0);
        $instance->addListener('before.file.uploaded', array(0 => function () {
            return ${($_ = isset($this->services['file.event.upload']) ? $this->services['file.event.upload'] : $this->get('file.event.upload')) && false ?: '_'};
        }, 1 => 'beforeFileUploaded'), 0);
        $instance->addListener('after.file.renamed', array(0 => function () {
            return ${($_ = isset($this->services['file.event.rename']) ? $this->services['file.event.rename'] : $this->get('file.event.rename')) && false ?: '_'};
        }, 1 => 'afterFileRenamed'), 0);
        $instance->addListener('before.file.renamed', array(0 => function () {
            return ${($_ = isset($this->services['file.event.rename']) ? $this->services['file.event.rename'] : $this->get('file.event.rename')) && false ?: '_'};
        }, 1 => 'beforeFileRenamed'), 0);
        $instance->addListener('after.file.moved', array(0 => function () {
            return ${($_ = isset($this->services['file.event.move']) ? $this->services['file.event.move'] : $this->get('file.event.move')) && false ?: '_'};
        }, 1 => 'afterFileMoved'), 0);
        $instance->addListener('before.file.moved', array(0 => function () {
            return ${($_ = isset($this->services['file.event.move']) ? $this->services['file.event.move'] : $this->get('file.event.move')) && false ?: '_'};
        }, 1 => 'beforeFileMoved'), 0);
        $instance->addListener('after.file.deleted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.deleted']) ? $this->services['file.event.deleted'] : $this->get('file.event.deleted')) && false ?: '_'};
        }, 1 => 'afterFileDeleted'), 0);
        $instance->addListener('before.file.deleted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.deleted']) ? $this->services['file.event.deleted'] : $this->get('file.event.deleted')) && false ?: '_'};
        }, 1 => 'beforeFileDeleted'), 0);
        $instance->addListener('after.file.extracted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.extract']) ? $this->services['file.event.extract'] : $this->get('file.event.extract')) && false ?: '_'};
        }, 1 => 'afterFileExtracted'), 0);
        $instance->addListener('before.file.extracted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.extract']) ? $this->services['file.event.extract'] : $this->get('file.event.extract')) && false ?: '_'};
        }, 1 => 'beforeFileExtracted'), 0);
        $instance->addListener('after.file.pasted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.pasted']) ? $this->services['file.event.pasted'] : $this->get('file.event.pasted')) && false ?: '_'};
        }, 1 => 'afterFilePasted'), 0);
        $instance->addListener('before.file.pasted', array(0 => function () {
            return ${($_ = isset($this->services['file.event.pasted']) ? $this->services['file.event.pasted'] : $this->get('file.event.pasted')) && false ?: '_'};
        }, 1 => 'beforeFilePasted'), 0);
        $instance->addListener('before.file.dir.created', array(0 => function () {
            return ${($_ = isset($this->services['file.event.directory.created']) ? $this->services['file.event.directory.created'] : $this->get('file.event.directory.created')) && false ?: '_'};
        }, 1 => 'beforeFileDirCreated'), 0);
        $instance->addListener('after.file.dir.created', array(0 => function () {
            return ${($_ = isset($this->services['file.event.directory.created']) ? $this->services['file.event.directory.created'] : $this->get('file.event.directory.created')) && false ?: '_'};
        }, 1 => 'afterFileDirCreated'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['cmf_seo.language_listener']) ? $this->services['cmf_seo.language_listener'] : $this->get('cmf_seo.language_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['debug.dump_listener']) ? $this->services['debug.dump_listener'] : $this->get('debug.dump_listener')) && false ?: '_'};
        }, 1 => 'configure'), 1024);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['web_profiler.debug_toolbar']) ? $this->services['web_profiler.debug_toolbar'] : $this->get('web_profiler.debug_toolbar')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -128);

        return $instance;
    }

    /**
     * Gets the public 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the public 'deprecated.form.registry' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_RegistryService()
    {
        @trigger_error('The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->get('form.type_guesser.validator')) && false ?: '_'}, 1 => ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->get('form.type.choice')) && false ?: '_'}, 2 => ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->get('form.type.form')) && false ?: '_'}, 3 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->get('form.type_extension.form.http_foundation')) && false ?: '_'}, 4 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->get('form.type_extension.form.validator')) && false ?: '_'}, 5 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->get('form.type_extension.repeated.validator')) && false ?: '_'}, 6 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->get('form.type_extension.submit.validator')) && false ?: '_'}, 7 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->get('form.type_extension.upload.validator')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'deprecated.form.registry.csrf' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_Registry_CsrfService()
    {
        @trigger_error('The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry.csrf'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->get('form.type_extension.csrf')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection', 'mandantA' => 'doctrine.dbal.mandantA_connection', 'mandantB' => 'doctrine.dbal.mandantB_connection'), array('default' => 'doctrine.orm.default_entity_manager', 'mandantA' => 'doctrine.orm.mandantA_entity_manager', 'mandantB' => 'doctrine.orm.mandantB_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.cache_clear_metadata_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearMetadataCommandService()
    {
        return $this->services['doctrine.cache_clear_metadata_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_query_cache_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearQueryCacheCommandService()
    {
        return $this->services['doctrine.cache_clear_query_cache_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_result_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearResultCommandService()
    {
        return $this->services['doctrine.cache_clear_result_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_collection_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand
     */
    protected function getDoctrine_CacheCollectionRegionCommandService()
    {
        return $this->services['doctrine.cache_collection_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_entity_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearEntityRegionCommandService()
    {
        return $this->services['doctrine.clear_entity_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_query_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearQueryRegionCommandService()
    {
        return $this->services['doctrine.clear_query_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseCreateCommandService()
    {
        return $this->services['doctrine.database_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseDropCommandService()
    {
        return $this->services['doctrine.database_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand
     */
    protected function getDoctrine_DatabaseImportCommandService()
    {
        return $this->services['doctrine.database_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array('media' => array('class' => 'Artgris\\Bundle\\MediaBundle\\Type\\MediaType', 'commented' => true), 'media_collection' => array('class' => 'Artgris\\Bundle\\MediaBundle\\Type\\MediaCollectionType', 'commented' => true), 'json' => array('class' => 'Sonata\\Doctrine\\Types\\JsonType', 'commented' => true), 'nostreamblob' => array('class' => 'NewslettersBundle\\DBAL\\Types\\NoStreamBlobType', 'commented' => true)));
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $b = new \Doctrine\DBAL\Logging\LoggerChain();
        $b->addLogger(${($_ = isset($this->services['doctrine.dbal.logger']) ? $this->services['doctrine.dbal.logger'] : $this->getDoctrine_Dbal_LoggerService()) && false ?: '_'});
        $b->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $c = new \Doctrine\DBAL\Configuration();
        $c->setSQLLogger($b);

        $d = new \Gedmo\Sortable\SortableListener();
        $d->setAnnotationReader($a);

        $e = new \Gedmo\Sluggable\SluggableListener();
        $e->setAnnotationReader($a);

        $f = new \Gedmo\Timestampable\TimestampableListener();
        $f->setAnnotationReader($a);

        $g = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $g->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.clean.exemple_images']) ? $this->services['vich_uploader.listener.clean.exemple_images'] : $this->getVichUploader_Listener_Clean_ExempleImagesService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['sonata.easy_extends.doctrine.mapper']) ? $this->services['sonata.easy_extends.doctrine.mapper'] : $this->get('sonata.easy_extends.doctrine.mapper')) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['sonata.media.doctrine.event_subscriber']) ? $this->services['sonata.media.doctrine.event_subscriber'] : $this->get('sonata.media.doctrine.event_subscriber')) && false ?: '_'});
        $g->addEventSubscriber($d);
        $g->addEventSubscriber($e);
        $g->addEventSubscriber($f);
        $g->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.upload.exemple_images']) ? $this->services['vich_uploader.listener.upload.exemple_images'] : $this->getVichUploader_Listener_Upload_ExempleImagesService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.remove.exemple_images']) ? $this->services['vich_uploader.listener.remove.exemple_images'] : $this->getVichUploader_Listener_Remove_ExempleImagesService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.sluggable_subscriber']) ? $this->services['knp.doctrine_behaviors.sluggable_subscriber'] : $this->getKnp_DoctrineBehaviors_SluggableSubscriberService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.loggable_subscriber']) ? $this->services['knp.doctrine_behaviors.loggable_subscriber'] : $this->getKnp_DoctrineBehaviors_LoggableSubscriberService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.translatable_subscriber']) ? $this->services['knp.doctrine_behaviors.translatable_subscriber'] : $this->getKnp_DoctrineBehaviors_TranslatableSubscriberService()) && false ?: '_'});
        $g->addEventSubscriber(${($_ = isset($this->services['fos_user.user_listener']) ? $this->services['fos_user.user_listener'] : $this->getFosUser_UserListenerService()) && false ?: '_'});
        $g->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : $this->get('doctrine.orm.default_listeners.attach_entity_listeners')) && false ?: '_'});

        return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->get('doctrine.dbal.connection_factory')) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => 3306, 'dbname' => 'easyadmin', 'user' => 'root', 'password' => 'root', 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $c, $g, array());
    }

    /**
     * Gets the public 'doctrine.dbal.mandantA_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_MandantAConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger']) ? $this->services['doctrine.dbal.logger'] : $this->getDoctrine_Dbal_LoggerService()) && false ?: '_'});
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.mandantA']) ? $this->services['doctrine.dbal.logger.profiling.mandantA'] : $this->getDoctrine_Dbal_Logger_Profiling_MandantAService()) && false ?: '_'});

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.clean.exemple_images']) ? $this->services['vich_uploader.listener.clean.exemple_images'] : $this->getVichUploader_Listener_Clean_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['sonata.easy_extends.doctrine.mapper']) ? $this->services['sonata.easy_extends.doctrine.mapper'] : $this->get('sonata.easy_extends.doctrine.mapper')) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['sonata.media.doctrine.event_subscriber']) ? $this->services['sonata.media.doctrine.event_subscriber'] : $this->get('sonata.media.doctrine.event_subscriber')) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.upload.exemple_images']) ? $this->services['vich_uploader.listener.upload.exemple_images'] : $this->getVichUploader_Listener_Upload_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.remove.exemple_images']) ? $this->services['vich_uploader.listener.remove.exemple_images'] : $this->getVichUploader_Listener_Remove_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.sluggable_subscriber']) ? $this->services['knp.doctrine_behaviors.sluggable_subscriber'] : $this->getKnp_DoctrineBehaviors_SluggableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.loggable_subscriber']) ? $this->services['knp.doctrine_behaviors.loggable_subscriber'] : $this->getKnp_DoctrineBehaviors_LoggableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.translatable_subscriber']) ? $this->services['knp.doctrine_behaviors.translatable_subscriber'] : $this->getKnp_DoctrineBehaviors_TranslatableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['fos_user.user_listener']) ? $this->services['fos_user.user_listener'] : $this->getFosUser_UserListenerService()) && false ?: '_'});
        $c->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.mandantA_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.mandantA_listeners.attach_entity_listeners'] : $this->get('doctrine.orm.mandantA_listeners.attach_entity_listeners')) && false ?: '_'});

        return $this->services['doctrine.dbal.mandantA_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->get('doctrine.dbal.connection_factory')) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => NULL, 'dbname' => 'newslettersandbox_mandanta', 'user' => 'root', 'password' => 'root', 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the public 'doctrine.dbal.mandantB_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_MandantBConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger']) ? $this->services['doctrine.dbal.logger'] : $this->getDoctrine_Dbal_LoggerService()) && false ?: '_'});
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.mandantB']) ? $this->services['doctrine.dbal.logger.profiling.mandantB'] : $this->getDoctrine_Dbal_Logger_Profiling_MandantBService()) && false ?: '_'});

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.clean.exemple_images']) ? $this->services['vich_uploader.listener.clean.exemple_images'] : $this->getVichUploader_Listener_Clean_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['sonata.easy_extends.doctrine.mapper']) ? $this->services['sonata.easy_extends.doctrine.mapper'] : $this->get('sonata.easy_extends.doctrine.mapper')) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['sonata.media.doctrine.event_subscriber']) ? $this->services['sonata.media.doctrine.event_subscriber'] : $this->get('sonata.media.doctrine.event_subscriber')) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.upload.exemple_images']) ? $this->services['vich_uploader.listener.upload.exemple_images'] : $this->getVichUploader_Listener_Upload_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['vich_uploader.listener.remove.exemple_images']) ? $this->services['vich_uploader.listener.remove.exemple_images'] : $this->getVichUploader_Listener_Remove_ExempleImagesService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.sluggable_subscriber']) ? $this->services['knp.doctrine_behaviors.sluggable_subscriber'] : $this->getKnp_DoctrineBehaviors_SluggableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.loggable_subscriber']) ? $this->services['knp.doctrine_behaviors.loggable_subscriber'] : $this->getKnp_DoctrineBehaviors_LoggableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.translatable_subscriber']) ? $this->services['knp.doctrine_behaviors.translatable_subscriber'] : $this->getKnp_DoctrineBehaviors_TranslatableSubscriberService()) && false ?: '_'});
        $c->addEventSubscriber(${($_ = isset($this->services['fos_user.user_listener']) ? $this->services['fos_user.user_listener'] : $this->getFosUser_UserListenerService()) && false ?: '_'});
        $c->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.mandantB_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.mandantB_listeners.attach_entity_listeners'] : $this->get('doctrine.orm.mandantB_listeners.attach_entity_listeners')) && false ?: '_'});

        return $this->services['doctrine.dbal.mandantB_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->get('doctrine.dbal.connection_factory')) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => NULL, 'dbname' => 'newslettersandbox_mandantb', 'user' => 'root', 'password' => 'root', 'driverOptions' => array(), 'defaultTableOptions' => array()), $b, $c, array());
    }

    /**
     * Gets the public 'doctrine.ensure_production_settings_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand
     */
    protected function getDoctrine_EnsureProductionSettingsCommandService()
    {
        return $this->services['doctrine.ensure_production_settings_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.fixtures_load_command' shared service.
     *
     * @return \Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand
     */
    protected function getDoctrine_FixturesLoadCommandService()
    {
        return $this->services['doctrine.fixtures_load_command'] = new \Doctrine\Bundle\FixturesBundle\Command\LoadDataFixturesDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.generate_entities_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand
     */
    protected function getDoctrine_GenerateEntitiesCommandService()
    {
        return $this->services['doctrine.generate_entities_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_convert_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand
     */
    protected function getDoctrine_MappingConvertCommandService()
    {
        return $this->services['doctrine.mapping_convert_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand
     */
    protected function getDoctrine_MappingImportCommandService()
    {
        return $this->services['doctrine.mapping_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_info_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand
     */
    protected function getDoctrine_MappingInfoCommandService()
    {
        return $this->services['doctrine.mapping_info_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager
     */
    protected function getDoctrine_Orm_DefaultEntityManagerService()
    {
        require_once (__DIR__.'/jms_diextra/doctrine/EntityManager_5e9e57519c1b3.php');

        return $this->services['doctrine.orm.default_entity_manager'] = new \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager.delegate']) ? $this->services['doctrine.orm.default_entity_manager.delegate'] : $this->getDoctrine_Orm_DefaultEntityManager_DelegateService()) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager.property_info_extractor' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor
     */
    protected function getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.default_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getMetadataFactory());
    }

    /**
     * Gets the public 'doctrine.orm.default_listeners.attach_entity_listeners' shared service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the public 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the public 'doctrine.orm.mandantA_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver
     */
    protected function getDoctrine_Orm_MandantAEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.mandantA_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the public 'doctrine.orm.mandantA_entity_manager' shared service.
     *
     * @return \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager
     */
    protected function getDoctrine_Orm_MandantAEntityManagerService()
    {
        require_once (__DIR__.'/jms_diextra/doctrine/EntityManager_5e9e57519c1b3.php');

        return $this->services['doctrine.orm.mandantA_entity_manager'] = new \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager(${($_ = isset($this->services['doctrine.orm.mandantA_entity_manager.delegate']) ? $this->services['doctrine.orm.mandantA_entity_manager.delegate'] : $this->getDoctrine_Orm_MandantAEntityManager_DelegateService()) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'doctrine.orm.mandantA_entity_manager.property_info_extractor' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor
     */
    protected function getDoctrine_Orm_MandantAEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.mandantA_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor(${($_ = isset($this->services['doctrine.orm.mandantA_entity_manager']) ? $this->services['doctrine.orm.mandantA_entity_manager'] : $this->get('doctrine.orm.mandantA_entity_manager')) && false ?: '_'}->getMetadataFactory());
    }

    /**
     * Gets the public 'doctrine.orm.mandantA_listeners.attach_entity_listeners' shared service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener
     */
    protected function getDoctrine_Orm_MandantAListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.mandantA_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the public 'doctrine.orm.mandantA_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_MandantAManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.mandantA_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the public 'doctrine.orm.mandantB_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver
     */
    protected function getDoctrine_Orm_MandantBEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.mandantB_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the public 'doctrine.orm.mandantB_entity_manager' shared service.
     *
     * @return \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager
     */
    protected function getDoctrine_Orm_MandantBEntityManagerService()
    {
        require_once (__DIR__.'/jms_diextra/doctrine/EntityManager_5e9e57519c1b3.php');

        return $this->services['doctrine.orm.mandantB_entity_manager'] = new \EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\__CG__\Doctrine\ORM\EntityManager(${($_ = isset($this->services['doctrine.orm.mandantB_entity_manager.delegate']) ? $this->services['doctrine.orm.mandantB_entity_manager.delegate'] : $this->getDoctrine_Orm_MandantBEntityManager_DelegateService()) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'doctrine.orm.mandantB_entity_manager.property_info_extractor' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor
     */
    protected function getDoctrine_Orm_MandantBEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.mandantB_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor(${($_ = isset($this->services['doctrine.orm.mandantB_entity_manager']) ? $this->services['doctrine.orm.mandantB_entity_manager'] : $this->get('doctrine.orm.mandantB_entity_manager')) && false ?: '_'}->getMetadataFactory());
    }

    /**
     * Gets the public 'doctrine.orm.mandantB_listeners.attach_entity_listeners' shared service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener
     */
    protected function getDoctrine_Orm_MandantBListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.mandantB_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the public 'doctrine.orm.mandantB_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_MandantBManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.mandantB_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the public 'doctrine.orm.validator.unique' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.query_dql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand
     */
    protected function getDoctrine_QueryDqlCommandService()
    {
        return $this->services['doctrine.query_dql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.query_sql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand
     */
    protected function getDoctrine_QuerySqlCommandService()
    {
        return $this->services['doctrine.query_sql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaCreateCommandService()
    {
        return $this->services['doctrine.schema_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaDropCommandService()
    {
        return $this->services['doctrine.schema_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_update_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaUpdateCommandService()
    {
        return $this->services['doctrine.schema_update_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_validate_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand
     */
    protected function getDoctrine_SchemaValidateCommandService()
    {
        return $this->services['doctrine.schema_validate_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand();
    }

    /**
     * Gets the public 'doctrine_cache.contains_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand
     */
    protected function getDoctrineCache_ContainsCommandService()
    {
        return $this->services['doctrine_cache.contains_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand();
    }

    /**
     * Gets the public 'doctrine_cache.delete_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand
     */
    protected function getDoctrineCache_DeleteCommandService()
    {
        return $this->services['doctrine_cache.delete_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand();
    }

    /**
     * Gets the public 'doctrine_cache.flush_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand
     */
    protected function getDoctrineCache_FlushCommandService()
    {
        return $this->services['doctrine_cache.flush_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand();
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_query_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_result_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantAMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantA_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantA_query_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantAQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantA_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantA_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantA_result_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantAResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantA_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantA_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantBMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantB_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantB_query_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantBQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantB_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantB_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.mandantB_result_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_MandantBResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.mandantB_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_mandantB_f513cf563c707d840c2bdf4608dfcc1b8128fc362c4125b9184728e85b37a238');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.stats_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand
     */
    protected function getDoctrineCache_StatsCommandService()
    {
        return $this->services['doctrine_cache.stats_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.diff_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand
     */
    protected function getDoctrineMigrations_DiffCommandService()
    {
        return $this->services['doctrine_migrations.diff_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.execute_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand
     */
    protected function getDoctrineMigrations_ExecuteCommandService()
    {
        return $this->services['doctrine_migrations.execute_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.generate_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand
     */
    protected function getDoctrineMigrations_GenerateCommandService()
    {
        return $this->services['doctrine_migrations.generate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.latest_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand
     */
    protected function getDoctrineMigrations_LatestCommandService()
    {
        return $this->services['doctrine_migrations.latest_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.migrate_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand
     */
    protected function getDoctrineMigrations_MigrateCommandService()
    {
        return $this->services['doctrine_migrations.migrate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.status_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand
     */
    protected function getDoctrineMigrations_StatusCommandService()
    {
        return $this->services['doctrine_migrations.status_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.version_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand
     */
    protected function getDoctrineMigrations_VersionCommandService()
    {
        return $this->services['doctrine_migrations.version_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand();
    }

    /**
     * Gets the public 'dubture_ffmpeg.ffmpeg' shared service.
     *
     * @return \FFMpeg\FFMpeg
     */
    public function getDubtureFfmpeg_FfmpegService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['dubture_ffmpeg.ffmpeg'] = FFMpegFFMpeg_00000000703f1b0200000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDubtureFfmpeg_FfmpegService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \FFMpeg\FFMpeg::create(array('ffmpeg.binaries' => 'C:/ffmpeg/bin/ffmpeg.exe', 'ffprobe.binaries' => 'C:/ffmpeg/bin/ffprobe.exe', 'timeout' => 300, 'ffmpeg.threads' => 4), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'dubture_ffmpeg.ffprobe' shared service.
     *
     * @return \FFMpeg\FFProbe
     */
    public function getDubtureFfmpeg_FfprobeService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['dubture_ffmpeg.ffprobe'] = FFMpegFFProbe_00000000703f1b9800000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDubtureFfmpeg_FfprobeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return \FFMpeg\FFProbe::create(array('ffmpeg.binaries' => 'C:/ffmpeg/bin/ffmpeg.exe', 'ffprobe.binaries' => 'C:/ffmpeg/bin/ffprobe.exe'), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.autocomplete' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Search\Autocomplete
     */
    protected function getEasyadmin_AutocompleteService()
    {
        return $this->services['easyadmin.autocomplete'] = new \EasyCorp\Bundle\EasyAdminBundle\Search\Autocomplete(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'}, new \EasyCorp\Bundle\EasyAdminBundle\Search\Finder(${($_ = isset($this->services['easyadmin.query_builder']) ? $this->services['easyadmin.query_builder'] : $this->get('easyadmin.query_builder')) && false ?: '_'}, ${($_ = isset($this->services['easyadmin.paginator']) ? $this->services['easyadmin.paginator'] : $this->get('easyadmin.paginator')) && false ?: '_'}), ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.cache.manager' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Cache\CacheManager
     */
    protected function getEasyadmin_Cache_ManagerService()
    {
        return $this->services['easyadmin.cache.manager'] = new \EasyCorp\Bundle\EasyAdminBundle\Cache\CacheManager((__DIR__.'/easy_admin'));
    }

    /**
     * Gets the public 'easyadmin.config.manager' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Configuration\ConfigManager
     */
    protected function getEasyadmin_Config_ManagerService()
    {
        $this->services['easyadmin.config.manager'] = $instance = new \EasyCorp\Bundle\EasyAdminBundle\Configuration\ConfigManager(${($_ = isset($this->services['easyadmin.cache.manager']) ? $this->services['easyadmin.cache.manager'] : $this->get('easyadmin.cache.manager')) && false ?: '_'}, ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'}, array('site_name' => 'Admin', 'formats' => array('date' => 'd/m/Y', 'datetime' => 'd/m/Y H:i:s', 'time' => 'H:i'), 'list' => array('title' => '%entity_label%', 'actions' => array(0 => array('name' => 'edit', 'icon' => 'pencil'), 1 => array('name' => 'delete', 'icon' => 'trash-o')), 'max_results' => 15), 'show' => array('title' => 'Éditer %entity_label% (#%entity_id%)', 'actions' => array(), 'max_results' => 10), 'new' => array('title' => 'Créer %entity_label%', 'actions' => array()), 'design' => array('form_theme' => array(0 => '@EasyAdmin/form/bootstrap_3_horizontal_layout.html.twig', 1 => 'VichUploaderBundle:Form:fields.html.twig', 2 => 'admin/themes/jquery.collection.html.twig'), 'assets' => array('css' => array(0 => 'admin/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css', 1 => 'admin/css/admin.css', 2 => 'bundles/artgrismedia/css/media.css', 3 => 'bundles/filemanager/libs/blueimp-file-upload/css/jquery.fileupload.css'), 'js' => array(0 => 'admin/plugins/tinymce/tinymce.min.js', 1 => 'admin/plugins/tinymce/jquery.tinymce.min.js', 2 => 'admin/plugins/jquery-ui-1.12.1/jquery-ui.js', 3 => 'admin/plugins/moment-with-locales.js', 4 => 'admin/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js', 5 => 'admin/plugins/symfony-collection-2.0.4/jquery.collection.js', 6 => 'admin/js/admin.js'), 'favicon' => array('path' => '/favicon.ico', 'mime_type' => 'image/x-icon')), 'menu' => array(0 => array('label' => 'menu.dashboard', 'route' => 'admin_dashboard', 'icon' => 'dashboard', 'default' => true), 1 => array('label' => 'menu.user', 'icon' => 'users', 'entity' => 'User', 'role' => 'ROLE_SUPER_ADMIN'), 2 => array('label' => 'GcmUser', 'icon' => 'users', 'entity' => 'GcmUser'), 3 => array('label' => 'Videos', 'icon' => 'play', 'entity' => 'Video'), 4 => array('label' => 'YouTubePlayList', 'icon' => 'list', 'entity' => 'PlayListYouTube'), 5 => array('label' => 'YouTubeInfos', 'icon' => 'youtube', 'entity' => 'YouTubeInfos'), 6 => array('label' => 'YouTubeAnalytics', 'icon' => 'youtube', 'entity' => 'YouTubeAnalytics'), 7 => array('label' => 'Newsletter', 'route' => 'newsletters_admin', 'icon' => 'square-o'), 8 => array('label' => 'DownloadFileCounter', 'icon' => 'download', 'entity' => 'DownloadFileCounter'), 9 => array('label' => 'FootballAPI', 'icon' => 'flag', 'entity' => 'FootballAPI'), 10 => array('label' => 'menu.settings', 'icon' => 'wrench', 'children' => array(0 => array('label' => 'menu.cc', 'route' => 'admin_tools_cc', 'icon' => 'eraser', 'role' => 'ROLE_SUPER_ADMIN'), 1 => array('label' => 'menu.dsv', 'route' => 'admin_tools_checkdatabase', 'icon' => 'database', 'role' => 'ROLE_SUPER_ADMIN'), 2 => array('label' => 'menu.translate', 'route' => 'jms_translation_index', 'icon' => 'flag', 'role' => 'ROLE_SUPER_ADMIN'), 3 => array('label' => 'menu.manager', 'route' => 'admin_tools_manager', 'icon' => 'upload'))), 11 => array('label' => 'Blocs', 'icon' => 'square-o', 'role' => 'ROLE_SUPER_ADMIN', 'children' => array(0 => array('label' => 'menu.bloc.text', 'entity' => 'PageBlock'))), 12 => array('label' => 'Exemple', 'entity' => 'Exemple', 'icon' => 'terminal')), 'theme' => 'default', 'color_scheme' => 'dark', 'brand_color' => '#205081'), 'entities' => array('PageBlock' => array('label' => 'Bloc de texte', 'class' => 'Arkounay\\BlockI18nBundle\\Entity\\PageBlock', 'list' => array('fields' => array(0 => 'id'), 'actions' => array(0 => array('name' => 'new', 'label' => 'Créer un bloc'))), 'edit' => array('fields' => array(0 => '-id'), 'title' => 'Editer un bloc'), 'form' => array('title' => 'Créer un bloc', 'fields' => array(0 => 'id', 1 => array('property' => 'translations', 'label' => 'Traductions', 'type' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType', 'type_options' => array('fields' => array('content' => array('label' => 'Description', 'attr' => array('class' => 'tinymce'))))))), 'name' => 'PageBlock'), 'Exemple' => array('label' => 'Entité exemple', 'class' => 'AppBundle\\Entity\\Exemple', 'list' => array('actions' => array(0 => array('name' => 'admin_move_up', 'icon' => 'arrow-up', 'label' => '', 'type' => 'route'), 1 => array('name' => 'admin_move_down', 'icon' => 'arrow-down', 'label' => '', 'type' => 'route')), 'fields' => array(0 => array('property' => 'media', 'template' => ':admin/_fields:field_media.html.twig', 'type_options' => array('conf' => 'default')), 1 => array('property' => 'mediaCollection', 'template' => ':admin/_fields:field_media_collection.html.twig', 'type_options' => array('conf' => 'default')), 2 => array('property' => 'position')), 'sort' => array(0 => 'position', 1 => 'ASC')), 'form' => array('fields' => array(0 => array('property' => 'imageFile', 'type' => 'file'), 1 => array('property' => 'media', 'type' => 'Artgris\\Bundle\\MediaBundle\\Form\\Type\\MediaType', 'type_options' => array('conf' => 'default')), 2 => array('property' => 'mediaCollection', 'type' => 'Artgris\\Bundle\\MediaBundle\\Form\\Type\\MediaCollectionType', 'type_options' => array('allow_add' => true, 'conf' => 'default')), 3 => array('property' => 'date', 'type' => 'date', 'type_options' => array('widget' => 'single_text', 'html5' => false, 'attr' => array('class' => 'datepicker'), 'format' => 'dd/MM/yyyy', 'required' => false)), 4 => array('property' => 'translations', 'label' => 'Traductions', 'type' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType', 'type_options' => array('fields' => array('title' => array('label' => 'Titre'), 'content' => array('label' => 'Contenu', 'attr' => array('class' => 'tinymce'))))))), 'show' => array('fields' => array(0 => array('property' => 'image', 'type' => 'image', 'base_path' => '/web/uploads'))), 'name' => 'Exemple'), 'DownloadFileCounter' => array('disabled_actions' => array(0 => 'edit', 1 => 'delete', 2 => 'new'), 'label' => 'DownloadFileCounter', 'class' => 'FileManagerBundle\\Entity\\DownloadFileCounter', 'list' => array('fields' => array(0 => 'filename', 1 => array('property' => 'download_counter', 'type' => 'integer'))), 'edit' => array('fields' => array(0 => 'filename', 1 => array('property' => 'download_counter', 'type' => 'integer'))), 'name' => 'DownloadFileCounter'), 'FootballAPI' => array('disabled_actions' => array(0 => 'delete'), 'label' => 'FootballAPI', 'class' => 'AppBundle\\Entity\\FootballAPI', 'list' => array('fields' => array(0 => array('property' => 'championnat_favori', 'template' => 'admin/_fields/field_role.html.twig', 'label_colors' => array('Ligue 1' => 'primary', 'BundesLiga' => 'primary', 'Liga' => 'primary', 'Premier League' => 'primary')), 1 => array('property' => 'joueur_favori', 'template' => 'admin/_fields/field_role.html.twig', 'label_colors' => array('Lionel Messi' => 'primary', 'Karim Benzema' => 'primary', 'Kylian Mbappé' => 'primary')), 2 => array('property' => 'club_favori', 'template' => 'admin/_fields/field_role.html.twig', 'label_colors' => array('Real-Madrid' => 'primary', 'Barcelone' => 'primary', 'Chelsea' => 'primary')), 3 => 'username')), 'form' => array('fields' => array(0 => array('property' => 'championnat_favori', 'type' => 'choice', 'type_options' => array('multiple' => true, 'attr' => array('data-widget' => 'select2'), 'choices' => array('Ligue 1' => 'Ligue 1', 'BundesLiga' => 'BundesLiga', 'Liga' => 'Liga', 'Premier League' => 'Premier League'))), 1 => array('property' => 'joueur_favori', 'type' => 'choice', 'type_options' => array('multiple' => true, 'attr' => array('data-widget' => 'select2'), 'choices' => array('Lionel Messi' => 'Lionel Messi', 'Karim Benzema' => 'Karim Benzema', 'Kylian Mbappé' => 'Kylian Mbappé'))), 2 => array('property' => 'club_favori', 'type' => 'choice', 'type_options' => array('multiple' => true, 'attr' => array('data-widget' => 'select2'), 'choices' => array('Real-Madrid' => 'Real-Madrid', 'Barcelone' => 'Barcelone', 'Chelsea' => 'Chelsea'))), 3 => 'username')), 'name' => 'FootballAPI'), 'GcmUser' => array('disabled_actions' => array(0 => 'delete', 1 => 'edit', 2 => 'new'), 'label' => 'GcmUser', 'class' => 'AppBundle\\Entity\\GcmUser', 'list' => array('fields' => array(0 => array('property' => 'username', 'type' => 'text'), 1 => array('property' => 'token', 'type' => 'text'), 2 => array('property' => 'enabled', 'type' => 'toggle'))), 'form' => array('fields' => array(0 => 'username', 1 => 'token', 2 => 'enabled')), 'name' => 'GcmUser'), 'Newsletter' => array('label' => 'Newsletter', 'class' => 'AppBundle\\Entity\\Newsletter\\Design', 'list' => array('fields' => array(0 => 'id', 1 => 'name', 2 => 'content')), 'edit' => array('fields' => array(0 => 'id', 1 => 'name', 2 => 'content')), 'name' => 'Newsletter'), 'User' => array('label' => 'User', 'controller' => 'AppBundle\\Controller\\Admin\\UserController', 'class' => 'AppBundle\\Entity\\User', 'list' => array('fields' => array(0 => 'username', 1 => array('property' => 'email', 'type' => 'email'), 2 => array('property' => 'enabled', 'sortable' => false), 3 => 'lastLogin', 4 => array('property' => 'roles', 'template' => 'admin/_fields/field_role.html.twig', 'label_colors' => array('ROLE_SUPER_ADMIN' => 'danger', 'ROLE_ADMIN' => 'warning', 'ROLE_USER' => 'primary')), 5 => 'fbid', 6 => 'mandant'), 'sort' => 'lastLogin'), 'form' => array('fields' => array(0 => 'username', 1 => 'email', 2 => 'enabled', 3 => array('property' => 'plainPassword', 'type' => 'text'), 4 => array('property' => 'roles', 'type' => 'choice', 'type_options' => array('multiple' => true, 'attr' => array('data-widget' => 'select2'), 'choices' => array('ROLE_USER' => 'ROLE_USER', 'ROLE_ADMIN' => 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN' => 'ROLE_SUPER_ADMIN'))), 5 => 'fbid', 6 => 'mandant')), 'edit' => array('fields' => array(0 => array('property' => 'plainPassword', 'type_options' => array('required' => false))), 'form_options' => array('validation_groups' => array(0 => 'Profile'))), 'new' => array('fields' => array(0 => array('property' => 'plainPassword', 'type_options' => array('required' => true))), 'form_options' => array('validation_groups' => array(0 => 'Registration'))), 'name' => 'User'), 'Video' => array('disabled_actions' => array(0 => 'edit', 1 => 'new', 2 => 'delete'), 'label' => 'Video', 'class' => 'VideoPlayerBundle\\Entity\\MainVideo', 'list' => array('fields' => array(0 => 'title', 1 => 'video_url', 2 => array('property' => 'thumb', 'type' => 'image'), 3 => 'description', 4 => array('property' => 'enabled', 'type' => 'toggle'))), 'form' => array('fields' => array(0 => 'title', 1 => 'video_url', 2 => array('property' => 'thumb', 'type' => 'image'), 3 => 'description', 4 => array('property' => 'enabled', 'type' => 'toggle'))), 'name' => 'Video'), 'YouTubeAnalytics' => array('disabled_actions' => array(0 => 'edit', 1 => 'new', 2 => 'delete'), 'label' => 'YouTubeAnalytics', 'class' => 'VideoPlayerBundle\\Entity\\YouTubeAnalytics', 'list' => array('actions' => array(0 => 'export'), 'fields' => array(0 => 'day', 1 => 'views', 2 => 'estimated_minutes_watched', 3 => 'average_view_duration', 4 => 'average_view_percentage', 5 => 'subscribers_gained', 6 => 'likes', 7 => 'dislikes', 8 => 'shares')), 'form' => array('fields' => array(0 => 'day', 1 => 'views', 2 => 'estimated_minutes_watched', 3 => 'average_view_duration', 4 => 'average_view_percentage', 5 => 'subscribers_gained', 6 => 'likes', 7 => 'dislikes', 8 => 'shares')), 'name' => 'YouTubeAnalytics'), 'YouTubeInfos' => array('disabled_actions' => array(0 => 'delete', 1 => 'edit', 2 => 'new'), 'label' => 'YouTubeInfos', 'class' => 'VideoPlayerBundle\\Entity\\YouTubeInfos', 'list' => array('fields' => array(0 => 'idyoutube', 1 => 'titleyoutube', 2 => 'subscribercount', 3 => 'viewcount', 4 => 'videocount', 5 => 'channeldescription', 6 => 'customurl', 7 => 'username')), 'form' => array('fields' => array(0 => 'idyoutube', 1 => 'titleyoutube', 2 => 'subscribercount', 3 => 'viewcount', 4 => 'videocount', 5 => 'channeldescription', 6 => 'customurl', 7 => 'username')), 'name' => 'YouTubeInfos'), 'PlayListYouTube' => array('disabled_actions' => array(0 => 'delete', 1 => 'edit', 2 => 'new'), 'label' => 'YouTubePlayList', 'class' => 'VideoPlayerBundle\\Entity\\PlayListYouTube', 'list' => array('fields' => array(0 => 'playlisttitle', 1 => array('property' => 'playlistthumbnails', 'type' => 'image'), 2 => array('property' => 'enabled', 'type' => 'toggle'))), 'form' => array('fields' => array(0 => 'playlisttitle', 1 => array('property' => 'playlistthumbnails', 'type' => 'image'), 2 => array('property' => 'enabled', 'type' => 'toggle'))), 'name' => 'PlayListYouTube')), 'disabled_actions' => array(), 'translation_domain' => 'messages', 'search' => array(), 'edit' => array('actions' => array())), true);

        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\NormalizerConfigPass($this));
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\DesignConfigPass($this, true, 'fr'));
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\MenuConfigPass());
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\ActionConfigPass());
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\MetadataConfigPass(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}));
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\PropertyConfigPass(${($_ = isset($this->services['form.registry']) ? $this->services['form.registry'] : $this->get('form.registry')) && false ?: '_'}));
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\ViewConfigPass());
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\TemplateConfigPass(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}));
        $instance->addConfigPass(new \EasyCorp\Bundle\EasyAdminBundle\Configuration\DefaultConfigPass());

        return $instance;
    }

    /**
     * Gets the public 'easyadmin.form.guesser.missing_doctrine_orm_type_guesser' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Guesser\MissingDoctrineOrmTypeGuesser
     */
    protected function getEasyadmin_Form_Guesser_MissingDoctrineOrmTypeGuesserService()
    {
        return $this->services['easyadmin.form.guesser.missing_doctrine_orm_type_guesser'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Guesser\MissingDoctrineOrmTypeGuesser(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.form.type' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminFormType
     */
    protected function getEasyadmin_Form_TypeService()
    {
        $a = ${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'};

        return $this->services['easyadmin.form.type'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminFormType($a, array(4 => new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\AutocompleteTypeConfigurator(), 3 => new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\CollectionTypeConfigurator(), 2 => new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\CheckboxTypeConfigurator(), 1 => new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\TypeConfigurator($a), 0 => new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\Configurator\EntityTypeConfigurator()));
    }

    /**
     * Gets the public 'easyadmin.form.type.autocomplete' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminAutocompleteType
     */
    protected function getEasyadmin_Form_Type_AutocompleteService()
    {
        return $this->services['easyadmin.form.type.autocomplete'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminAutocompleteType(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.form.type.divider' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminDividerType
     */
    protected function getEasyadmin_Form_Type_DividerService()
    {
        return $this->services['easyadmin.form.type.divider'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminDividerType();
    }

    /**
     * Gets the public 'easyadmin.form.type.extension' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Extension\EasyAdminExtension
     */
    protected function getEasyadmin_Form_Type_ExtensionService()
    {
        return $this->services['easyadmin.form.type.extension'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Extension\EasyAdminExtension(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.form.type.group' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminGroupType
     */
    protected function getEasyadmin_Form_Type_GroupService()
    {
        return $this->services['easyadmin.form.type.group'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminGroupType();
    }

    /**
     * Gets the public 'easyadmin.form.type.section' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminSectionType
     */
    protected function getEasyadmin_Form_Type_SectionService()
    {
        return $this->services['easyadmin.form.type.section'] = new \EasyCorp\Bundle\EasyAdminBundle\Form\Type\EasyAdminSectionType();
    }

    /**
     * Gets the public 'easyadmin.listener.controller' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\EventListener\ControllerListener
     */
    protected function getEasyadmin_Listener_ControllerService()
    {
        return $this->services['easyadmin.listener.controller'] = new \EasyCorp\Bundle\EasyAdminBundle\EventListener\ControllerListener(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.controller_resolver']) ? $this->services['debug.controller_resolver'] : $this->get('debug.controller_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.listener.request_post_initialize' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\EventListener\RequestPostInitializeListener
     */
    protected function getEasyadmin_Listener_RequestPostInitializeService()
    {
        return $this->services['easyadmin.listener.request_post_initialize'] = new \EasyCorp\Bundle\EasyAdminBundle\EventListener\RequestPostInitializeListener(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.paginator' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Search\Paginator
     */
    protected function getEasyadmin_PaginatorService()
    {
        return $this->services['easyadmin.paginator'] = new \EasyCorp\Bundle\EasyAdminBundle\Search\Paginator();
    }

    /**
     * Gets the public 'easyadmin.query_builder' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Search\QueryBuilder
     */
    protected function getEasyadmin_QueryBuilderService()
    {
        return $this->services['easyadmin.query_builder'] = new \EasyCorp\Bundle\EasyAdminBundle\Search\QueryBuilder(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'easyadmin.router' shared service.
     *
     * @return \EasyCorp\Bundle\EasyAdminBundle\Router\EasyAdminRouter
     */
    protected function getEasyadmin_RouterService()
    {
        $a = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevDebugProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevDebugProjectContainerUrlMatcher', 'strict_requirements' => true, 'resource_type' => 'yaml'), ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'});
        $a->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});

        return $this->services['easyadmin.router'] = new \EasyCorp\Bundle\EasyAdminBundle\Router\EasyAdminRouter(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'}, $a, ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'eko_feed.feed' shared service.
     *
     * @return \Eko\FeedBundle\Feed\Feed
     */
    protected function getEkoFeed_FeedService()
    {
        $this->services['eko_feed.feed'] = $instance = new \Eko\FeedBundle\Feed\Feed('');

        $instance->setRouter(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'eko_feed.feed.dump' shared service.
     *
     * @return \Eko\FeedBundle\Service\FeedDumpService
     */
    protected function getEkoFeed_Feed_DumpService()
    {
        $this->services['eko_feed.feed.dump'] = $instance = new \Eko\FeedBundle\Service\FeedDumpService(${($_ = isset($this->services['eko_feed.feed.manager']) ? $this->services['eko_feed.feed.manager'] : $this->get('eko_feed.feed.manager')) && false ?: '_'}, ${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, ${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'});

        $instance->setRootDir(($this->targetDirs[3].'\\app'));

        return $instance;
    }

    /**
     * Gets the public 'eko_feed.feed.manager' shared service.
     *
     * @return \Eko\FeedBundle\Feed\FeedManager
     */
    protected function getEkoFeed_Feed_ManagerService()
    {
        return $this->services['eko_feed.feed.manager'] = new \Eko\FeedBundle\Feed\FeedManager(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, array('translation_domain' => 'test  Optional, if you want to use a custom translation domain', 'feeds' => array('medias' => array('title' => 'VertinGo Production', 'description' => 'Latests Publications', 'link' => array('uri' => 'http://platform-media.herokuapp.com/flux_rss_vertin_go_prod', 'route_params' => array()), 'encoding' => 'utf-8', 'author' => 'Vertin Go')), 'hydrator' => 'eko_feed.hydrator.default'), array('rss' => ${($_ = isset($this->services['eko_feed.formatter.rss']) ? $this->services['eko_feed.formatter.rss'] : $this->get('eko_feed.formatter.rss')) && false ?: '_'}, 'atom' => ${($_ = isset($this->services['eko_feed.formatter.atom']) ? $this->services['eko_feed.formatter.atom'] : $this->get('eko_feed.formatter.atom')) && false ?: '_'}));
    }

    /**
     * Gets the public 'eko_feed.feed.reader' shared service.
     *
     * @return \Eko\FeedBundle\Feed\Reader
     */
    protected function getEkoFeed_Feed_ReaderService()
    {
        $this->services['eko_feed.feed.reader'] = $instance = new \Eko\FeedBundle\Feed\Reader();

        $instance->setHydrator(${($_ = isset($this->services['eko_feed.hydrator.default']) ? $this->services['eko_feed.hydrator.default'] : $this->get('eko_feed.hydrator.default')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'eko_feed.formatter.atom' shared service.
     *
     * @return \Eko\FeedBundle\Formatter\AtomFormatter
     */
    protected function getEkoFeed_Formatter_AtomService()
    {
        return $this->services['eko_feed.formatter.atom'] = new \Eko\FeedBundle\Formatter\AtomFormatter(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'test  Optional, if you want to use a custom translation domain');
    }

    /**
     * Gets the public 'eko_feed.formatter.rss' shared service.
     *
     * @return \Eko\FeedBundle\Formatter\RssFormatter
     */
    protected function getEkoFeed_Formatter_RssService()
    {
        return $this->services['eko_feed.formatter.rss'] = new \Eko\FeedBundle\Formatter\RssFormatter(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'test  Optional, if you want to use a custom translation domain');
    }

    /**
     * Gets the public 'eko_feed.hydrator.default' shared service.
     *
     * @return \Eko\FeedBundle\Hydrator\DefaultHydrator
     */
    protected function getEkoFeed_Hydrator_DefaultService()
    {
        return $this->services['eko_feed.hydrator.default'] = new \Eko\FeedBundle\Hydrator\DefaultHydrator();
    }

    /**
     * Gets the public 'esi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpCache\Esi
     */
    protected function getEsiService()
    {
        return $this->services['esi'] = new \Symfony\Component\HttpKernel\HttpCache\Esi();
    }

    /**
     * Gets the public 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected function getEsiListenerService()
    {
        return $this->services['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(${($_ = isset($this->services['esi']) ? $this->services['esi'] : $this->get('esi', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'file.event.deleted' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileDeleted
     */
    protected function getFile_Event_DeletedService()
    {
        return $this->services['file.event.deleted'] = new \Youwe\FileManagerBundle\EventListener\FileDeleted();
    }

    /**
     * Gets the public 'file.event.directory.created' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileDirCreated
     */
    protected function getFile_Event_Directory_CreatedService()
    {
        return $this->services['file.event.directory.created'] = new \Youwe\FileManagerBundle\EventListener\FileDirCreated();
    }

    /**
     * Gets the public 'file.event.extract' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileExtracted
     */
    protected function getFile_Event_ExtractService()
    {
        return $this->services['file.event.extract'] = new \Youwe\FileManagerBundle\EventListener\FileExtracted();
    }

    /**
     * Gets the public 'file.event.move' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileMoved
     */
    protected function getFile_Event_MoveService()
    {
        return $this->services['file.event.move'] = new \Youwe\FileManagerBundle\EventListener\FileMoved();
    }

    /**
     * Gets the public 'file.event.pasted' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FilePasted
     */
    protected function getFile_Event_PastedService()
    {
        return $this->services['file.event.pasted'] = new \Youwe\FileManagerBundle\EventListener\FilePasted();
    }

    /**
     * Gets the public 'file.event.rename' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileRenamed
     */
    protected function getFile_Event_RenameService()
    {
        return $this->services['file.event.rename'] = new \Youwe\FileManagerBundle\EventListener\FileRenamed();
    }

    /**
     * Gets the public 'file.event.upload' shared service.
     *
     * @return \Youwe\FileManagerBundle\EventListener\FileUploaded
     */
    protected function getFile_Event_UploadService()
    {
        return $this->services['file.event.upload'] = new \Youwe\FileManagerBundle\EventListener\FileUploaded();
    }

    /**
     * Gets the public 'file_locator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, ($this->targetDirs[3].'\\app/Resources'), array(0 => ($this->targetDirs[3].'\\app')));
    }

    /**
     * Gets the public 'file_type_extension' shared service.
     *
     * @return \FileManagerBundle\Twig\FileTypeExtension
     */
    protected function getFileTypeExtensionService()
    {
        return $this->services['file_type_extension'] = new \FileManagerBundle\Twig\FileTypeExtension(${($_ = isset($this->services['file_type_service']) ? $this->services['file_type_service'] : $this->get('file_type_service')) && false ?: '_'});
    }

    /**
     * Gets the public 'file_type_service' shared service.
     *
     * @return \FileManagerBundle\Service\FileTypeService
     */
    protected function getFileTypeServiceService()
    {
        return $this->services['file_type_service'] = new \FileManagerBundle\Service\FileTypeService(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});
    }

    /**
     * Gets the public 'filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the public 'form.extension' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Extension\DependencyInjectionExtension
     */
    protected function getForm_ExtensionService()
    {
        return $this->services['form.extension'] = new \Sonata\CoreBundle\Form\Extension\DependencyInjectionExtension($this, array('AppBundle\\Form\\ExempleFilterType' => 'AppBundle\\Form\\ExempleFilterType', 'Usn\\NewsletterBundle\\Form\\Type\\NewsletterType' => 'type.newsletter', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => 'form.type.form', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => 'form.type.choice', 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => 'form.type.entity', 'EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EasyAdminFormType' => 'easyadmin.form.type', 'EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EasyAdminAutocompleteType' => 'easyadmin.form.type.autocomplete', 'EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EasyAdminDividerType' => 'easyadmin.form.type.divider', 'EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EasyAdminSectionType' => 'easyadmin.form.type.section', 'EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EasyAdminGroupType' => 'easyadmin.form.type.group', 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => 'fos_user.username_form_type', 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => 'fos_user.profile.form.type', 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => 'fos_user.registration.form.type', 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => 'fos_user.change_password.form.type', 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => 'fos_user.resetting.form.type', 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType' => 'a2lix_translation_form.default.type.translations', 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFieldsType' => 'a2lix_translation_form.default.type.translationsFields', 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFormsType' => 'a2lix_translation_form.default.type.translationsForms', 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsLocalesSelectorType' => 'a2lix_translation_form.default.type.translationsLocalesSelector', 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslatedEntityType' => 'a2lix_translation_form.default.type.translatedEntity', 'Vich\\UploaderBundle\\Form\\Type\\VichFileType' => 'vich_uploader.form.type.file', 'Vich\\UploaderBundle\\Form\\Type\\VichImageType' => 'vich_uploader.form.type.image', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\TextFilterType' => 'lexik_form_filter.type.filter_text', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberFilterType' => 'lexik_form_filter.type.filter_number', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberRangeFilterType' => 'lexik_form_filter.type.filter_number_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CheckboxFilterType' => 'lexik_form_filter.type.filter_checkbox', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\BooleanFilterType' => 'lexik_form_filter.type.filter_boolean', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\ChoiceFilterType' => 'lexik_form_filter.type.filter_choice', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateFilterType' => 'lexik_form_filter.type.filter_date', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateRangeFilterType' => 'lexik_form_filter.type.filter_date_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeFilterType' => 'lexik_form_filter.type.filter_datetime', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeRangeFilterType' => 'lexik_form_filter.type.filter_datetime_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CollectionAdapterFilterType' => 'lexik_form_filter.type.filter_collection_adapter', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\SharedableFilterType' => 'lexik_form_filter.type.filter_sharedable', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\EntityFilterType' => 'lexik_form_filter.type.filter_entity', 'Sonata\\MediaBundle\\Form\\Type\\MediaType' => 'sonata.media.form.type.media', 'Symfony\\Cmf\\Bundle\\SeoBundle\\Form\\Type\\SeoMetadataType' => 'cmf_seo.form.type.seo_metadata', 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType' => 'sonata.core.form.type.array', 'Sonata\\CoreBundle\\Form\\Type\\BooleanType' => 'sonata.core.form.type.boolean', 'Sonata\\CoreBundle\\Form\\Type\\CollectionType' => 'sonata.core.form.type.collection', 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType' => 'sonata.core.form.type.translatable_choice', 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType' => 'sonata.core.form.type.date_range', 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType' => 'sonata.core.form.type.datetime_range', 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType' => 'sonata.core.form.type.date_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType' => 'sonata.core.form.type.datetime_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType' => 'sonata.core.form.type.date_range_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType' => 'sonata.core.form.type.datetime_range_picker', 'Sonata\\CoreBundle\\Form\\Type\\EqualType' => 'sonata.core.form.type.equal', 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType' => 'sonata.core.form.type.color_selector', 'Sonata\\CoreBundle\\Form\\Type\\ColorType' => 'sonata.core.form.type.color', 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType' => 'sonata.block.form.type.block', 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType' => 'sonata.block.form.type.container_template', 'Bnbc\\UploadBundle\\Form\\Type\\AjaxfileType' => 'bnbc_upload.form.type.bnbc_ajax_file'), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.upload.validator', 3 => 'form.type_extension.csrf', 4 => 'form.type_extension.form.data_collector', 5 => 'easyadmin.form.type.extension', 6 => 'lexik_form_filter.type_extension.filter_extension'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => array(0 => 'form.type_extension.repeated.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => array(0 => 'form.type_extension.submit.validator')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine', 2 => 'easyadmin.form.guesser.missing_doctrine_orm_type_guesser'), array('sonata_media_type' => 'Sonata\\MediaBundle\\Form\\Type\\MediaType', 'sonata_media_api_form_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiMediaType', 'sonata_media_api_form_doctrine_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiDoctrineMediaType', 'sonata_media_api_form_gallery' => 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryType', 'sonata_media_api_form_gallery_has_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryHasMediaType', 'form' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType', 'birthday' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\BirthdayType', 'checkbox' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType', 'choice' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType', 'collection' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType', 'country' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CountryType', 'date' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType', 'datetime' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType', 'email' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType', 'file' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType', 'hidden' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType', 'integer' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType', 'language' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LanguageType', 'locale' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LocaleType', 'money' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\MoneyType', 'number' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType', 'password' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType', 'percent' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PercentType', 'radio' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RadioType', 'repeated' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType', 'search' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SearchType', 'textarea' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType', 'text' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType', 'time' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType', 'timezone' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimezoneType', 'url' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\UrlType', 'button' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType', 'submit' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType', 'reset' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ResetType', 'currency' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CurrencyType', 'entity' => 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType', 'sonata_type_immutable_array' => 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType', 'sonata_type_boolean' => 'Sonata\\CoreBundle\\Form\\Type\\BooleanType', 'sonata_type_collection' => 'Sonata\\CoreBundle\\Form\\Type\\CollectionType', 'sonata_type_translatable_choice' => 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType', 'sonata_type_date_range' => 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType', 'sonata_type_datetime_range' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType', 'sonata_type_date_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType', 'sonata_type_datetime_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType', 'sonata_type_date_range_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType', 'sonata_type_datetime_range_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType', 'sonata_type_equal' => 'Sonata\\CoreBundle\\Form\\Type\\EqualType', 'sonata_type_color' => 'Sonata\\CoreBundle\\Form\\Type\\ColorType', 'sonata_type_color_selector' => 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType', 'sonata_block_service_choice' => 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType', 'sonata_type_container_template_choice' => 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType'), array('form' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.csrf', 3 => 'form.type_extension.form.data_collector'), 'repeated' => array(0 => 'form.type_extension.repeated.validator'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array());
    }

    /**
     * Gets the public 'form.factory' shared service.
     *
     * @return \Symfony\Component\Form\FormFactory
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory(${($_ = isset($this->services['form.registry']) ? $this->services['form.registry'] : $this->get('form.registry')) && false ?: '_'}, ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => ${($_ = isset($this->services['form.extension']) ? $this->services['form.extension'] : $this->get('form.extension')) && false ?: '_'}), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.resolved_type_factory' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.birthday' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType
     *
     * @deprecated The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_BirthdayService()
    {
        @trigger_error('The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the public 'form.type.button' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType
     *
     * @deprecated The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ButtonService()
    {
        @trigger_error('The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the public 'form.type.checkbox' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType
     *
     * @deprecated The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CheckboxService()
    {
        @trigger_error('The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the public 'form.type.choice' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'})));
    }

    /**
     * Gets the public 'form.type.collection' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType
     *
     * @deprecated The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CollectionService()
    {
        @trigger_error('The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the public 'form.type.country' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType
     *
     * @deprecated The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CountryService()
    {
        @trigger_error('The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the public 'form.type.currency' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType
     *
     * @deprecated The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CurrencyService()
    {
        @trigger_error('The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the public 'form.type.date' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType
     *
     * @deprecated The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DateService()
    {
        @trigger_error('The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the public 'form.type.datetime' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType
     *
     * @deprecated The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DatetimeService()
    {
        @trigger_error('The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the public 'form.type.email' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType
     *
     * @deprecated The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_EmailService()
    {
        @trigger_error('The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the public 'form.type.entity' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.file' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType
     *
     * @deprecated The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_FileService()
    {
        @trigger_error('The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the public 'form.type.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.hidden' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType
     *
     * @deprecated The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_HiddenService()
    {
        @trigger_error('The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the public 'form.type.integer' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType
     *
     * @deprecated The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_IntegerService()
    {
        @trigger_error('The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the public 'form.type.language' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType
     *
     * @deprecated The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LanguageService()
    {
        @trigger_error('The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the public 'form.type.locale' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType
     *
     * @deprecated The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LocaleService()
    {
        @trigger_error('The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the public 'form.type.money' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType
     *
     * @deprecated The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_MoneyService()
    {
        @trigger_error('The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the public 'form.type.number' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType
     *
     * @deprecated The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_NumberService()
    {
        @trigger_error('The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the public 'form.type.password' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType
     *
     * @deprecated The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PasswordService()
    {
        @trigger_error('The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the public 'form.type.percent' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType
     *
     * @deprecated The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PercentService()
    {
        @trigger_error('The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the public 'form.type.radio' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType
     *
     * @deprecated The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RadioService()
    {
        @trigger_error('The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the public 'form.type.range' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RangeType
     *
     * @deprecated The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RangeService()
    {
        @trigger_error('The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.range'] = new \Symfony\Component\Form\Extension\Core\Type\RangeType();
    }

    /**
     * Gets the public 'form.type.repeated' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType
     *
     * @deprecated The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RepeatedService()
    {
        @trigger_error('The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the public 'form.type.reset' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType
     *
     * @deprecated The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ResetService()
    {
        @trigger_error('The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the public 'form.type.search' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType
     *
     * @deprecated The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SearchService()
    {
        @trigger_error('The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the public 'form.type.submit' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType
     *
     * @deprecated The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SubmitService()
    {
        @trigger_error('The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the public 'form.type.text' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType
     *
     * @deprecated The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextService()
    {
        @trigger_error('The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the public 'form.type.textarea' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType
     *
     * @deprecated The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextareaService()
    {
        @trigger_error('The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the public 'form.type.time' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType
     *
     * @deprecated The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimeService()
    {
        @trigger_error('The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the public 'form.type.timezone' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType
     *
     * @deprecated The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimezoneService()
    {
        @trigger_error('The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the public 'form.type.url' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType
     *
     * @deprecated The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_UrlService()
    {
        @trigger_error('The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the public 'form.type_extension.csrf' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension(${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager')) && false ?: '_'}, true, '_token', ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'validators', ${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.form.data_collector' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.form.http_foundation' shared service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'form.type_extension.form.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.repeated.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the public 'form.type_extension.submit.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the public 'form.type_extension.upload.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension
     */
    protected function getForm_TypeExtension_Upload_ValidatorService()
    {
        return $this->services['form.type_extension.upload.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'validators');
    }

    /**
     * Gets the public 'form.type_guesser.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_guesser.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_js_routing.controller' shared service.
     *
     * @return \FOS\JsRoutingBundle\Controller\Controller
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller(${($_ = isset($this->services['fos_js_routing.serializer']) ? $this->services['fos_js_routing.serializer'] : $this->get('fos_js_routing.serializer')) && false ?: '_'}, ${($_ = isset($this->services['fos_js_routing.extractor']) ? $this->services['fos_js_routing.extractor'] : $this->get('fos_js_routing.extractor')) && false ?: '_'}, array('enabled' => false), true);
    }

    /**
     * Gets the public 'fos_js_routing.extractor' shared service.
     *
     * @return \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, array(), __DIR__, array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'AppBundle' => 'AppBundle\\AppBundle', 'RedjanYmFCMBundle' => 'FcmBundle\\RedjanYmFCMBundle', 'FileManagerBundle' => 'FileManagerBundle\\FileManagerBundle', 'VideoPlayerBundle' => 'VideoPlayerBundle\\VideoPlayerBundle', 'EasyAdminBundle' => 'EasyCorp\\Bundle\\EasyAdminBundle\\EasyAdminBundle', 'FOSUserBundle' => 'FOS\\UserBundle\\FOSUserBundle', 'DoctrineBehaviorsBundle' => 'Knp\\DoctrineBehaviors\\Bundle\\DoctrineBehaviorsBundle', 'JMSTranslationBundle' => 'JMS\\TranslationBundle\\JMSTranslationBundle', 'JMSDiExtraBundle' => 'JMS\\DiExtraBundle\\JMSDiExtraBundle', 'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle', 'JMSI18nRoutingBundle' => 'JMS\\I18nRoutingBundle\\JMSI18nRoutingBundle', 'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\VichUploaderBundle', 'ArkounayBlockI18nBundle' => 'Arkounay\\BlockI18nBundle\\ArkounayBlockI18nBundle', 'GregwarImageBundle' => 'Gregwar\\ImageBundle\\GregwarImageBundle', 'ArtgrisMediaBundle' => 'Artgris\\Bundle\\MediaBundle\\ArtgrisMediaBundle', 'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'LexikFormFilterBundle' => 'Lexik\\Bundle\\FormFilterBundle\\LexikFormFilterBundle', 'PetkoparaMultiSearchBundle' => 'Petkopara\\MultiSearchBundle\\PetkoparaMultiSearchBundle', 'PetkoparaCrudGeneratorBundle' => 'Petkopara\\CrudGeneratorBundle\\PetkoparaCrudGeneratorBundle', 'EkoFeedBundle' => 'Eko\\FeedBundle\\EkoFeedBundle', 'SocialPostBundle' => 'MartinGeorgiev\\SocialPostBundle\\SocialPostBundle', 'CmfMediaBundle' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\CmfMediaBundle', 'SonataMediaBundle' => 'Sonata\\MediaBundle\\SonataMediaBundle', 'SonataEasyExtendsBundle' => 'Sonata\\EasyExtendsBundle\\SonataEasyExtendsBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'YouweFileManagerBundle' => 'Youwe\\FileManagerBundle\\YouweFileManagerBundle', 'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'NomayaSocialBundle' => 'Nomaya\\SocialBundle\\NomayaSocialBundle', 'PrestaSitemapBundle' => 'Presta\\SitemapBundle\\PrestaSitemapBundle', 'SonataSeoBundle' => 'Sonata\\SeoBundle\\SonataSeoBundle', 'CmfSeoBundle' => 'Symfony\\Cmf\\Bundle\\SeoBundle\\CmfSeoBundle', 'CmfCoreBundle' => 'Symfony\\Cmf\\Bundle\\CoreBundle\\CmfCoreBundle', 'SonataCoreBundle' => 'Sonata\\CoreBundle\\SonataCoreBundle', 'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'BnbcUploadBundle' => 'Bnbc\\UploadBundle\\BnbcUploadBundle', 'OneupUploaderBundle' => 'Oneup\\UploaderBundle\\OneupUploaderBundle', 'DubtureFFmpegBundle' => 'Dubture\\FFmpegBundle\\DubtureFFmpegBundle', 'PhpFFmpegBundle' => 'FfmpegBundle\\PhpFFmpegBundle', 'NewsletterBundle' => 'NewsletterBundle\\NewsletterBundle', 'NewslettersBundle' => 'NewslettersBundle\\NewslettersBundle', 'StfalconTinymceBundle' => 'Stfalcon\\Bundle\\TinymceBundle\\StfalconTinymceBundle', 'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle', 'WebServerBundle' => 'Symfony\\Bundle\\WebServerBundle\\WebServerBundle', 'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle'));
    }

    /**
     * Gets the public 'fos_js_routing.serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the public 'fos_user.change_password.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ChangePasswordController
     */
    protected function getFosUser_ChangePassword_ControllerService()
    {
        $this->services['fos_user.change_password.controller'] = $instance = new \FOS\UserBundle\Controller\ChangePasswordController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.change_password.form.factory']) ? $this->services['fos_user.change_password.form.factory'] : $this->get('fos_user.change_password.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.change_password.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_ChangePassword_Form_FactoryService()
    {
        return $this->services['fos_user.change_password.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_change_password_form', 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType', array(0 => 'ChangePassword', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.change_password.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ChangePasswordFormType
     */
    protected function getFosUser_ChangePassword_Form_TypeService()
    {
        return $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('AppBundle\\Entity\\User');
    }

    /**
     * Gets the public 'fos_user.command.activate_user' shared service.
     *
     * @return \FOS\UserBundle\Command\ActivateUserCommand
     */
    protected function getFosUser_Command_ActivateUserService()
    {
        return $this->services['fos_user.command.activate_user'] = new \FOS\UserBundle\Command\ActivateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.change_password' shared service.
     *
     * @return \FOS\UserBundle\Command\ChangePasswordCommand
     */
    protected function getFosUser_Command_ChangePasswordService()
    {
        return $this->services['fos_user.command.change_password'] = new \FOS\UserBundle\Command\ChangePasswordCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.create_user' shared service.
     *
     * @return \FOS\UserBundle\Command\CreateUserCommand
     */
    protected function getFosUser_Command_CreateUserService()
    {
        return $this->services['fos_user.command.create_user'] = new \FOS\UserBundle\Command\CreateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.deactivate_user' shared service.
     *
     * @return \FOS\UserBundle\Command\DeactivateUserCommand
     */
    protected function getFosUser_Command_DeactivateUserService()
    {
        return $this->services['fos_user.command.deactivate_user'] = new \FOS\UserBundle\Command\DeactivateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.demote_user' shared service.
     *
     * @return \FOS\UserBundle\Command\DemoteUserCommand
     */
    protected function getFosUser_Command_DemoteUserService()
    {
        return $this->services['fos_user.command.demote_user'] = new \FOS\UserBundle\Command\DemoteUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.promote_user' shared service.
     *
     * @return \FOS\UserBundle\Command\PromoteUserCommand
     */
    protected function getFosUser_Command_PromoteUserService()
    {
        return $this->services['fos_user.command.promote_user'] = new \FOS\UserBundle\Command\PromoteUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.listener.authentication' shared service.
     *
     * @return \FOS\UserBundle\EventListener\AuthenticationListener
     */
    protected function getFosUser_Listener_AuthenticationService()
    {
        return $this->services['fos_user.listener.authentication'] = new \FOS\UserBundle\EventListener\AuthenticationListener(${($_ = isset($this->services['fos_user.security.login_manager']) ? $this->services['fos_user.security.login_manager'] : $this->get('fos_user.security.login_manager')) && false ?: '_'}, 'main');
    }

    /**
     * Gets the public 'fos_user.listener.email_confirmation' shared service.
     *
     * @return \FOS\UserBundle\EventListener\EmailConfirmationListener
     */
    protected function getFosUser_Listener_EmailConfirmationService()
    {
        return $this->services['fos_user.listener.email_confirmation'] = new \FOS\UserBundle\EventListener\EmailConfirmationListener(${($_ = isset($this->services['fos_user.mailer']) ? $this->services['fos_user.mailer'] : $this->get('fos_user.mailer')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.token_generator']) ? $this->services['fos_user.util.token_generator'] : $this->get('fos_user.util.token_generator')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.listener.flash' shared service.
     *
     * @return \FOS\UserBundle\EventListener\FlashListener
     */
    protected function getFosUser_Listener_FlashService()
    {
        return $this->services['fos_user.listener.flash'] = new \FOS\UserBundle\EventListener\FlashListener(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.listener.resetting' shared service.
     *
     * @return \FOS\UserBundle\EventListener\ResettingListener
     */
    protected function getFosUser_Listener_ResettingService()
    {
        return $this->services['fos_user.listener.resetting'] = new \FOS\UserBundle\EventListener\ResettingListener(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, 86400);
    }

    /**
     * Gets the public 'fos_user.mailer' shared service.
     *
     * @return \FOS\UserBundle\Mailer\TwigSwiftMailer
     */
    protected function getFosUser_MailerService()
    {
        return $this->services['fos_user.mailer'] = new \FOS\UserBundle\Mailer\TwigSwiftMailer(${($_ = isset($this->services['swiftmailer.mailer.default']) ? $this->services['swiftmailer.mailer.default'] : $this->get('swiftmailer.mailer.default')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, array('template' => array('confirmation' => '@FOSUser/Registration/email.txt.twig', 'resetting' => '@FOSUser/Resetting/email.txt.twig'), 'from_email' => array('confirmation' => array('84f33334a1-05e91d@inbox.mailtrap.io' => 'Admin Vertin Go Website'), 'resetting' => array('admin@vertin-go.com' => 'Admin'))));
    }

    /**
     * Gets the public 'fos_user.profile.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ProfileController
     */
    protected function getFosUser_Profile_ControllerService()
    {
        $this->services['fos_user.profile.controller'] = $instance = new \FOS\UserBundle\Controller\ProfileController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.profile.form.factory']) ? $this->services['fos_user.profile.form.factory'] : $this->get('fos_user.profile.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.profile.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Profile_Form_FactoryService()
    {
        return $this->services['fos_user.profile.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_profile_form', 'FOS\\UserBundle\\Form\\Type\\ProfileFormType', array(0 => 'Profile', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.profile.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ProfileFormType
     */
    protected function getFosUser_Profile_Form_TypeService()
    {
        return $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('AppBundle\\Entity\\User');
    }

    /**
     * Gets the public 'fos_user.registration.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\RegistrationController
     */
    protected function getFosUser_Registration_ControllerService()
    {
        $this->services['fos_user.registration.controller'] = $instance = new \FOS\UserBundle\Controller\RegistrationController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.registration.form.factory']) ? $this->services['fos_user.registration.form.factory'] : $this->get('fos_user.registration.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.registration.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Registration_Form_FactoryService()
    {
        return $this->services['fos_user.registration.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_registration_form', 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType', array(0 => 'Registration', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.registration.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\RegistrationFormType
     */
    protected function getFosUser_Registration_Form_TypeService()
    {
        return $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('AppBundle\\Entity\\User');
    }

    /**
     * Gets the public 'fos_user.resetting.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ResettingController
     */
    protected function getFosUser_Resetting_ControllerService()
    {
        $this->services['fos_user.resetting.controller'] = $instance = new \FOS\UserBundle\Controller\ResettingController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.resetting.form.factory']) ? $this->services['fos_user.resetting.form.factory'] : $this->get('fos_user.resetting.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.token_generator']) ? $this->services['fos_user.util.token_generator'] : $this->get('fos_user.util.token_generator')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.mailer']) ? $this->services['fos_user.mailer'] : $this->get('fos_user.mailer')) && false ?: '_'}, 7200);

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.resetting.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Resetting_Form_FactoryService()
    {
        return $this->services['fos_user.resetting.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_resetting_form', 'FOS\\UserBundle\\Form\\Type\\ResettingFormType', array(0 => 'ResetPassword', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.resetting.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ResettingFormType
     */
    protected function getFosUser_Resetting_Form_TypeService()
    {
        return $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('AppBundle\\Entity\\User');
    }

    /**
     * Gets the public 'fos_user.security.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\SecurityController
     */
    protected function getFosUser_Security_ControllerService()
    {
        $this->services['fos_user.security.controller'] = $instance = new \FOS\UserBundle\Controller\SecurityController(${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.security.interactive_login_listener' shared service.
     *
     * @return \FOS\UserBundle\EventListener\LastLoginListener
     */
    protected function getFosUser_Security_InteractiveLoginListenerService()
    {
        return $this->services['fos_user.security.interactive_login_listener'] = new \FOS\UserBundle\EventListener\LastLoginListener(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.security.login_manager' shared service.
     *
     * @return \FOS\UserBundle\Security\LoginManager
     */
    protected function getFosUser_Security_LoginManagerService()
    {
        return $this->services['fos_user.security.login_manager'] = new \FOS\UserBundle\Security\LoginManager(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'fos_user.user_manager' shared service.
     *
     * @return \FOS\UserBundle\Doctrine\UserManager
     */
    protected function getFosUser_UserManagerService()
    {
        return $this->services['fos_user.user_manager'] = new \FOS\UserBundle\Doctrine\UserManager(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->getFosUser_Util_PasswordUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getManager(NULL), 'AppBundle\\Entity\\User');
    }

    /**
     * Gets the public 'fos_user.username_form_type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\UsernameFormType
     */
    protected function getFosUser_UsernameFormTypeService()
    {
        return $this->services['fos_user.username_form_type'] = new \FOS\UserBundle\Form\Type\UsernameFormType(new \FOS\UserBundle\Form\DataTransformer\UserToUsernameTransformer(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}));
    }

    /**
     * Gets the public 'fos_user.util.email_canonicalizer' shared service.
     *
     * @return \FOS\UserBundle\Util\Canonicalizer
     */
    protected function getFosUser_Util_EmailCanonicalizerService()
    {
        return $this->services['fos_user.util.email_canonicalizer'] = new \FOS\UserBundle\Util\Canonicalizer();
    }

    /**
     * Gets the public 'fos_user.util.token_generator' shared service.
     *
     * @return \FOS\UserBundle\Util\TokenGenerator
     */
    protected function getFosUser_Util_TokenGeneratorService()
    {
        return $this->services['fos_user.util.token_generator'] = new \FOS\UserBundle\Util\TokenGenerator();
    }

    /**
     * Gets the public 'fos_user.util.user_manipulator' shared service.
     *
     * @return \FOS\UserBundle\Util\UserManipulator
     */
    protected function getFosUser_Util_UserManipulatorService()
    {
        return $this->services['fos_user.util.user_manipulator'] = new \FOS\UserBundle\Util\UserManipulator(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'fragment.handler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler
     */
    protected function getFragment_HandlerService()
    {
        return $this->services['fragment.handler'] = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler(${($_ = isset($this->services['service_locator.3368f0f4075960b08010e4ebdaedef01']) ? $this->services['service_locator.3368f0f4075960b08010e4ebdaedef01'] : $this->getServiceLocator_3368f0f4075960b08010e4ebdaedef01Service()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, '/_fragment');
    }

    /**
     * Gets the public 'fragment.renderer.esi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer
     */
    protected function getFragment_Renderer_EsiService()
    {
        $this->services['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(${($_ = isset($this->services['esi']) ? $this->services['esi'] : $this->get('esi', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.hinclude' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.inline' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['debug.controller_resolver']) ? $this->services['debug.controller_resolver'] : $this->get('debug.controller_resolver')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'image.handling' shared service.
     *
     * @return \Gregwar\ImageBundle\Services\ImageHandling
     */
    protected function getImage_HandlingService()
    {
        return $this->services['image.handling'] = new \Gregwar\ImageBundle\Services\ImageHandling('cache', NULL, 'Gregwar\\ImageBundle\\ImageHandler', $this, ${($_ = isset($this->services['assets.packages']) ? $this->services['assets.packages'] : $this->get('assets.packages')) && false ?: '_'}, ${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, true, NULL);
    }

    /**
     * Gets the public 'jms_aop.interceptor_loader' shared service.
     *
     * @return \JMS\AopBundle\Aop\InterceptorLoader
     */
    protected function getJmsAop_InterceptorLoaderService()
    {
        return $this->services['jms_aop.interceptor_loader'] = new \JMS\AopBundle\Aop\InterceptorLoader($this, array());
    }

    /**
     * Gets the public 'jms_aop.pointcut_container' shared service.
     *
     * @return \JMS\AopBundle\Aop\PointcutContainer
     */
    protected function getJmsAop_PointcutContainerService()
    {
        return $this->services['jms_aop.pointcut_container'] = new \JMS\AopBundle\Aop\PointcutContainer(array());
    }

    /**
     * Gets the public 'jms_di_extra.metadata.converter' shared service.
     *
     * @return \JMS\DiExtraBundle\Metadata\MetadataConverter
     */
    protected function getJmsDiExtra_Metadata_ConverterService()
    {
        return $this->services['jms_di_extra.metadata.converter'] = new \JMS\DiExtraBundle\Metadata\MetadataConverter();
    }

    /**
     * Gets the public 'jms_di_extra.metadata.metadata_factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getJmsDiExtra_Metadata_MetadataFactoryService()
    {
        $this->services['jms_di_extra.metadata.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_di_extra.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_diextra/metadata')));

        return $instance;
    }

    /**
     * Gets the public 'jms_di_extra.metadata_driver' shared service.
     *
     * @return \JMS\DiExtraBundle\Metadata\Driver\AnnotationDriver
     */
    protected function getJmsDiExtra_MetadataDriverService()
    {
        return $this->services['jms_di_extra.metadata_driver'] = new \JMS\DiExtraBundle\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, ${($_ = isset($this->services['jms_di_extra.service_naming_strategy']) ? $this->services['jms_di_extra.service_naming_strategy'] : $this->get('jms_di_extra.service_naming_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_di_extra.service_naming_strategy' shared service.
     *
     * @return \JMS\DiExtraBundle\Metadata\DefaultNamingStrategy
     */
    protected function getJmsDiExtra_ServiceNamingStrategyService()
    {
        return $this->services['jms_di_extra.service_naming_strategy'] = new \JMS\DiExtraBundle\Metadata\DefaultNamingStrategy();
    }

    /**
     * Gets the public 'jms_i18n_routing.cookie_setting_listener' shared service.
     *
     * @return \JMS\I18nRoutingBundle\EventListener\CookieSettingListener
     */
    protected function getJmsI18nRouting_CookieSettingListenerService()
    {
        return $this->services['jms_i18n_routing.cookie_setting_listener'] = new \JMS\I18nRoutingBundle\EventListener\CookieSettingListener('hl', 31536000, NULL, NULL, false, false);
    }

    /**
     * Gets the public 'jms_i18n_routing.loader' shared service.
     *
     * @return \JMS\I18nRoutingBundle\Router\I18nLoader
     */
    protected function getJmsI18nRouting_LoaderService()
    {
        return $this->services['jms_i18n_routing.loader'] = new \JMS\I18nRoutingBundle\Router\I18nLoader(${($_ = isset($this->services['jms_i18n_routing.route_exclusion_strategy']) ? $this->services['jms_i18n_routing.route_exclusion_strategy'] : $this->getJmsI18nRouting_RouteExclusionStrategyService()) && false ?: '_'}, new \JMS\I18nRoutingBundle\Router\DefaultPatternGenerationStrategy('prefix_except_default', ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, array(0 => 'fr', 1 => 'en'), __DIR__, 'routes', 'fr'));
    }

    /**
     * Gets the public 'jms_serializer' shared service.
     *
     * @return \JMS\Serializer\Serializer
     */
    protected function getJmsSerializerService()
    {
        $a = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);
        $a->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        $b = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher(new \Symfony\Component\DependencyInjection\ServiceLocator(array('jms_serializer.doctrine_proxy_subscriber' => function () {
            return ${($_ = isset($this->services['jms_serializer.doctrine_proxy_subscriber']) ? $this->services['jms_serializer.doctrine_proxy_subscriber'] : $this->get('jms_serializer.doctrine_proxy_subscriber')) && false ?: '_'};
        }, 'jms_serializer.stopwatch_subscriber' => function () {
            return ${($_ = isset($this->services['jms_serializer.stopwatch_subscriber']) ? $this->services['jms_serializer.stopwatch_subscriber'] : $this->get('jms_serializer.stopwatch_subscriber')) && false ?: '_'};
        })));
        $b->setListeners(array('serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerializeTypedProxy'), 1 => NULL, 2 => NULL), 2 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL)), 'serializer.post_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL))));

        $this->services['jms_serializer'] = $instance = new \JMS\Serializer\Serializer($a, ${($_ = isset($this->services['jms_serializer.handler_registry']) ? $this->services['jms_serializer.handler_registry'] : $this->get('jms_serializer.handler_registry')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $b, NULL, ${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'});

        $instance->setSerializationContextFactory(${($_ = isset($this->services['jms_serializer.serialization_context_factory']) ? $this->services['jms_serializer.serialization_context_factory'] : $this->get('jms_serializer.serialization_context_factory')) && false ?: '_'});
        $instance->setDeserializationContextFactory(${($_ = isset($this->services['jms_serializer.deserialization_context_factory']) ? $this->services['jms_serializer.deserialization_context_factory'] : $this->get('jms_serializer.deserialization_context_factory')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.accessor_strategy' shared service.
     *
     * @return \JMS\Serializer\Accessor\ExpressionAccessorStrategy
     */
    protected function getJmsSerializer_AccessorStrategyService()
    {
        return $this->services['jms_serializer.accessor_strategy'] = new \JMS\Serializer\Accessor\ExpressionAccessorStrategy(${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'}, new \JMS\Serializer\Accessor\DefaultAccessorStrategy());
    }

    /**
     * Gets the public 'jms_serializer.array_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler(false);
    }

    /**
     * Gets the public 'jms_serializer.constraint_violation_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the public 'jms_serializer.datetime_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\DateHandler
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sP', 'Europe/Berlin', true);
    }

    /**
     * Gets the public 'jms_serializer.deserialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_DeserializationContextFactoryService()
    {
        return $this->services['jms_serializer.deserialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.doctrine_proxy_subscriber' shared service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber(true, false);
    }

    /**
     * Gets the public 'jms_serializer.expression_evaluator' shared service.
     *
     * @return \JMS\Serializer\Expression\ExpressionEvaluator
     */
    protected function getJmsSerializer_ExpressionEvaluatorService()
    {
        $a = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
        $a->registerProvider(new \JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider());

        return $this->services['jms_serializer.expression_evaluator'] = new \JMS\Serializer\Expression\ExpressionEvaluator($a, array('container' => $this));
    }

    /**
     * Gets the public 'jms_serializer.form_error_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\FormErrorHandler
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \JMS\Serializer\Handler\FormErrorHandler(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, 'validators');
    }

    /**
     * Gets the public 'jms_serializer.handler_registry' shared service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \JMS\Serializer\Handler\LazyHandlerRegistry(new \Symfony\Component\DependencyInjection\ServiceLocator(array('jms_serializer.array_collection_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.array_collection_handler']) ? $this->services['jms_serializer.array_collection_handler'] : $this->get('jms_serializer.array_collection_handler')) && false ?: '_'};
        }, 'jms_serializer.constraint_violation_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.constraint_violation_handler']) ? $this->services['jms_serializer.constraint_violation_handler'] : $this->get('jms_serializer.constraint_violation_handler')) && false ?: '_'};
        }, 'jms_serializer.datetime_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.datetime_handler']) ? $this->services['jms_serializer.datetime_handler'] : $this->get('jms_serializer.datetime_handler')) && false ?: '_'};
        }, 'jms_serializer.form_error_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.form_error_handler']) ? $this->services['jms_serializer.form_error_handler'] : $this->get('jms_serializer.form_error_handler')) && false ?: '_'};
        }, 'jms_serializer.php_collection_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.php_collection_handler']) ? $this->services['jms_serializer.php_collection_handler'] : $this->get('jms_serializer.php_collection_handler')) && false ?: '_'};
        }, 'sonata.media.serializer.handler.gallery' => function () {
            return ${($_ = isset($this->services['sonata.media.serializer.handler.gallery']) ? $this->services['sonata.media.serializer.handler.gallery'] : $this->get('sonata.media.serializer.handler.gallery')) && false ?: '_'};
        }, 'sonata.media.serializer.handler.media' => function () {
            return ${($_ = isset($this->services['sonata.media.serializer.handler.media']) ? $this->services['sonata.media.serializer.handler.media'] : $this->get('sonata.media.serializer.handler.media')) && false ?: '_'};
        })), array(1 => array('sonata_media_media_id' => array('json' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId')), 'sonata_media_gallery_id' => array('json' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml'))), 2 => array('sonata_media_media_id' => array('json' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId')), 'sonata_media_gallery_id' => array('json' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromyml')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap')))));
    }

    /**
     * Gets the public 'jms_serializer.json_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.json_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.metadata_driver' shared service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = new \Metadata\Driver\FileLocator(array('Sonata\\MediaBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/config/serializer'), 'Sonata\\BlockBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/config/serializer')));

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}))), ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.naming_strategy' shared service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the public 'jms_serializer.object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, 'null');
    }

    /**
     * Gets the public 'jms_serializer.php_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the public 'jms_serializer.serialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_SerializationContextFactoryService()
    {
        return $this->services['jms_serializer.serialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.stopwatch_subscriber' shared service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.templating.helper.serializer' shared service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.twig_extension.serializer_runtime_helper' shared service.
     *
     * @return \JMS\Serializer\Twig\SerializerRuntimeHelper
     */
    protected function getJmsSerializer_TwigExtension_SerializerRuntimeHelperService()
    {
        return $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] = new \JMS\Serializer\Twig\SerializerRuntimeHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.xml_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.xml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        $this->services['jms_serializer.xml_serialization_visitor'] = $instance = new \JMS\Serializer\XmlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.yaml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_translation.config_factory' shared service.
     *
     * @return \JMS\TranslationBundle\Translation\ConfigFactory
     */
    protected function getJmsTranslation_ConfigFactoryService()
    {
        $a = new \JMS\TranslationBundle\Translation\ConfigBuilder();
        $a->setTranslationsDir(($this->targetDirs[3].'\\app/Resources/translations'));
        $a->setScanDirs(array(0 => 'C:/xampp/htdocs/symfony-easyadmin-heroku/app/../src/AppBundle/Controller', 1 => 'C:/xampp/htdocs/symfony-easyadmin-heroku/app/Resources/views'));
        $a->setIgnoredDomains(array('FOSUserBundle' => true));
        $a->setDomains(array());
        $a->setEnabledExtractors(array());
        $a->setExcludedDirs(array());
        $a->setExcludedNames(array(0 => '*TestCase.php', 1 => '*Test.php'));
        $a->setOutputFormat('yml');
        $a->setKeepOldTranslations(true);
        $a->setLoadResources(array());

        return $this->services['jms_translation.config_factory'] = new \JMS\TranslationBundle\Translation\ConfigFactory(array('app' => $a));
    }

    /**
     * Gets the public 'jms_translation.controller.api_controller' shared service.
     *
     * @return \JMS\TranslationBundle\Controller\ApiController
     */
    protected function getJmsTranslation_Controller_ApiControllerService()
    {
        return $this->services['jms_translation.controller.api_controller'] = new \JMS\TranslationBundle\Controller\ApiController(${($_ = isset($this->services['jms_translation.config_factory']) ? $this->services['jms_translation.config_factory'] : $this->get('jms_translation.config_factory')) && false ?: '_'}, ${($_ = isset($this->services['jms_translation.updater']) ? $this->services['jms_translation.updater'] : $this->get('jms_translation.updater')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_translation.controller.translate_controller' shared service.
     *
     * @return \JMS\TranslationBundle\Controller\TranslateController
     */
    protected function getJmsTranslation_Controller_TranslateControllerService()
    {
        $this->services['jms_translation.controller.translate_controller'] = $instance = new \JMS\TranslationBundle\Controller\TranslateController(${($_ = isset($this->services['jms_translation.config_factory']) ? $this->services['jms_translation.config_factory'] : $this->get('jms_translation.config_factory')) && false ?: '_'}, ${($_ = isset($this->services['jms_translation.loader_manager']) ? $this->services['jms_translation.loader_manager'] : $this->get('jms_translation.loader_manager')) && false ?: '_'});

        $instance->setSourceLanguage('en');

        return $instance;
    }

    /**
     * Gets the public 'jms_translation.file_source_factory' shared service.
     *
     * @return \JMS\TranslationBundle\Translation\FileSourceFactory
     */
    protected function getJmsTranslation_FileSourceFactoryService()
    {
        return $this->services['jms_translation.file_source_factory'] = new \JMS\TranslationBundle\Translation\FileSourceFactory(($this->targetDirs[3].'\\app'));
    }

    /**
     * Gets the public 'jms_translation.loader_manager' shared service.
     *
     * @return \JMS\TranslationBundle\Translation\LoaderManager
     */
    protected function getJmsTranslation_LoaderManagerService()
    {
        return $this->services['jms_translation.loader_manager'] = new \JMS\TranslationBundle\Translation\LoaderManager(array('php' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'}), 'yml' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'}), 'xlf' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'}), 'xliff' => new \JMS\TranslationBundle\Translation\Loader\XliffLoader(), 'po' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'}), 'mo' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'}), 'ts' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'}), 'csv' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'}), 'res' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'}), 'dat' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'}), 'ini' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'}), 'json' => new \JMS\TranslationBundle\Translation\Loader\SymfonyLoaderAdapter(${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'})));
    }

    /**
     * Gets the public 'jms_translation.twig_extension' shared service.
     *
     * @return \JMS\TranslationBundle\Twig\TranslationExtension
     */
    protected function getJmsTranslation_TwigExtensionService()
    {
        return $this->services['jms_translation.twig_extension'] = new \JMS\TranslationBundle\Twig\TranslationExtension(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'jms_translation.updater' shared service.
     *
     * @return \JMS\TranslationBundle\Translation\Updater
     */
    protected function getJmsTranslation_UpdaterService()
    {
        $a = ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'};
        $b = ${($_ = isset($this->services['jms_translation.file_source_factory']) ? $this->services['jms_translation.file_source_factory'] : $this->get('jms_translation.file_source_factory')) && false ?: '_'};
        $c = ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'};

        $d = new \Doctrine\Common\Annotations\DocParser();
        $d->setImports(array('desc' => 'JMS\\TranslationBundle\\Annotation\\Desc', 'meaning' => 'JMS\\TranslationBundle\\Annotation\\Meaning', 'ignore' => 'JMS\\TranslationBundle\\Annotation\\Ignore'));
        $d->setIgnoreNotImportedAnnotations(true);

        $e = new \JMS\TranslationBundle\Translation\Dumper\XliffDumper();
        $e->setSourceLanguage('en');
        $e->setAddDate(true);
        $e->setAddReference(true);

        $f = new \JMS\TranslationBundle\Translation\Dumper\XliffDumper();
        $f->setSourceLanguage('en');
        $f->setAddDate(true);
        $f->setAddReference(true);

        return $this->services['jms_translation.updater'] = new \JMS\TranslationBundle\Translation\Updater(${($_ = isset($this->services['jms_translation.loader_manager']) ? $this->services['jms_translation.loader_manager'] : $this->get('jms_translation.loader_manager')) && false ?: '_'}, new \JMS\TranslationBundle\Translation\ExtractorManager(new \JMS\TranslationBundle\Translation\Extractor\FileExtractor($c, $a, array(0 => new \JMS\TranslationBundle\Translation\Extractor\File\DefaultPhpFileExtractor($d, $b), 1 => new \JMS\TranslationBundle\Translation\Extractor\File\FormExtractor($d, $b), 2 => new \JMS\TranslationBundle\Translation\Extractor\File\TranslationContainerExtractor(), 3 => new \JMS\TranslationBundle\Translation\Extractor\File\TwigFileExtractor($c, $b), 4 => new \JMS\TranslationBundle\Translation\Extractor\File\ValidationExtractor(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'}), 5 => new \JMS\TranslationBundle\Translation\Extractor\File\AuthenticationMessagesExtractor($d, $b))), $a, array('jms_i18n_routing' => new \JMS\I18nRoutingBundle\Translation\RouteTranslationExtractor(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['jms_i18n_routing.route_exclusion_strategy']) ? $this->services['jms_i18n_routing.route_exclusion_strategy'] : $this->getJmsI18nRouting_RouteExclusionStrategyService()) && false ?: '_'}))), $a, new \JMS\TranslationBundle\Translation\FileWriter(array('php' => new \JMS\TranslationBundle\Translation\Dumper\PhpDumper(), 'xlf' => $e, 'po' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.po']) ? $this->services['translation.dumper.po'] : $this->get('translation.dumper.po')) && false ?: '_'}, 'po'), 'mo' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.mo']) ? $this->services['translation.dumper.mo'] : $this->get('translation.dumper.mo')) && false ?: '_'}, 'mo'), 'yml' => new \JMS\TranslationBundle\Translation\Dumper\YamlDumper(), 'ts' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.qt']) ? $this->services['translation.dumper.qt'] : $this->get('translation.dumper.qt')) && false ?: '_'}, 'ts'), 'csv' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.csv']) ? $this->services['translation.dumper.csv'] : $this->get('translation.dumper.csv')) && false ?: '_'}, 'csv'), 'ini' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.ini']) ? $this->services['translation.dumper.ini'] : $this->get('translation.dumper.ini')) && false ?: '_'}, 'ini'), 'json' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.json']) ? $this->services['translation.dumper.json'] : $this->get('translation.dumper.json')) && false ?: '_'}, 'json'), 'res' => new \JMS\TranslationBundle\Translation\Dumper\SymfonyDumperAdapter(${($_ = isset($this->services['translation.dumper.res']) ? $this->services['translation.dumper.res'] : $this->get('translation.dumper.res')) && false ?: '_'}, 'res'), 'xliff' => $f)));
    }

    /**
     * Gets the public 'kernel.class_cache.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer
     *
     * @deprecated The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.
     */
    protected function getKernel_ClassCache_CacheWarmerService()
    {
        @trigger_error('The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['kernel.class_cache.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer(array(0 => 'Symfony\\Component\\HttpFoundation\\ParameterBag', 1 => 'Symfony\\Component\\HttpFoundation\\HeaderBag', 2 => 'Symfony\\Component\\HttpFoundation\\FileBag', 3 => 'Symfony\\Component\\HttpFoundation\\ServerBag', 4 => 'Symfony\\Component\\HttpFoundation\\Request', 5 => 'Symfony\\Component\\HttpKernel\\Kernel'));
    }

    /**
     * Gets the public 'knp_menu.factory' shared service.
     *
     * @return \Knp\Menu\MenuFactory
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Integration\Symfony\RoutingExtension(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}), 0);

        return $instance;
    }

    /**
     * Gets the public 'knp_menu.matcher' shared service.
     *
     * @return \Knp\Menu\Matcher\Matcher
     */
    protected function getKnpMenu_MatcherService()
    {
        return $this->services['knp_menu.matcher'] = new \Knp\Menu\Matcher\Matcher(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['knp_menu.voter.router']) ? $this->services['knp_menu.voter.router'] : $this->get('knp_menu.voter.router')) && false ?: '_'};
        }, 1));
    }

    /**
     * Gets the public 'knp_menu.menu_provider' shared service.
     *
     * @return \Knp\Menu\Provider\ChainProvider
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['knp_menu.menu_provider.lazy']) ? $this->services['knp_menu.menu_provider.lazy'] : $this->getKnpMenu_MenuProvider_LazyService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['knp_menu.menu_provider.builder_alias']) ? $this->services['knp_menu.menu_provider.builder_alias'] : $this->getKnpMenu_MenuProvider_BuilderAliasService()) && false ?: '_'};
        }, 2));
    }

    /**
     * Gets the public 'knp_menu.renderer.list' shared service.
     *
     * @return \Knp\Menu\Renderer\ListRenderer
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer(${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'}, array(), 'UTF-8');
    }

    /**
     * Gets the public 'knp_menu.renderer.twig' shared service.
     *
     * @return \Knp\Menu\Renderer\TwigRenderer
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, '@KnpMenu/menu.html.twig', ${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'}, array());
    }

    /**
     * Gets the public 'knp_menu.renderer_provider' shared service.
     *
     * @return \Knp\Menu\Renderer\PsrProvider
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Menu\Renderer\PsrProvider(new \Symfony\Component\DependencyInjection\ServiceLocator(array('list' => function () {
            return ${($_ = isset($this->services['knp_menu.renderer.list']) ? $this->services['knp_menu.renderer.list'] : $this->get('knp_menu.renderer.list')) && false ?: '_'};
        }, 'twig' => function () {
            return ${($_ = isset($this->services['knp_menu.renderer.twig']) ? $this->services['knp_menu.renderer.twig'] : $this->get('knp_menu.renderer.twig')) && false ?: '_'};
        })), 'twig');
    }

    /**
     * Gets the public 'knp_menu.voter.router' shared service.
     *
     * @return \Knp\Menu\Matcher\Voter\RouteVoter
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Knp\Menu\Matcher\Voter\RouteVoter(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.apply_filter.doctrine_orm' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener
     */
    protected function getLexikFormFilter_ApplyFilter_DoctrineOrmService()
    {
        return $this->services['lexik_form_filter.apply_filter.doctrine_orm'] = new \Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener('and');
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.default' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\DefaultExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_DefaultService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.default'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\DefaultExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.key_values' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\ValueKeysExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_KeyValuesService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.key_values'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\ValueKeysExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.text' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\TextExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_TextService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.text'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\TextExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.filter_prepare' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener
     */
    protected function getLexikFormFilter_FilterPrepareService()
    {
        return $this->services['lexik_form_filter.filter_prepare'] = new \Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener();
    }

    /**
     * Gets the public 'lexik_form_filter.form_data_extractor' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\FormDataExtractor
     */
    protected function getLexikFormFilter_FormDataExtractorService()
    {
        $this->services['lexik_form_filter.form_data_extractor'] = $instance = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\FormDataExtractor();

        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.default']) ? $this->services['lexik_form_filter.data_extraction_method.default'] : $this->get('lexik_form_filter.data_extraction_method.default')) && false ?: '_'});
        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.text']) ? $this->services['lexik_form_filter.data_extraction_method.text'] : $this->get('lexik_form_filter.data_extraction_method.text')) && false ?: '_'});
        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.key_values']) ? $this->services['lexik_form_filter.data_extraction_method.key_values'] : $this->get('lexik_form_filter.data_extraction_method.key_values')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'lexik_form_filter.get_filter.doctrine_orm' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber
     */
    protected function getLexikFormFilter_GetFilter_DoctrineOrmService()
    {
        return $this->services['lexik_form_filter.get_filter.doctrine_orm'] = new \Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber();
    }

    /**
     * Gets the public 'lexik_form_filter.query_builder_updater' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderUpdater
     */
    protected function getLexikFormFilter_QueryBuilderUpdaterService()
    {
        return $this->services['lexik_form_filter.query_builder_updater'] = new \Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderUpdater(${($_ = isset($this->services['lexik_form_filter.form_data_extractor']) ? $this->services['lexik_form_filter.form_data_extractor'] : $this->get('lexik_form_filter.form_data_extractor')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_boolean' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\BooleanFilterType
     */
    protected function getLexikFormFilter_Type_FilterBooleanService()
    {
        return $this->services['lexik_form_filter.type.filter_boolean'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\BooleanFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_checkbox' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CheckboxFilterType
     */
    protected function getLexikFormFilter_Type_FilterCheckboxService()
    {
        return $this->services['lexik_form_filter.type.filter_checkbox'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CheckboxFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_choice' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\ChoiceFilterType
     */
    protected function getLexikFormFilter_Type_FilterChoiceService()
    {
        return $this->services['lexik_form_filter.type.filter_choice'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\ChoiceFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_collection_adapter' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CollectionAdapterFilterType
     */
    protected function getLexikFormFilter_Type_FilterCollectionAdapterService()
    {
        return $this->services['lexik_form_filter.type.filter_collection_adapter'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CollectionAdapterFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_date' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateFilterType
     */
    protected function getLexikFormFilter_Type_FilterDateService()
    {
        return $this->services['lexik_form_filter.type.filter_date'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_date_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDateRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_date_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_datetime' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDatetimeService()
    {
        return $this->services['lexik_form_filter.type.filter_datetime'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_datetime_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDatetimeRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_datetime_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_entity' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\EntityFilterType
     */
    protected function getLexikFormFilter_Type_FilterEntityService()
    {
        return $this->services['lexik_form_filter.type.filter_entity'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\EntityFilterType(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_number' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberFilterType
     */
    protected function getLexikFormFilter_Type_FilterNumberService()
    {
        return $this->services['lexik_form_filter.type.filter_number'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_number_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterNumberRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_number_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_sharedable' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\SharedableFilterType
     */
    protected function getLexikFormFilter_Type_FilterSharedableService()
    {
        return $this->services['lexik_form_filter.type.filter_sharedable'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\SharedableFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_text' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\TextFilterType
     */
    protected function getLexikFormFilter_Type_FilterTextService()
    {
        return $this->services['lexik_form_filter.type.filter_text'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\TextFilterType(1);
    }

    /**
     * Gets the public 'lexik_form_filter.type_extension.filter_extension' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\FilterTypeExtension
     */
    protected function getLexikFormFilter_TypeExtension_FilterExtensionService()
    {
        return $this->services['lexik_form_filter.type_extension.filter_extension'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\FilterTypeExtension();
    }

    /**
     * Gets the public 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'fr', ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->services['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, array());
    }

    /**
     * Gets the public 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\StreamHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        $this->services['monolog.handler.main'] = $instance = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'\\logs/dev.log'), 100, true, NULL);

        $instance->pushProcessor(new \Monolog\Processor\PsrLogMessageProcessor());

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.null_internal' shared service.
     *
     * @return \Monolog\Handler\NullHandler
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->services['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /**
     * Gets the public 'monolog.handler.server_log' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ServerLogHandler
     */
    protected function getMonolog_Handler_ServerLogService()
    {
        return $this->services['monolog.handler.server_log'] = new \Symfony\Bridge\Monolog\Handler\ServerLogHandler('127.0.0.1:9911', 100, true);
    }

    /**
     * Gets the public 'monolog.logger.assetic' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_AsseticService()
    {
        $this->services['monolog.logger.assetic'] = $instance = new \Symfony\Bridge\Monolog\Logger('assetic');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->services['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ConsoleService()
    {
        $this->services['monolog.logger.console'] = $instance = new \Symfony\Bridge\Monolog\Logger('console');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.event' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.php' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.profiler' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.security' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.templating' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.translation' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.annotation.wizard.driver' shared service.
     *
     * @return \NewslettersBundle\Annotation\Wizard\AnnotationDriver
     */
    protected function getNewsletters_Annotation_Wizard_DriverService()
    {
        return $this->services['newsletters.annotation.wizard.driver'] = new \NewslettersBundle\Annotation\Wizard\AnnotationDriver($this, ${($_ = isset($this->services['newsletters.annotation.wizard.handler']) ? $this->services['newsletters.annotation.wizard.handler'] : $this->get('newsletters.annotation.wizard.handler')) && false ?: '_'}, 'NewslettersBundlee\\Annotation\\Wizard\\Annotation');
    }

    /**
     * Gets the public 'newsletters.annotation.wizard.handler' shared service.
     *
     * @return \NewslettersBundle\Annotation\Wizard\AnnotationHandler
     */
    protected function getNewsletters_Annotation_Wizard_HandlerService()
    {
        return $this->services['newsletters.annotation.wizard.handler'] = new \NewslettersBundle\Annotation\Wizard\AnnotationHandler(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});
    }

    /**
     * Gets the public 'newsletters.block.provider.image' shared service.
     *
     * @return \NewslettersBundle\Block\Provider\ImageProvider
     */
    protected function getNewsletters_Block_Provider_ImageService()
    {
        $this->services['newsletters.block.provider.image'] = $instance = new \NewslettersBundle\Block\Provider\ImageProvider('http://platform-media.herokuapp.com', ($this->targetDirs[3].'\\app/../web/uploads/block'), '/uploads/block');

        $instance->setBlockProviderManager(${($_ = isset($this->services['newsletters.block_provider_manager']) ? $this->services['newsletters.block_provider_manager'] : $this->get('newsletters.block_provider_manager')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.block.provider.textarea' shared service.
     *
     * @return \NewslettersBundle\Block\Provider\TextAreaProvider
     */
    protected function getNewsletters_Block_Provider_TextareaService()
    {
        $this->services['newsletters.block.provider.textarea'] = $instance = new \NewslettersBundle\Block\Provider\TextAreaProvider();

        $instance->setBlockProviderManager(${($_ = isset($this->services['newsletters.block_provider_manager']) ? $this->services['newsletters.block_provider_manager'] : $this->get('newsletters.block_provider_manager')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.block.provider.textareaandimage' shared service.
     *
     * @return \NewslettersBundle\Block\Provider\TextAreaAndImageProvider
     */
    protected function getNewsletters_Block_Provider_TextareaandimageService()
    {
        $this->services['newsletters.block.provider.textareaandimage'] = $instance = new \NewslettersBundle\Block\Provider\TextAreaAndImageProvider();

        $instance->setBlockProviderManager(${($_ = isset($this->services['newsletters.block_provider_manager']) ? $this->services['newsletters.block_provider_manager'] : $this->get('newsletters.block_provider_manager')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.block_provider_manager' shared service.
     *
     * @return \NewslettersBundle\Service\BlockProviderManager
     */
    protected function getNewsletters_BlockProviderManagerService()
    {
        $this->services['newsletters.block_provider_manager'] = $instance = new \NewslettersBundle\Service\BlockProviderManager();

        $instance->addBlockProvider('newsletters.block.provider.textarea', ${($_ = isset($this->services['newsletters.block.provider.textarea']) ? $this->services['newsletters.block.provider.textarea'] : $this->get('newsletters.block.provider.textarea')) && false ?: '_'});
        $instance->addBlockProvider('newsletters.block.provider.textareaandimage', ${($_ = isset($this->services['newsletters.block.provider.textareaandimage']) ? $this->services['newsletters.block.provider.textareaandimage'] : $this->get('newsletters.block.provider.textareaandimage')) && false ?: '_'});
        $instance->addBlockProvider('newsletters.block.provider.image', ${($_ = isset($this->services['newsletters.block.provider.image']) ? $this->services['newsletters.block.provider.image'] : $this->get('newsletters.block.provider.image')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.class_manager' shared service.
     *
     * @return \NewslettersBundle\Service\ClassManager
     */
    protected function getNewsletters_ClassManagerService()
    {
        return $this->services['newsletters.class_manager'] = new \NewslettersBundle\Service\ClassManager(array('user' => 'AppBundle\\Entity\\User', 'mandant' => 'AppBundle\\Entity\\Newsletter\\Mandant', 'newsletter' => 'AppBundle\\Entity\\Newsletter\\Newsletter', 'subscriber' => 'AppBundle\\Entity\\Newsletter\\Subscriber', 'design' => 'AppBundle\\Entity\\Newsletter\\Design', 'block' => 'AppBundle\\Entity\\Newsletter\\Block', 'group' => 'AppBundle\\Entity\\Newsletter\\Group', 'readlog' => 'AppBundle\\Entity\\Newsletter\\Log\\ReadLog', 'sendlog' => 'AppBundle\\Entity\\Newsletter\\Log\\SendLog', 'sendsettings' => 'AppBundle\\Entity\\Newsletter\\SendSettings', 'mailjob' => 'AppBundle\\Entity\\Newsletter\\MailJob', 'unsubscribelog' => 'AppBundle\\Entity\\Newsletter\\Unsubscribelog'), array('newsletter' => 'NewslettersBundle\\Form\\NewsletterType', 'mandant' => 'NewslettersBundle\\Form\\MandantType', 'subscriber' => 'NewslettersBundle\\Form\\SubscriberType', 'design' => 'NewslettersBundle\\Form\\DesignType', 'testmail' => 'NewslettersBundle\\Form\\TestMailType', 'unsubscribe' => 'NewslettersBundle\\Form\\UnsubscribeType', 'sendsettings' => 'NewslettersBundle\\Form\\SendSettingsType'));
    }

    /**
     * Gets the public 'newsletters.encryption.adapter.mcrypt' shared service.
     *
     * @return \NewslettersBundle\Encryption\Adapter\McryptAdapter
     */
    protected function getNewsletters_Encryption_Adapter_McryptService()
    {
        return $this->services['newsletters.encryption.adapter.mcrypt'] = new \NewslettersBundle\Encryption\Adapter\McryptAdapter('rijndael-256', 'ecb', 2);
    }

    /**
     * Gets the public 'newsletters.mailer' shared service.
     *
     * @return \NewslettersBundle\Service\MailerService
     */
    protected function getNewsletters_MailerService()
    {
        $a = ${($_ = isset($this->services['newsletters.encryption.adapter.mcrypt']) ? $this->services['newsletters.encryption.adapter.mcrypt'] : $this->get('newsletters.encryption.adapter.mcrypt')) && false ?: '_'};

        return $this->services['newsletters.mailer'] = new \NewslettersBundle\Service\MailerService($a, $a);
    }

    /**
     * Gets the public 'newsletters.mandant_manager' shared service.
     *
     * @return \NewslettersBundle\Service\orm\MandantManager
     */
    protected function getNewsletters_MandantManagerService()
    {
        return $this->services['newsletters.mandant_manager'] = new \NewslettersBundle\Service\orm\MandantManager(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['newsletters.class_manager']) ? $this->services['newsletters.class_manager'] : $this->get('newsletters.class_manager')) && false ?: '_'}, array('default' => 'ThisTokenIsNotSoSecretChangeItdefault', 'mandantA' => 'ThisTokenIsNotSoSecretChangeItMandantA', 'mandantB' => 'ThisTokenIsNotSoSecretChangeItMandantB'));
    }

    /**
     * Gets the public 'newsletters.renderer.null' shared service.
     *
     * @return \NewslettersBundle\Renderer\NullRenderer
     */
    protected function getNewsletters_Renderer_NullService()
    {
        return $this->services['newsletters.renderer.null'] = new \NewslettersBundle\Renderer\NullRenderer();
    }

    /**
     * Gets the public 'newsletters.renderer.twig' shared service.
     *
     * @return \NewslettersBundle\Renderer\TwigRenderer
     */
    protected function getNewsletters_Renderer_TwigService()
    {
        return $this->services['newsletters.renderer.twig'] = new \NewslettersBundle\Renderer\TwigRenderer(array('autoescape' => false, 'strict_variables' => true, 'debug' => true));
    }

    /**
     * Gets the public 'newsletters.renderer_manager' shared service.
     *
     * @return \NewslettersBundle\Service\RendererManager
     */
    protected function getNewsletters_RendererManagerService()
    {
        $this->services['newsletters.renderer_manager'] = $instance = new \NewslettersBundle\Service\RendererManager(${($_ = isset($this->services['newsletters.block_provider_manager']) ? $this->services['newsletters.block_provider_manager'] : $this->get('newsletters.block_provider_manager')) && false ?: '_'});

        $instance->addRenderer('newsletters.renderer.null', ${($_ = isset($this->services['newsletters.renderer.null']) ? $this->services['newsletters.renderer.null'] : $this->get('newsletters.renderer.null')) && false ?: '_'});
        $instance->addRenderer('newsletters.renderer.twig', ${($_ = isset($this->services['newsletters.renderer.twig']) ? $this->services['newsletters.renderer.twig'] : $this->get('newsletters.renderer.twig')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'newsletters.rendererbridge' shared service.
     *
     * @return \NewslettersBundle\Renderer\Bridge\RendererBridge
     */
    protected function getNewsletters_RendererbridgeService()
    {
        $a = ${($_ = isset($this->services['newsletters.rendererbridge.gendertitlestrategy.translator']) ? $this->services['newsletters.rendererbridge.gendertitlestrategy.translator'] : $this->get('newsletters.rendererbridge.gendertitlestrategy.translator')) && false ?: '_'};

        return $this->services['newsletters.rendererbridge'] = new \NewslettersBundle\Renderer\Bridge\RendererBridge(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, $a, 'http://platform-media.herokuapp.com', $a);
    }

    /**
     * Gets the public 'newsletters.rendererbridge.gendertitlestrategy.translator' shared service.
     *
     * @return \NewslettersBundle\Renderer\GenderTitleStrategy\GenderTitleTranslatorStrategy
     */
    protected function getNewsletters_Rendererbridge_Gendertitlestrategy_TranslatorService()
    {
        return $this->services['newsletters.rendererbridge.gendertitlestrategy.translator'] = new \NewslettersBundle\Renderer\GenderTitleStrategy\GenderTitleTranslatorStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'NewslettersBundle', array('lastname' => 'getLastname', 'firstname' => 'getFirstname', 'companyname' => 'getCompanyname'));
    }

    /**
     * Gets the public 'newsletters.rendererbridge.methodshelper' shared service.
     *
     * @return \NewslettersBundle\Renderer\Bridge\BridgeMethodsHelper
     */
    protected function getNewsletters_Rendererbridge_MethodshelperService()
    {
        return $this->services['newsletters.rendererbridge.methodshelper'] = new \NewslettersBundle\Renderer\Bridge\BridgeMethodsHelper(${($_ = isset($this->services['newsletters.rendererbridge']) ? $this->services['newsletters.rendererbridge'] : $this->get('newsletters.rendererbridge')) && false ?: '_'});
    }

    /**
     * Gets the public 'newsletters.template_manager' shared service.
     *
     * @return \NewslettersBundle\Service\TemplateManager
     */
    protected function getNewsletters_TemplateManagerService()
    {
        return $this->services['newsletters.template_manager'] = new \NewslettersBundle\Service\TemplateManager('NewslettersBundle::layout.html.twig', array('index' => 'NewslettersBundle:Mandant:index.html.twig', 'edit' => 'NewslettersBundle:Mandant:edit.html.twig'), array('index' => 'NewslettersBundle:Newsletter:index.html.twig', 'list' => 'NewslettersBundle:Newsletter:list.html.twig', 'create' => 'NewslettersBundle:Newsletter:create.html.twig', 'edit' => 'NewslettersBundle:Newsletter:edit.html.twig', 'subscriber' => 'NewslettersBundle:Newsletter:subscriber.html.twig', 'settings' => 'NewslettersBundle:Newsletter:settings.html.twig', 'summary' => 'NewslettersBundle:Newsletter:summary.html.twig', 'send' => 'NewslettersBundle:Newsletter:send.html.twig', 'unsubscribe' => 'NewslettersBundle:Newsletter:unsubscribe.html.twig', 'overview' => 'NewslettersBundle:Newsletter:overview.html.twig', 'generate' => 'NewslettersBundle:Newsletter:generate.html.twig'), array('index' => 'NewslettersBundle:Design:index.html.twig', 'list' => 'NewslettersBundle:Design:list.html.twig', 'create' => 'NewslettersBundle:Design:create.html.twig', 'edit' => 'NewslettersBundle:Design:edit.html.twig', 'show' => 'NewslettersBundle:Design:show.html.twig'), array('list' => 'NewslettersBundle:Subscriber:list.html.twig'), array('show' => 'NewslettersBundle:Statistic:show.html.twig'));
    }

    /**
     * Gets the public 'nomaya.socialBarHelper' shared service.
     *
     * @return \Nomaya\SocialBundle\Helpers\SocialBarHelper
     */
    protected function getNomaya_SocialBarHelperService()
    {
        return $this->services['nomaya.socialBarHelper'] = new \Nomaya\SocialBundle\Helpers\SocialBarHelper(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'nomaya.socialLinksHelper' shared service.
     *
     * @return \Nomaya\SocialBundle\Helpers\SocialLinksHelper
     */
    protected function getNomaya_SocialLinksHelperService()
    {
        return $this->services['nomaya.socialLinksHelper'] = new \Nomaya\SocialBundle\Helpers\SocialLinksHelper(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'oneup_uploader.chunk_manager' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Chunk\ChunkManager
     */
    protected function getOneupUploader_ChunkManagerService()
    {
        return $this->services['oneup_uploader.chunk_manager'] = new \Oneup\UploaderBundle\Uploader\Chunk\ChunkManager(array('maxage' => 604800, 'storage' => array('type' => 'filesystem', 'filesystem' => NULL, 'directory' => (__DIR__.'/uploader/chunks'), 'stream_wrapper' => NULL, 'sync_buffer_size' => '100K', 'prefix' => 'chunks'), 'load_distribution' => true), ${($_ = isset($this->services['oneup_uploader.chunks_storage']) ? $this->services['oneup_uploader.chunks_storage'] : $this->get('oneup_uploader.chunks_storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'oneup_uploader.chunks_storage' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Chunk\Storage\FilesystemStorage
     */
    protected function getOneupUploader_ChunksStorageService()
    {
        return $this->services['oneup_uploader.chunks_storage'] = new \Oneup\UploaderBundle\Uploader\Chunk\Storage\FilesystemStorage((__DIR__.'/uploader/chunks'));
    }

    /**
     * Gets the public 'oneup_uploader.command.clear_chunks' shared service.
     *
     * @return \Oneup\UploaderBundle\Command\ClearChunkCommand
     */
    protected function getOneupUploader_Command_ClearChunksService()
    {
        return $this->services['oneup_uploader.command.clear_chunks'] = new \Oneup\UploaderBundle\Command\ClearChunkCommand();
    }

    /**
     * Gets the public 'oneup_uploader.command.clear_orphans' shared service.
     *
     * @return \Oneup\UploaderBundle\Command\ClearOrphansCommand
     */
    protected function getOneupUploader_Command_ClearOrphansService()
    {
        return $this->services['oneup_uploader.command.clear_orphans'] = new \Oneup\UploaderBundle\Command\ClearOrphansCommand();
    }

    /**
     * Gets the public 'oneup_uploader.controller.gallery' shared service.
     *
     * @return \Oneup\UploaderBundle\Controller\DropzoneController
     */
    protected function getOneupUploader_Controller_GalleryService()
    {
        return $this->services['oneup_uploader.controller.gallery'] = new \Oneup\UploaderBundle\Controller\DropzoneController($this, ${($_ = isset($this->services['oneup_uploader.storage.gallery']) ? $this->services['oneup_uploader.storage.gallery'] : $this->get('oneup_uploader.storage.gallery')) && false ?: '_'}, new \Oneup\UploaderBundle\Uploader\ErrorHandler\DropzoneErrorHandler(), array('frontend' => 'dropzone', 'custom_frontend' => array('name' => NULL, 'class' => NULL), 'storage' => array('service' => NULL, 'type' => 'filesystem', 'filesystem' => NULL, 'directory' => ($this->targetDirs[3].'/web/uploads/gallery'), 'stream_wrapper' => NULL, 'sync_buffer_size' => '100K'), 'route_prefix' => '', 'endpoints' => array('upload' => NULL, 'progress' => NULL, 'cancel' => NULL), 'allowed_mimetypes' => array(), 'disallowed_mimetypes' => array(), 'error_handler' => NULL, 'max_size' => 2147483647, 'use_orphanage' => false, 'enable_progress' => false, 'enable_cancelation' => false, 'namer' => 'oneup_uploader.namer.uniqid', 'root_folder' => false), 'gallery');
    }

    /**
     * Gets the public 'oneup_uploader.namer.uniqid' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Naming\UniqidNamer
     */
    protected function getOneupUploader_Namer_UniqidService()
    {
        return $this->services['oneup_uploader.namer.uniqid'] = new \Oneup\UploaderBundle\Uploader\Naming\UniqidNamer();
    }

    /**
     * Gets the public 'oneup_uploader.namer.urlsafe' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Naming\UrlSafeNamer
     */
    protected function getOneupUploader_Namer_UrlsafeService()
    {
        return $this->services['oneup_uploader.namer.urlsafe'] = new \Oneup\UploaderBundle\Uploader\Naming\UrlSafeNamer();
    }

    /**
     * Gets the public 'oneup_uploader.orphanage_manager' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Orphanage\OrphanageManager
     */
    protected function getOneupUploader_OrphanageManagerService()
    {
        return $this->services['oneup_uploader.orphanage_manager'] = new \Oneup\UploaderBundle\Uploader\Orphanage\OrphanageManager($this, array('maxage' => 604800, 'directory' => (__DIR__.'/uploader/orphanage')));
    }

    /**
     * Gets the public 'oneup_uploader.routing.loader' shared service.
     *
     * @return \Oneup\UploaderBundle\Routing\RouteLoader
     */
    protected function getOneupUploader_Routing_LoaderService()
    {
        return $this->services['oneup_uploader.routing.loader'] = new \Oneup\UploaderBundle\Routing\RouteLoader(array('gallery' => array(0 => 'oneup_uploader.controller.gallery', 1 => array('enable_progress' => false, 'enable_cancelation' => false, 'route_prefix' => '', 'endpoints' => array('upload' => NULL, 'progress' => NULL, 'cancel' => NULL)))));
    }

    /**
     * Gets the public 'oneup_uploader.storage.gallery' shared service.
     *
     * @return \Oneup\UploaderBundle\Uploader\Storage\FilesystemStorage
     */
    protected function getOneupUploader_Storage_GalleryService()
    {
        return $this->services['oneup_uploader.storage.gallery'] = new \Oneup\UploaderBundle\Uploader\Storage\FilesystemStorage(($this->targetDirs[3].'/web/uploads/gallery'));
    }

    /**
     * Gets the public 'oneup_uploader.templating.uploader_helper' shared service.
     *
     * @return \Oneup\UploaderBundle\Templating\Helper\UploaderHelper
     */
    protected function getOneupUploader_Templating_UploaderHelperService()
    {
        return $this->services['oneup_uploader.templating.uploader_helper'] = new \Oneup\UploaderBundle\Templating\Helper\UploaderHelper(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, array('gallery' => 2097152));
    }

    /**
     * Gets the public 'oneup_uploader.twig.extension.uploader' shared service.
     *
     * @return \Oneup\UploaderBundle\Twig\Extension\UploaderExtension
     */
    protected function getOneupUploader_Twig_Extension_UploaderService()
    {
        return $this->services['oneup_uploader.twig.extension.uploader'] = new \Oneup\UploaderBundle\Twig\Extension\UploaderExtension(${($_ = isset($this->services['oneup_uploader.templating.uploader_helper']) ? $this->services['oneup_uploader.templating.uploader_helper'] : $this->get('oneup_uploader.templating.uploader_helper')) && false ?: '_'});
    }

    /**
     * Gets the public 'oneup_uploader.validation_listener.allowed_mimetype' shared service.
     *
     * @return \Oneup\UploaderBundle\EventListener\AllowedMimetypeAndExtensionValidationListener
     */
    protected function getOneupUploader_ValidationListener_AllowedMimetypeService()
    {
        return $this->services['oneup_uploader.validation_listener.allowed_mimetype'] = new \Oneup\UploaderBundle\EventListener\AllowedMimetypeAndExtensionValidationListener();
    }

    /**
     * Gets the public 'oneup_uploader.validation_listener.disallowed_mimetype' shared service.
     *
     * @return \Oneup\UploaderBundle\EventListener\DisallowedMimetypeValidationListener
     */
    protected function getOneupUploader_ValidationListener_DisallowedMimetypeService()
    {
        return $this->services['oneup_uploader.validation_listener.disallowed_mimetype'] = new \Oneup\UploaderBundle\EventListener\DisallowedMimetypeValidationListener();
    }

    /**
     * Gets the public 'oneup_uploader.validation_listener.max_size' shared service.
     *
     * @return \Oneup\UploaderBundle\EventListener\MaxSizeValidationListener
     */
    protected function getOneupUploader_ValidationListener_MaxSizeService()
    {
        return $this->services['oneup_uploader.validation_listener.max_size'] = new \Oneup\UploaderBundle\EventListener\MaxSizeValidationListener();
    }

    /**
     * Gets the public 'order_extension' shared service.
     *
     * @return \FileManagerBundle\Twig\OrderExtension
     */
    protected function getOrderExtensionService()
    {
        return $this->services['order_extension'] = new \FileManagerBundle\Twig\OrderExtension(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});
    }

    /**
     * Gets the public 'petkopara_multi_search.builder' shared service.
     *
     * @return \Petkopara\MultiSearchBundle\Service\MultiSearchBuilderService
     */
    protected function getPetkoparaMultiSearch_BuilderService()
    {
        return $this->services['petkopara_multi_search.builder'] = new \Petkopara\MultiSearchBundle\Service\MultiSearchBuilderService();
    }

    /**
     * Gets the public 'php_ffmpeg.ffmpeg' shared service.
     *
     * @return \FFMpeg\FFMpeg
     */
    public function getPhpFfmpeg_FfmpegService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['php_ffmpeg.ffmpeg'] = FFMpegFFMpeg_00000000703f1a1d00000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getPhpFfmpeg_FfmpegService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \FFMpeg\FFMpeg(array('ffmpeg.binaries' => 'C:/ffmpeg/bin/ffmpeg.exe', 'ffprobe.binaries' => 'C:/ffmpeg/bin/ffprobe.exe', 'timeout' => 300, 'ffmpeg.threads' => 4), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'php_ffmpeg.ffprobe' shared service.
     *
     * @return \FFMpeg\FFProbe
     */
    public function getPhpFfmpeg_FfprobeService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['php_ffmpeg.ffprobe'] = FFMpegFFProbe_00000000703f1a0700000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getPhpFfmpeg_FfprobeService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \FFMpeg\FFProbe(array('ffmpeg.binaries' => 'C:/ffmpeg/bin/ffmpeg.exe', 'ffprobe.binaries' => 'C:/ffmpeg/bin/ffprobe.exe'), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
    }

    /**
     * Gets the public 'presta_sitemap.dump_command' shared service.
     *
     * @return \Presta\SitemapBundle\Command\DumpSitemapsCommand
     */
    protected function getPrestaSitemap_DumpCommandService()
    {
        return $this->services['presta_sitemap.dump_command'] = new \Presta\SitemapBundle\Command\DumpSitemapsCommand();
    }

    /**
     * Gets the public 'presta_sitemap.dumper_default' shared service.
     *
     * @return \Presta\SitemapBundle\Service\Dumper
     */
    protected function getPrestaSitemap_DumperDefaultService()
    {
        $this->services['presta_sitemap.dumper_default'] = $instance = new \Presta\SitemapBundle\Service\Dumper(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, 'sitemap', 50000);

        $instance->setDefaults(array('priority' => 1, 'changefreq' => 'daily', 'lastmod' => 'now'));

        return $instance;
    }

    /**
     * Gets the public 'presta_sitemap.generator_default' shared service.
     *
     * @return \Presta\SitemapBundle\Service\Generator
     */
    protected function getPrestaSitemap_GeneratorDefaultService()
    {
        $this->services['presta_sitemap.generator_default'] = $instance = new \Presta\SitemapBundle\Service\Generator(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, NULL, 3600, 50000);

        $instance->setDefaults(array('priority' => 1, 'changefreq' => 'daily', 'lastmod' => 'now'));

        return $instance;
    }

    /**
     * Gets the public 'profiler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler
     */
    protected function getProfilerService()
    {
        $a = ${($_ = isset($this->services['monolog.logger.profiler']) ? $this->services['monolog.logger.profiler'] : $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        $c = new \Symfony\Component\Cache\DataCollector\CacheDataCollector();
        $c->addInstance('cache.app', ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'});
        $c->addInstance('cache.system', ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'});
        $c->addInstance('cache.validator', ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'});
        $c->addInstance('cache.serializer', new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.serializer.recorder_inner']) ? $this->services['cache.serializer.recorder_inner'] : $this->getCache_Serializer_RecorderInnerService()) && false ?: '_'}));
        $c->addInstance('cache.annotations', ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'});

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
        $d->addLogger('default', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});
        $d->addLogger('mandantA', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.mandantA']) ? $this->services['doctrine.dbal.logger.profiling.mandantA'] : $this->getDoctrine_Dbal_Logger_Profiling_MandantAService()) && false ?: '_'});
        $d->addLogger('mandantB', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.mandantB']) ? $this->services['doctrine.dbal.logger.profiling.mandantB'] : $this->getDoctrine_Dbal_Logger_Profiling_MandantBService()) && false ?: '_'});

        $e = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $e->setKernel($b);
        }

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler')), $a);

        $instance->add(${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
        $instance->add(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a, (__DIR__.'/appDevDebugProjectContainer')));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'});
        $instance->add($c);
        $instance->add(${($_ = isset($this->services['data_collector.translation']) ? $this->services['data_collector.translation'] : $this->get('data_collector.translation')) && false ?: '_'});
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'}, ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}));
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}));
        $instance->add($d);
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add(${($_ = isset($this->services['data_collector.dump']) ? $this->services['data_collector.dump'] : $this->get('data_collector.dump')) && false ?: '_'});
        $instance->add(new \EasyCorp\Bundle\EasyAdminBundle\DataCollector\EasyAdminDataCollector(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'}));
        $instance->add(new \Sonata\BlockBundle\Profiler\DataCollector\BlockDataCollector(${($_ = isset($this->services['sonata.block.templating.helper']) ? $this->services['sonata.block.templating.helper'] : $this->get('sonata.block.templating.helper')) && false ?: '_'}, array(0 => 'sonata.block.service.container', 1 => 'sonata.page.block.container', 2 => 'sonata.dashboard.block.container', 3 => 'cmf.block.container', 4 => 'cmf.block.slideshow')));
        $instance->add($e);

        return $instance;
    }

    /**
     * Gets the public 'profiler_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL, false, false);
    }

    /**
     * Gets the public 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false, new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
    }

    /**
     * Gets the public 'redjan_ym_fcm.client' shared service.
     *
     * @return \FcmBundle\FCMClient
     */
    protected function getRedjanYmFcm_ClientService()
    {
        return $this->services['redjan_ym_fcm.client'] = new \FcmBundle\FCMClient(${($_ = isset($this->services['sngrl.firebase_php_notification']) ? $this->services['sngrl.firebase_php_notification'] : $this->get('sngrl.firebase_php_notification')) && false ?: '_'});
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \JMS\I18nRoutingBundle\Router\I18nRouter
     */
    protected function getRouterService()
    {
        $this->services['router'] = $instance = new \JMS\I18nRoutingBundle\Router\I18nRouter($this, (__DIR__.'/assetic/routing.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevDebugProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevDebugProjectContainerUrlMatcher', 'strict_requirements' => true, 'resource_type' => 'yaml'), ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'});

        $instance->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});
        $instance->setLocaleResolver(new \JMS\I18nRoutingBundle\Router\DefaultLocaleResolver('hl'));
        $instance->setI18nLoaderId('jms_i18n_routing.loader');
        $instance->setDefaultLocale('fr');
        $instance->setRedirectToHost(true);

        return $instance;
    }

    /**
     * Gets the public 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    protected function getRouting_LoaderService()
    {
        $a = ${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'};
        $b = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $c = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($b);

        $d = new \Symfony\Component\Config\Loader\LoaderResolver();
        $d->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($a));
        $d->addLoader(new \Symfony\Component\Config\Loader\GlobFileLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($a));
        $d->addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
        $d->addLoader($c);
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($a, $c));
        $d->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($a, $c));
        $d->addLoader(new \Symfony\Bundle\AsseticBundle\Routing\AsseticLoader(${($_ = isset($this->services['assetic.asset_manager']) ? $this->services['assetic.asset_manager'] : $this->get('assetic.asset_manager')) && false ?: '_'}, array()));
        $d->addLoader(${($_ = isset($this->services['oneup_uploader.routing.loader']) ? $this->services['oneup_uploader.routing.loader'] : $this->get('oneup_uploader.routing.loader')) && false ?: '_'});

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, $d);
    }

    /**
     * Gets the public 'security.authentication.guard_handler' shared service.
     *
     * @return \Symfony\Component\Security\Guard\GuardAuthenticatorHandler
     */
    protected function getSecurity_Authentication_GuardHandlerService()
    {
        return $this->services['security.authentication.guard_handler'] = new \Symfony\Component\Security\Guard\GuardAuthenticatorHandler(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'security.authentication_utils' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, false);
    }

    /**
     * Gets the public 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), ${($_ = isset($this->services['security.csrf.token_storage']) ? $this->services['security.csrf.token_storage'] : $this->getSecurity_Csrf_TokenStorageService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'security.encoder_factory' shared service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('FOS\\UserBundle\\Model\\UserInterface' => array('algorithm' => 'sha512', 'hash_algorithm' => 'sha512', 'key_length' => 40, 'ignore_case' => false, 'encode_as_base64' => true, 'iterations' => 5000, 'cost' => 13)));
    }

    /**
     * Gets the public 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener(${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'security.firewall.map.context.dev' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL, new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('dev', 'security.user_checker', 'security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d', false, '', '', '', '', '', '', array()));
    }

    /**
     * Gets the public 'security.firewall.map.context.main' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $c = ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $d = ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'};
        $e = ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $f = ${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'};
        $g = ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'};

        $h = new \Symfony\Component\HttpFoundation\RequestMatcher('^/login$');

        $i = new \Symfony\Component\HttpFoundation\RequestMatcher('^/register');

        $j = new \Symfony\Component\HttpFoundation\RequestMatcher('^/resetting');

        $k = new \Symfony\Component\HttpFoundation\RequestMatcher('^/gallery/filemanager');

        $l = new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/');

        $m = new \Symfony\Component\HttpFoundation\RequestMatcher('^/newsletter/');

        $n = new \Symfony\Component\Security\Http\AccessMap();
        $n->add($h, array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $n->add($i, array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $n->add($j, array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $n->add($k, array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $n->add($l, array(0 => 'ROLE_ADMIN'), NULL);
        $n->add($m, array(0 => 'ROLE_ADMIN'), NULL);

        $o = new \Symfony\Component\Security\Http\HttpUtils($e, $e, '{^https?://%s$}i');

        $p = new \Symfony\Component\Security\Http\Firewall\LogoutListener($b, $o, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($o, '/'), array('csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => '/logout'));
        $p->addHandler(new \Symfony\Component\Security\Http\Logout\CsrfTokenClearingLogoutHandler(${($_ = isset($this->services['security.csrf.token_storage']) ? $this->services['security.csrf.token_storage'] : $this->getSecurity_Csrf_TokenStorageService()) && false ?: '_'}));
        $p->addHandler(new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler());

        $q = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($o, array());
        $q->setOptions(array('always_use_default_target_path' => false, 'default_target_path' => '/', 'login_path' => '/login', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $q->setProviderKey('main');

        $r = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($f, $o, array(), $a);
        $r->setOptions(array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => new \Symfony\Component\Security\Http\Firewall\ChannelListener($n, new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), $a), 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($b, array(0 => ${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}), 'main', $a, $c, $d), 2 => $p, 3 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($b, $g, ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'}, $o, 'main', $q, $r, array('check_path' => '/login_check', 'use_forward' => false, 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true), $a, $c, ${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager')) && false ?: '_'}), 4 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($b, '5e9e57513a9c61.59950973', $a, $g), 5 => new \Symfony\Component\Security\Http\Firewall\AccessListener($b, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, $n, $g)), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($b, $d, $o, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($f, $o, '/login', false), NULL, NULL, $a, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('main', 'security.user_checker', 'security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db', true, false, 'fos_user.user_provider.username', 'main', 'security.authentication.form_entry_point.main', NULL, NULL, array(0 => 'logout', 1 => 'form_login', 2 => 'anonymous')));
    }

    /**
     * Gets the public 'security.password_encoder' shared service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'security.rememberme.response_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the public 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the public 'security.validator.user_password' shared service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_distribution.security_checker' shared service.
     *
     * @return \SensioLabs\Security\SecurityChecker
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the public 'sensio_distribution.security_checker.command' shared service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand(${($_ = isset($this->services['sensio_distribution.security_checker']) ? $this->services['sensio_distribution.security_checker'] : $this->get('sensio_distribution.security_checker')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.cache.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the public 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.datetime' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.doctrine.orm' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener(${($_ = isset($this->services['sensio_framework_extra.converter.manager']) ? $this->services['sensio_framework_extra.converter.manager'] : $this->get('sensio_framework_extra.converter.manager')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.manager' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.doctrine.orm']) ? $this->services['sensio_framework_extra.converter.doctrine.orm'] : $this->get('sensio_framework_extra.converter.doctrine.orm')) && false ?: '_'}, 0, 'doctrine.orm');
        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.datetime']) ? $this->services['sensio_framework_extra.converter.datetime'] : $this->get('sensio_framework_extra.converter.datetime')) && false ?: '_'}, 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the public 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.view.guesser' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the public 'session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session(${($_ = isset($this->services['session.storage.native']) ? $this->services['session.storage.native'] : $this->get('session.storage.native')) && false ?: '_'}, new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the public 'session.handler' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler
     */
    protected function getSession_HandlerService()
    {
        return $this->services['session.handler'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler(($this->targetDirs[3].'\\app/../var/sessions/dev'));
    }

    /**
     * Gets the public 'session.save_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the public 'session.storage.filesystem' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.native' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('cookie_httponly' => true, 'gc_probability' => 1), ${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.php_bridge' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\ServiceLocator(array('session' => function () {
            return ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        })));
    }

    /**
     * Gets the public 'sngrl.firebase_php_notification' shared service.
     *
     * @return \sngrl\PhpFirebaseCloudMessaging\Client
     */
    protected function getSngrl_FirebasePhpNotificationService()
    {
        $this->services['sngrl.firebase_php_notification'] = $instance = new \sngrl\PhpFirebaseCloudMessaging\Client();

        $instance->setApiKey('AIzaSyDz99I-m4VDKvM3P9l8wo5QieBxzwlu1hQ');

        return $instance;
    }

    /**
     * Gets the public 'social_post' shared service.
     *
     * @return \MartinGeorgiev\SocialPost\SocialNetwork\AllInOne
     */
    protected function getSocialPostService()
    {
        return $this->services['social_post'] = new \MartinGeorgiev\SocialPost\SocialNetwork\AllInOne(new \MartinGeorgiev\SocialPost\SocialNetwork\Facebook\SDK5(new \Facebook\Facebook(array('app_id' => '2132676947050059', 'app_secret' => 'a6c887c7b89e3f286c958079618d0e9e', 'default_access_token' => 'YOUR-FACEBOOK-NON-EXPIRING-PAGE-ACCESS-TOKEN', 'page_id' => 'vertingo', 'enable_beta_mode' => true, 'default_graph_version' => 'v2.8', 'persistent_data_handler' => 'memory', 'pseudo_random_string_generator' => 'openssl', 'http_client_handler' => 'curl')), 'vertingo'), new \MartinGeorgiev\SocialPost\SocialNetwork\LinkedIn\HappyrLinkedInApiClient(new \Happyr\LinkedIn\LinkedIn('YOUR-LINKEDIN-APP-CLIENT-ID', 'YOUR-LINKEDIN-APP-CLIENT-SECRET'), 'YOUR-LINKEDIN-60-DAYS-LONG-USER-ACCESS-TOKEN', 'YOUR-LINKEDIN-COMPANY-PAGE-ID'), new \MartinGeorgiev\SocialPost\SocialNetwork\Twitter\TwitterOAuth07(new \Abraham\TwitterOAuth\TwitterOAuth('YOUR-TWITTER-APP-CONSUMER-KEY', 'YOUR-TWITTER-APP-CONSUMER-SECRET', 'YOUR-TWITTER-ACCESS-TOKEN', 'YOUR-TWITTER-ACCESS-TOKEN-SECRET')));
    }

    /**
     * Gets the public 'sonata.block.cache.handler.default' shared service.
     *
     * @return \Sonata\BlockBundle\Cache\HttpCacheHandler
     */
    protected function getSonata_Block_Cache_Handler_DefaultService()
    {
        return $this->services['sonata.block.cache.handler.default'] = new \Sonata\BlockBundle\Cache\HttpCacheHandler();
    }

    /**
     * Gets the public 'sonata.block.cache.handler.noop' shared service.
     *
     * @return \Sonata\BlockBundle\Cache\NoopHttpCacheHandler
     */
    protected function getSonata_Block_Cache_Handler_NoopService()
    {
        return $this->services['sonata.block.cache.handler.noop'] = new \Sonata\BlockBundle\Cache\NoopHttpCacheHandler();
    }

    /**
     * Gets the public 'sonata.block.context_manager.default' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockContextManager
     */
    protected function getSonata_Block_ContextManager_DefaultService()
    {
        return $this->services['sonata.block.context_manager.default'] = new \Sonata\BlockBundle\Block\BlockContextManager(${($_ = isset($this->services['sonata.block.loader.chain']) ? $this->services['sonata.block.loader.chain'] : $this->get('sonata.block.loader.chain')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, array('by_type' => array('sonata.admin.block.admin_list' => 'sonata.cache.noop', 'sonata.block.service.text' => 'sonata.cache.noop', 'sonata.block.service.rss' => 'sonata.cache.noop')), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.exception.filter.debug_only' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter
     */
    protected function getSonata_Block_Exception_Filter_DebugOnlyService()
    {
        return $this->services['sonata.block.exception.filter.debug_only'] = new \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter(true);
    }

    /**
     * Gets the public 'sonata.block.exception.filter.ignore_block_exception' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter
     */
    protected function getSonata_Block_Exception_Filter_IgnoreBlockExceptionService()
    {
        return $this->services['sonata.block.exception.filter.ignore_block_exception'] = new \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter('Sonata\\BlockBundle\\Exception\\BlockExceptionInterface');
    }

    /**
     * Gets the public 'sonata.block.exception.filter.keep_all' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepAllFilter
     */
    protected function getSonata_Block_Exception_Filter_KeepAllService()
    {
        return $this->services['sonata.block.exception.filter.keep_all'] = new \Sonata\BlockBundle\Exception\Filter\KeepAllFilter();
    }

    /**
     * Gets the public 'sonata.block.exception.filter.keep_none' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter
     */
    protected function getSonata_Block_Exception_Filter_KeepNoneService()
    {
        return $this->services['sonata.block.exception.filter.keep_none'] = new \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter();
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.inline' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineRenderer
     */
    protected function getSonata_Block_Exception_Renderer_InlineService()
    {
        return $this->services['sonata.block.exception.renderer.inline'] = new \Sonata\BlockBundle\Exception\Renderer\InlineRenderer(${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, '@SonataBlock/Block/block_exception.html.twig');
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.inline_debug' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer
     */
    protected function getSonata_Block_Exception_Renderer_InlineDebugService()
    {
        return $this->services['sonata.block.exception.renderer.inline_debug'] = new \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer(${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, '@SonataBlock/Block/block_exception_debug.html.twig', true, true);
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.throw' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer
     */
    protected function getSonata_Block_Exception_Renderer_ThrowService()
    {
        return $this->services['sonata.block.exception.renderer.throw'] = new \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer();
    }

    /**
     * Gets the public 'sonata.block.exception.strategy.manager' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Strategy\StrategyManager
     */
    protected function getSonata_Block_Exception_Strategy_ManagerService()
    {
        $this->services['sonata.block.exception.strategy.manager'] = $instance = new \Sonata\BlockBundle\Exception\Strategy\StrategyManager($this, array('debug_only' => 'sonata.block.exception.filter.debug_only', 'ignore_block_exception' => 'sonata.block.exception.filter.ignore_block_exception', 'keep_all' => 'sonata.block.exception.filter.keep_all', 'keep_none' => 'sonata.block.exception.filter.keep_none'), array('inline' => 'sonata.block.exception.renderer.inline', 'inline_debug' => 'sonata.block.exception.renderer.inline_debug', 'throw' => 'sonata.block.exception.renderer.throw'), array(), array());

        $instance->setDefaultFilter('debug_only');
        $instance->setDefaultRenderer('throw');

        return $instance;
    }

    /**
     * Gets the public 'sonata.block.form.type.block' shared service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ServiceListType
     */
    protected function getSonata_Block_Form_Type_BlockService()
    {
        return $this->services['sonata.block.form.type.block'] = new \Sonata\BlockBundle\Form\Type\ServiceListType(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.form.type.container_template' shared service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ContainerTemplateType
     */
    protected function getSonata_Block_Form_Type_ContainerTemplateService()
    {
        return $this->services['sonata.block.form.type.container_template'] = new \Sonata\BlockBundle\Form\Type\ContainerTemplateType(array('@SonataBlock/Block/block_container.html.twig' => 'SonataBlockBundle default template', '@SonataSeo/Block/block_social_container.html.twig' => 'SonataSeoBundle (to contain social buttons)'));
    }

    /**
     * Gets the public 'sonata.block.loader.chain' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockLoaderChain
     */
    protected function getSonata_Block_Loader_ChainService()
    {
        return $this->services['sonata.block.loader.chain'] = new \Sonata\BlockBundle\Block\BlockLoaderChain(array(0 => ${($_ = isset($this->services['sonata.block.loader.service']) ? $this->services['sonata.block.loader.service'] : $this->get('sonata.block.loader.service')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sonata.block.loader.service' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Loader\ServiceLoader
     */
    protected function getSonata_Block_Loader_ServiceService()
    {
        return $this->services['sonata.block.loader.service'] = new \Sonata\BlockBundle\Block\Loader\ServiceLoader(array(0 => 'sonata.admin.block.admin_list', 1 => 'sonata.block.service.text', 2 => 'sonata.block.service.rss'));
    }

    /**
     * Gets the public 'sonata.block.manager' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockServiceManager
     */
    protected function getSonata_Block_ManagerService()
    {
        $this->services['sonata.block.manager'] = $instance = new \Sonata\BlockBundle\Block\BlockServiceManager($this, true, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->add('sonata.media.block.media', 'sonata.media.block.media', array());
        $instance->add('sonata.media.block.feature_media', 'sonata.media.block.feature_media', array());
        $instance->add('sonata.media.block.gallery', 'sonata.media.block.gallery', array());
        $instance->add('sonata.media.block.gallery_list', 'sonata.media.block.gallery_list', array());
        $instance->add('sonata.media.block.breadcrumb_view', 'sonata.media.block.breadcrumb_view', array());
        $instance->add('sonata.media.block.breadcrumb_index', 'sonata.media.block.breadcrumb_index', array());
        $instance->add('sonata.media.block.breadcrumb_view_media', 'sonata.media.block.breadcrumb_view_media', array());
        $instance->add('sonata.seo.block.email.share_button', 'sonata.seo.block.email.share_button', array());
        $instance->add('sonata.seo.block.facebook.like_box', 'sonata.seo.block.facebook.like_box', array());
        $instance->add('sonata.seo.block.facebook.like_button', 'sonata.seo.block.facebook.like_button', array());
        $instance->add('sonata.seo.block.facebook.send_button', 'sonata.seo.block.facebook.send_button', array());
        $instance->add('sonata.seo.block.facebook.share_button', 'sonata.seo.block.facebook.share_button', array());
        $instance->add('sonata.seo.block.twitter.share_button', 'sonata.seo.block.twitter.share_button', array());
        $instance->add('sonata.seo.block.twitter.follow_button', 'sonata.seo.block.twitter.follow_button', array());
        $instance->add('sonata.seo.block.twitter.hashtag_button', 'sonata.seo.block.twitter.hashtag_button', array());
        $instance->add('sonata.seo.block.twitter.mention_button', 'sonata.seo.block.twitter.mention_button', array());
        $instance->add('sonata.seo.block.twitter.embed', 'sonata.seo.block.twitter.embed', array());
        $instance->add('sonata.seo.block.pinterest.pin_button', 'sonata.seo.block.pinterest.pin_button', array());
        $instance->add('sonata.seo.block.breadcrumb.homepage', 'sonata.seo.block.breadcrumb.homepage', array());
        $instance->add('sonata.block.service.container', 'sonata.block.service.container', array());
        $instance->add('sonata.block.service.empty', 'sonata.block.service.empty', array());
        $instance->add('sonata.block.service.text', 'sonata.block.service.text', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.rss', 'sonata.block.service.rss', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.menu', 'sonata.block.service.menu', array());
        $instance->add('sonata.block.service.template', 'sonata.block.service.template', array());

        return $instance;
    }

    /**
     * Gets the public 'sonata.block.menu.registry' shared service.
     *
     * @return \Sonata\BlockBundle\Menu\MenuRegistry
     */
    protected function getSonata_Block_Menu_RegistryService()
    {
        return $this->services['sonata.block.menu.registry'] = new \Sonata\BlockBundle\Menu\MenuRegistry(array());
    }

    /**
     * Gets the public 'sonata.block.renderer.default' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockRenderer
     */
    protected function getSonata_Block_Renderer_DefaultService()
    {
        return $this->services['sonata.block.renderer.default'] = new \Sonata\BlockBundle\Block\BlockRenderer(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.exception.strategy.manager']) ? $this->services['sonata.block.exception.strategy.manager'] : $this->get('sonata.block.exception.strategy.manager')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sonata.block.service.container' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\ContainerBlockService
     */
    protected function getSonata_Block_Service_ContainerService()
    {
        return $this->services['sonata.block.service.container'] = new \Sonata\BlockBundle\Block\Service\ContainerBlockService('sonata.block.container', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.empty' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\EmptyBlockService
     */
    protected function getSonata_Block_Service_EmptyService()
    {
        return $this->services['sonata.block.service.empty'] = new \Sonata\BlockBundle\Block\Service\EmptyBlockService('sonata.block.empty', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.menu' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\MenuBlockService
     */
    protected function getSonata_Block_Service_MenuService()
    {
        return $this->services['sonata.block.service.menu'] = new \Sonata\BlockBundle\Block\Service\MenuBlockService('sonata.block.menu', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.menu.registry']) ? $this->services['sonata.block.menu.registry'] : $this->get('sonata.block.menu.registry')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.rss' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\RssBlockService
     */
    protected function getSonata_Block_Service_RssService()
    {
        return $this->services['sonata.block.service.rss'] = new \Sonata\BlockBundle\Block\Service\RssBlockService('sonata.block.rss', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.template' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TemplateBlockService
     */
    protected function getSonata_Block_Service_TemplateService()
    {
        return $this->services['sonata.block.service.template'] = new \Sonata\BlockBundle\Block\Service\TemplateBlockService('sonata.block.template', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.text' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TextBlockService
     */
    protected function getSonata_Block_Service_TextService()
    {
        return $this->services['sonata.block.service.text'] = new \Sonata\BlockBundle\Block\Service\TextBlockService('sonata.block.text', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.templating.helper' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\Helper\BlockHelper
     */
    protected function getSonata_Block_Templating_HelperService()
    {
        return $this->services['sonata.block.templating.helper'] = new \Sonata\BlockBundle\Templating\Helper\BlockHelper(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, array('by_type' => array('sonata.admin.block.admin_list' => 'sonata.cache.noop', 'sonata.block.service.text' => 'sonata.cache.noop', 'sonata.block.service.rss' => 'sonata.cache.noop')), ${($_ = isset($this->services['sonata.block.renderer.default']) ? $this->services['sonata.block.renderer.default'] : $this->get('sonata.block.renderer.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.context_manager.default']) ? $this->services['sonata.block.context_manager.default'] : $this->get('sonata.block.context_manager.default')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, NULL, ${($_ = isset($this->services['sonata.block.cache.handler.default']) ? $this->services['sonata.block.cache.handler.default'] : $this->get('sonata.block.cache.handler.default', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.twig.global' shared service.
     *
     * @return \Sonata\BlockBundle\Twig\GlobalVariables
     */
    protected function getSonata_Block_Twig_GlobalService()
    {
        return $this->services['sonata.block.twig.global'] = new \Sonata\BlockBundle\Twig\GlobalVariables(array('block_base' => '@SonataBlock/Block/block_base.html.twig', 'block_container' => '@SonataBlock/Block/block_container.html.twig'));
    }

    /**
     * Gets the public 'sonata.core.date.moment_format_converter' shared service.
     *
     * @return \Sonata\CoreBundle\Date\MomentFormatConverter
     */
    protected function getSonata_Core_Date_MomentFormatConverterService()
    {
        return $this->services['sonata.core.date.moment_format_converter'] = new \Sonata\CoreBundle\Date\MomentFormatConverter();
    }

    /**
     * Gets the public 'sonata.core.flashmessage.manager' shared service.
     *
     * @return \Sonata\CoreBundle\FlashMessage\FlashManager
     */
    protected function getSonata_Core_Flashmessage_ManagerService()
    {
        return $this->services['sonata.core.flashmessage.manager'] = new \Sonata\CoreBundle\FlashMessage\FlashManager(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, array('success' => array('success' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_success' => array('domain' => 'SonataAdminBundle'), 'sonata_user_success' => array('domain' => 'SonataUserBundle'), 'fos_user_success' => array('domain' => 'FOSUserBundle')), 'warning' => array('warning' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_info' => array('domain' => 'SonataAdminBundle')), 'danger' => array('error' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_error' => array('domain' => 'SonataAdminBundle'), 'sonata_user_error' => array('domain' => 'SonataUserBundle'))), array('success' => 'success', 'warning' => 'warning', 'danger' => 'danger'));
    }

    /**
     * Gets the public 'sonata.core.flashmessage.twig.extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\FlashMessageExtension
     */
    protected function getSonata_Core_Flashmessage_Twig_ExtensionService()
    {
        return $this->services['sonata.core.flashmessage.twig.extension'] = new \Sonata\CoreBundle\Twig\Extension\FlashMessageExtension();
    }

    /**
     * Gets the public 'sonata.core.flashmessage.twig.runtime' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\FlashMessageRuntime
     */
    protected function getSonata_Core_Flashmessage_Twig_RuntimeService()
    {
        return $this->services['sonata.core.flashmessage.twig.runtime'] = new \Sonata\CoreBundle\Twig\Extension\FlashMessageRuntime(${($_ = isset($this->services['sonata.core.flashmessage.manager']) ? $this->services['sonata.core.flashmessage.manager'] : $this->get('sonata.core.flashmessage.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.array' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ImmutableArrayType
     */
    protected function getSonata_Core_Form_Type_ArrayService()
    {
        return $this->services['sonata.core.form.type.array'] = new \Sonata\CoreBundle\Form\Type\ImmutableArrayType();
    }

    /**
     * Gets the public 'sonata.core.form.type.boolean' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\BooleanType
     */
    protected function getSonata_Core_Form_Type_BooleanService()
    {
        return $this->services['sonata.core.form.type.boolean'] = new \Sonata\CoreBundle\Form\Type\BooleanType();
    }

    /**
     * Gets the public 'sonata.core.form.type.collection' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\CollectionType
     */
    protected function getSonata_Core_Form_Type_CollectionService()
    {
        return $this->services['sonata.core.form.type.collection'] = new \Sonata\CoreBundle\Form\Type\CollectionType();
    }

    /**
     * Gets the public 'sonata.core.form.type.color' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ColorType
     */
    protected function getSonata_Core_Form_Type_ColorService()
    {
        return $this->services['sonata.core.form.type.color'] = new \Sonata\CoreBundle\Form\Type\ColorType();
    }

    /**
     * Gets the public 'sonata.core.form.type.color_selector' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ColorSelectorType
     *
     * @deprecated The "sonata.core.form.type.color_selector" service is deprecated since 3.5 and will be removed in 4.0.
     */
    protected function getSonata_Core_Form_Type_ColorSelectorService()
    {
        @trigger_error('The "sonata.core.form.type.color_selector" service is deprecated since 3.5 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.form.type.color_selector'] = new \Sonata\CoreBundle\Form\Type\ColorSelectorType();
    }

    /**
     * Gets the public 'sonata.core.form.type.date_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DatePickerType
     */
    protected function getSonata_Core_Form_Type_DatePickerService()
    {
        return $this->services['sonata.core.form.type.date_picker'] = new \Sonata\CoreBundle\Form\Type\DatePickerType(${($_ = isset($this->services['sonata.core.date.moment_format_converter']) ? $this->services['sonata.core.date.moment_format_converter'] : $this->get('sonata.core.date.moment_format_converter')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.date_range' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateRangeType
     */
    protected function getSonata_Core_Form_Type_DateRangeService()
    {
        return $this->services['sonata.core.form.type.date_range'] = new \Sonata\CoreBundle\Form\Type\DateRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.date_range_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateRangePickerType
     */
    protected function getSonata_Core_Form_Type_DateRangePickerService()
    {
        return $this->services['sonata.core.form.type.date_range_picker'] = new \Sonata\CoreBundle\Form\Type\DateRangePickerType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimePickerType
     */
    protected function getSonata_Core_Form_Type_DatetimePickerService()
    {
        return $this->services['sonata.core.form.type.datetime_picker'] = new \Sonata\CoreBundle\Form\Type\DateTimePickerType(${($_ = isset($this->services['sonata.core.date.moment_format_converter']) ? $this->services['sonata.core.date.moment_format_converter'] : $this->get('sonata.core.date.moment_format_converter')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_range' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimeRangeType
     */
    protected function getSonata_Core_Form_Type_DatetimeRangeService()
    {
        return $this->services['sonata.core.form.type.datetime_range'] = new \Sonata\CoreBundle\Form\Type\DateTimeRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_range_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimeRangePickerType
     */
    protected function getSonata_Core_Form_Type_DatetimeRangePickerService()
    {
        return $this->services['sonata.core.form.type.datetime_range_picker'] = new \Sonata\CoreBundle\Form\Type\DateTimeRangePickerType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.equal' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\EqualType
     */
    protected function getSonata_Core_Form_Type_EqualService()
    {
        return $this->services['sonata.core.form.type.equal'] = new \Sonata\CoreBundle\Form\Type\EqualType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.translatable_choice' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\TranslatableChoiceType
     *
     * @deprecated The "sonata.core.form.type.translatable_choice" service is deprecated since 2.2.0 and will be removed in 4.0.
     */
    protected function getSonata_Core_Form_Type_TranslatableChoiceService()
    {
        @trigger_error('The "sonata.core.form.type.translatable_choice" service is deprecated since 2.2.0 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.form.type.translatable_choice'] = new \Sonata\CoreBundle\Form\Type\TranslatableChoiceType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.model.adapter.chain' shared service.
     *
     * @return \Sonata\CoreBundle\Model\Adapter\AdapterChain
     */
    protected function getSonata_Core_Model_Adapter_ChainService()
    {
        $this->services['sonata.core.model.adapter.chain'] = $instance = new \Sonata\CoreBundle\Model\Adapter\AdapterChain();

        $instance->addAdapter(new \Sonata\CoreBundle\Model\Adapter\DoctrineORMAdapter(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));

        return $instance;
    }

    /**
     * Gets the public 'sonata.core.slugify.cocur' shared service.
     *
     * @return \Cocur\Slugify\Slugify
     *
     * @deprecated The "sonata.core.slugify.cocur" service is deprecated. You should stop using it, as it will soon be removed.
     */
    protected function getSonata_Core_Slugify_CocurService()
    {
        @trigger_error('The "sonata.core.slugify.cocur" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

        return $this->services['sonata.core.slugify.cocur'] = new \Cocur\Slugify\Slugify();
    }

    /**
     * Gets the public 'sonata.core.slugify.native' shared service.
     *
     * @return \Sonata\CoreBundle\Component\NativeSlugify
     *
     * @deprecated The "sonata.core.slugify.native" service is deprecated since 2.3 and will be removed in 4.0.
     */
    protected function getSonata_Core_Slugify_NativeService()
    {
        @trigger_error('The "sonata.core.slugify.native" service is deprecated since 2.3 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.slugify.native'] = new \Sonata\CoreBundle\Component\NativeSlugify();
    }

    /**
     * Gets the public 'sonata.core.twig.deprecated_template_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\DeprecatedTemplateExtension
     */
    protected function getSonata_Core_Twig_DeprecatedTemplateExtensionService()
    {
        return $this->services['sonata.core.twig.deprecated_template_extension'] = new \Sonata\CoreBundle\Twig\Extension\DeprecatedTemplateExtension();
    }

    /**
     * Gets the public 'sonata.core.twig.extension.text' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\DeprecatedTextExtension
     */
    protected function getSonata_Core_Twig_Extension_TextService()
    {
        return $this->services['sonata.core.twig.extension.text'] = new \Sonata\CoreBundle\Twig\Extension\DeprecatedTextExtension();
    }

    /**
     * Gets the public 'sonata.core.twig.extension.wrapping' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\FormTypeExtension
     */
    protected function getSonata_Core_Twig_Extension_WrappingService()
    {
        return $this->services['sonata.core.twig.extension.wrapping'] = new \Sonata\CoreBundle\Twig\Extension\FormTypeExtension('standard');
    }

    /**
     * Gets the public 'sonata.core.twig.status_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\StatusExtension
     */
    protected function getSonata_Core_Twig_StatusExtensionService()
    {
        return $this->services['sonata.core.twig.status_extension'] = new \Sonata\CoreBundle\Twig\Extension\StatusExtension();
    }

    /**
     * Gets the public 'sonata.core.twig.status_runtime' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\StatusRuntime
     */
    protected function getSonata_Core_Twig_StatusRuntimeService()
    {
        $this->services['sonata.core.twig.status_runtime'] = $instance = new \Sonata\CoreBundle\Twig\Extension\StatusRuntime();

        $instance->addStatusService(${($_ = isset($this->services['sonata.core.flashmessage.manager']) ? $this->services['sonata.core.flashmessage.manager'] : $this->get('sonata.core.flashmessage.manager')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.core.twig.template_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\TemplateExtension
     */
    protected function getSonata_Core_Twig_TemplateExtensionService()
    {
        return $this->services['sonata.core.twig.template_extension'] = new \Sonata\CoreBundle\Twig\Extension\TemplateExtension(true, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['sonata.core.model.adapter.chain']) ? $this->services['sonata.core.model.adapter.chain'] : $this->get('sonata.core.model.adapter.chain')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.validator.inline' shared service.
     *
     * @return \Sonata\CoreBundle\Validator\InlineValidator
     */
    protected function getSonata_Core_Validator_InlineService()
    {
        return $this->services['sonata.core.validator.inline'] = new \Sonata\CoreBundle\Validator\InlineValidator($this, ${($_ = isset($this->services['validator.validator_factory']) ? $this->services['validator.validator_factory'] : $this->getValidator_ValidatorFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.easy_extends.doctrine.mapper' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Mapper\DoctrineORMMapper
     */
    protected function getSonata_EasyExtends_Doctrine_MapperService()
    {
        $this->services['sonata.easy_extends.doctrine.mapper'] = $instance = new \Sonata\EasyExtendsBundle\Mapper\DoctrineORMMapper(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, array());

        $instance->addAssociation('Application\\Sonata\\MediaBundle\\Entity\\Media', 'mapOneToMany', array(0 => array('fieldName' => 'galleryHasMedias', 'targetEntity' => 'Application\\Sonata\\MediaBundle\\Entity\\GalleryHasMedia', 'cascade' => array(0 => 'persist'), 'mappedBy' => 'media', 'orphanRemoval' => false)));
        $instance->addAssociation('Application\\Sonata\\MediaBundle\\Entity\\Media', 'mapManyToOne', array(0 => array('fieldName' => 'category', 'targetEntity' => 'Application\\Sonata\\ClassificationBundle\\Entity\\Category', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'category_id', 'referencedColumnName' => 'id', 'onDelete' => 'SET NULL')), 'orphanRemoval' => false)));
        $instance->addAssociation('Application\\Sonata\\MediaBundle\\Entity\\GalleryHasMedia', 'mapManyToOne', array(0 => array('fieldName' => 'gallery', 'targetEntity' => 'Application\\Sonata\\MediaBundle\\Entity\\Gallery', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => 'galleryHasMedias', 'joinColumns' => array(0 => array('name' => 'gallery_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'orphanRemoval' => false), 1 => array('fieldName' => 'media', 'targetEntity' => 'Application\\Sonata\\MediaBundle\\Entity\\Media', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => 'galleryHasMedias', 'joinColumns' => array(0 => array('name' => 'media_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'orphanRemoval' => false)));
        $instance->addAssociation('Application\\Sonata\\MediaBundle\\Entity\\Gallery', 'mapOneToMany', array(0 => array('fieldName' => 'galleryHasMedias', 'targetEntity' => 'Application\\Sonata\\MediaBundle\\Entity\\GalleryHasMedia', 'cascade' => array(0 => 'persist'), 'mappedBy' => 'gallery', 'orphanRemoval' => true, 'orderBy' => array('position' => 'ASC'))));

        return $instance;
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.bundle' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\BundleGenerator
     */
    protected function getSonata_EasyExtends_Generator_BundleService()
    {
        return $this->services['sonata.easy_extends.generator.bundle'] = new \Sonata\EasyExtendsBundle\Generator\BundleGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.odm' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\OdmGenerator
     */
    protected function getSonata_EasyExtends_Generator_OdmService()
    {
        return $this->services['sonata.easy_extends.generator.odm'] = new \Sonata\EasyExtendsBundle\Generator\OdmGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.orm' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\OrmGenerator
     */
    protected function getSonata_EasyExtends_Generator_OrmService()
    {
        return $this->services['sonata.easy_extends.generator.orm'] = new \Sonata\EasyExtendsBundle\Generator\OrmGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.phpcr' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\PHPCRGenerator
     */
    protected function getSonata_EasyExtends_Generator_PhpcrService()
    {
        return $this->services['sonata.easy_extends.generator.phpcr'] = new \Sonata\EasyExtendsBundle\Generator\PHPCRGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.serializer' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\SerializerGenerator
     */
    protected function getSonata_EasyExtends_Generator_SerializerService()
    {
        return $this->services['sonata.easy_extends.generator.serializer'] = new \Sonata\EasyExtendsBundle\Generator\SerializerGenerator();
    }

    /**
     * Gets the public 'sonata.media.adapter.filesystem.local' shared service.
     *
     * @return \Sonata\MediaBundle\Filesystem\Local
     */
    protected function getSonata_Media_Adapter_Filesystem_LocalService()
    {
        return $this->services['sonata.media.adapter.filesystem.local'] = new \Sonata\MediaBundle\Filesystem\Local(($this->targetDirs[3].'\\app/../public/uploads/media'), false);
    }

    /**
     * Gets the public 'sonata.media.adapter.image.gd' shared service.
     *
     * @return \Imagine\Gd\Imagine
     */
    protected function getSonata_Media_Adapter_Image_GdService()
    {
        return $this->services['sonata.media.adapter.image.gd'] = new \Imagine\Gd\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.image.gmagick' shared service.
     *
     * @return \Imagine\Gmagick\Imagine
     */
    protected function getSonata_Media_Adapter_Image_GmagickService()
    {
        return $this->services['sonata.media.adapter.image.gmagick'] = new \Imagine\Gmagick\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.image.imagick' shared service.
     *
     * @return \Imagine\Imagick\Imagine
     */
    protected function getSonata_Media_Adapter_Image_ImagickService()
    {
        return $this->services['sonata.media.adapter.image.imagick'] = new \Imagine\Imagick\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.service.s3' shared service.
     *
     * @return \Aws\S3\S3Client
     */
    protected function getSonata_Media_Adapter_Service_S3Service()
    {
        return $this->services['sonata.media.adapter.service.s3'] = \Aws\S3\S3Client::factory(array());
    }

    /**
     * Gets the public 'sonata.media.block.breadcrumb_index' shared service.
     *
     * @return \Sonata\MediaBundle\Block\Breadcrumb\GalleryIndexBreadcrumbBlockService
     */
    protected function getSonata_Media_Block_BreadcrumbIndexService()
    {
        return $this->services['sonata.media.block.breadcrumb_index'] = new \Sonata\MediaBundle\Block\Breadcrumb\GalleryIndexBreadcrumbBlockService('gallery_index', 'sonata.media.block.breadcrumb_view', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.breadcrumb_view' shared service.
     *
     * @return \Sonata\MediaBundle\Block\Breadcrumb\GalleryViewBreadcrumbBlockService
     */
    protected function getSonata_Media_Block_BreadcrumbViewService()
    {
        return $this->services['sonata.media.block.breadcrumb_view'] = new \Sonata\MediaBundle\Block\Breadcrumb\GalleryViewBreadcrumbBlockService('gallery_view', 'sonata.media.block.breadcrumb_view', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.breadcrumb_view_media' shared service.
     *
     * @return \Sonata\MediaBundle\Block\Breadcrumb\MediaViewBreadcrumbBlockService
     */
    protected function getSonata_Media_Block_BreadcrumbViewMediaService()
    {
        return $this->services['sonata.media.block.breadcrumb_view_media'] = new \Sonata\MediaBundle\Block\Breadcrumb\MediaViewBreadcrumbBlockService('media_view', 'sonata.media.block.breadcrumb_view_media', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.feature_media' shared service.
     *
     * @return \Sonata\MediaBundle\Block\FeatureMediaBlockService
     */
    protected function getSonata_Media_Block_FeatureMediaService()
    {
        return $this->services['sonata.media.block.feature_media'] = new \Sonata\MediaBundle\Block\FeatureMediaBlockService('sonata.media.block.feature_media', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Block\GalleryBlockService
     */
    protected function getSonata_Media_Block_GalleryService()
    {
        return $this->services['sonata.media.block.gallery'] = new \Sonata\MediaBundle\Block\GalleryBlockService('sonata.media.block.gallery', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.gallery_list' shared service.
     *
     * @return \Sonata\MediaBundle\Block\GalleryListBlockService
     */
    protected function getSonata_Media_Block_GalleryListService()
    {
        return $this->services['sonata.media.block.gallery_list'] = new \Sonata\MediaBundle\Block\GalleryListBlockService('sonata.media.block.gallery_list', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.media' shared service.
     *
     * @return \Sonata\MediaBundle\Block\MediaBlockService
     */
    protected function getSonata_Media_Block_MediaService()
    {
        return $this->services['sonata.media.block.media'] = new \Sonata\MediaBundle\Block\MediaBlockService('sonata.media.block.media', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.buzz.browser' shared service.
     *
     * @return \Buzz\Browser
     */
    protected function getSonata_Media_Buzz_BrowserService()
    {
        return $this->services['sonata.media.buzz.browser'] = new \Buzz\Browser(${($_ = isset($this->services['sonata.media.buzz.connector.curl']) ? $this->services['sonata.media.buzz.connector.curl'] : $this->get('sonata.media.buzz.connector.curl')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.buzz.connector.curl' shared service.
     *
     * @return \Buzz\Client\Curl
     */
    protected function getSonata_Media_Buzz_Connector_CurlService()
    {
        $this->services['sonata.media.buzz.connector.curl'] = $instance = new \Buzz\Client\Curl();

        $instance->setIgnoreErrors(true);
        $instance->setMaxRedirects(5);
        $instance->setTimeout(5);
        $instance->setVerifyPeer(true);
        $instance->setProxy(NULL);

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.buzz.connector.file_get_contents' shared service.
     *
     * @return \Buzz\Client\FileGetContents
     */
    protected function getSonata_Media_Buzz_Connector_FileGetContentsService()
    {
        $this->services['sonata.media.buzz.connector.file_get_contents'] = $instance = new \Buzz\Client\FileGetContents();

        $instance->setIgnoreErrors(true);
        $instance->setMaxRedirects(5);
        $instance->setTimeout(5);
        $instance->setVerifyPeer(true);
        $instance->setProxy(NULL);

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.cdn.server' shared service.
     *
     * @return \Sonata\MediaBundle\CDN\Server
     */
    protected function getSonata_Media_Cdn_ServerService()
    {
        return $this->services['sonata.media.cdn.server'] = new \Sonata\MediaBundle\CDN\Server('/uploads/media');
    }

    /**
     * Gets the public 'sonata.media.doctrine.event_subscriber' shared service.
     *
     * @return \Sonata\MediaBundle\Listener\ORM\MediaEventSubscriber
     */
    protected function getSonata_Media_Doctrine_EventSubscriberService()
    {
        return $this->services['sonata.media.doctrine.event_subscriber'] = new \Sonata\MediaBundle\Listener\ORM\MediaEventSubscriber($this);
    }

    /**
     * Gets the public 'sonata.media.filesystem.local' shared service.
     *
     * @return \Gaufrette\Filesystem
     */
    protected function getSonata_Media_Filesystem_LocalService()
    {
        return $this->services['sonata.media.filesystem.local'] = new \Gaufrette\Filesystem(${($_ = isset($this->services['sonata.media.adapter.filesystem.local']) ? $this->services['sonata.media.adapter.filesystem.local'] : $this->get('sonata.media.adapter.filesystem.local')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.form.type.media' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\MediaType
     */
    protected function getSonata_Media_Form_Type_MediaService()
    {
        $this->services['sonata.media.form.type.media'] = $instance = new \Sonata\MediaBundle\Form\Type\MediaType(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, 'Application\\Sonata\\MediaBundle\\Entity\\Media');

        if ($this->has('logger')) {
            $instance->setLogger(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.generator.default' shared service.
     *
     * @return \Sonata\MediaBundle\Generator\DefaultGenerator
     */
    protected function getSonata_Media_Generator_DefaultService()
    {
        return $this->services['sonata.media.generator.default'] = new \Sonata\MediaBundle\Generator\DefaultGenerator();
    }

    /**
     * Gets the public 'sonata.media.manager.category.default' shared service.
     *
     * @return \Sonata\MediaBundle\Model\CategoryManager
     */
    protected function getSonata_Media_Manager_Category_DefaultService()
    {
        return $this->services['sonata.media.manager.category.default'] = new \Sonata\MediaBundle\Model\CategoryManager(NULL);
    }

    /**
     * Gets the public 'sonata.media.manager.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Entity\GalleryManager
     */
    protected function getSonata_Media_Manager_GalleryService()
    {
        return $this->services['sonata.media.manager.gallery'] = new \Sonata\MediaBundle\Entity\GalleryManager('Application\\Sonata\\MediaBundle\\Entity\\Gallery', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.manager.media' shared service.
     *
     * @return \Sonata\MediaBundle\Entity\MediaManager
     */
    protected function getSonata_Media_Manager_MediaService()
    {
        return $this->services['sonata.media.manager.media'] = new \Sonata\MediaBundle\Entity\MediaManager('Application\\Sonata\\MediaBundle\\Entity\\Media', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.metadata.amazon' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\AmazonMetadataBuilder
     */
    protected function getSonata_Media_Metadata_AmazonService()
    {
        return $this->services['sonata.media.metadata.amazon'] = new \Sonata\MediaBundle\Metadata\AmazonMetadataBuilder();
    }

    /**
     * Gets the public 'sonata.media.metadata.noop' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\NoopMetadataBuilder
     */
    protected function getSonata_Media_Metadata_NoopService()
    {
        return $this->services['sonata.media.metadata.noop'] = new \Sonata\MediaBundle\Metadata\NoopMetadataBuilder();
    }

    /**
     * Gets the public 'sonata.media.metadata.proxy' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\ProxyMetadataBuilder
     */
    protected function getSonata_Media_Metadata_ProxyService()
    {
        return $this->services['sonata.media.metadata.proxy'] = new \Sonata\MediaBundle\Metadata\ProxyMetadataBuilder($this);
    }

    /**
     * Gets the public 'sonata.media.pool' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\Pool
     */
    protected function getSonata_Media_PoolService()
    {
        $this->services['sonata.media.pool'] = $instance = new \Sonata\MediaBundle\Provider\Pool('default');

        $instance->addContext('default', array(0 => 'sonata.media.provider.dailymotion', 1 => 'sonata.media.provider.youtube', 2 => 'sonata.media.provider.image', 3 => 'sonata.media.provider.file', 4 => 'sonata.media.provider.vimeo'), array('default_small' => array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'default_big' => array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true)), array('strategy' => 'sonata.media.security.superadmin_strategy', 'mode' => 'http'));
        $instance->addDownloadStrategy('sonata.media.security.superadmin_strategy', ${($_ = isset($this->services['sonata.media.security.superadmin_strategy']) ? $this->services['sonata.media.security.superadmin_strategy'] : $this->get('sonata.media.security.superadmin_strategy')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.image', ${($_ = isset($this->services['sonata.media.provider.image']) ? $this->services['sonata.media.provider.image'] : $this->get('sonata.media.provider.image')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.file', ${($_ = isset($this->services['sonata.media.provider.file']) ? $this->services['sonata.media.provider.file'] : $this->get('sonata.media.provider.file')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.youtube', ${($_ = isset($this->services['sonata.media.provider.youtube']) ? $this->services['sonata.media.provider.youtube'] : $this->get('sonata.media.provider.youtube')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.dailymotion', ${($_ = isset($this->services['sonata.media.provider.dailymotion']) ? $this->services['sonata.media.provider.dailymotion'] : $this->get('sonata.media.provider.dailymotion')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.vimeo', ${($_ = isset($this->services['sonata.media.provider.vimeo']) ? $this->services['sonata.media.provider.vimeo'] : $this->get('sonata.media.provider.vimeo')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.dailymotion' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\DailyMotionProvider
     */
    protected function getSonata_Media_Provider_DailymotionService()
    {
        $this->services['sonata.media.provider.dailymotion'] = $instance = new \Sonata\MediaBundle\Provider\DailyMotionProvider('sonata.media.provider.dailymotion', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_dailymotion.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.file' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\FileProvider
     */
    protected function getSonata_Media_Provider_FileService()
    {
        $this->services['sonata.media.provider.file'] = $instance = new \Sonata\MediaBundle\Provider\FileProvider('sonata.media.provider.file', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, array(0 => 'pdf', 1 => 'txt', 2 => 'rtf', 3 => 'doc', 4 => 'docx', 5 => 'xls', 6 => 'xlsx', 7 => 'ppt', 8 => 'pptx', 9 => 'odt', 10 => 'odg', 11 => 'odp', 12 => 'ods', 13 => 'odc', 14 => 'odf', 15 => 'odb', 16 => 'csv', 17 => 'xml'), array(0 => 'application/pdf', 1 => 'application/x-pdf', 2 => 'application/rtf', 3 => 'text/html', 4 => 'text/rtf', 5 => 'text/plain', 6 => 'application/excel', 7 => 'application/msword', 8 => 'application/vnd.ms-excel', 9 => 'application/vnd.ms-powerpoint', 10 => 'application/vnd.ms-powerpoint', 11 => 'application/vnd.oasis.opendocument.text', 12 => 'application/vnd.oasis.opendocument.graphics', 13 => 'application/vnd.oasis.opendocument.presentation', 14 => 'application/vnd.oasis.opendocument.spreadsheet', 15 => 'application/vnd.oasis.opendocument.chart', 16 => 'application/vnd.oasis.opendocument.formula', 17 => 'application/vnd.oasis.opendocument.database', 18 => 'application/vnd.oasis.opendocument.image', 19 => 'text/comma-separated-values', 20 => 'text/xml', 21 => 'application/xml', 22 => 'application/zip'), ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_file.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.image' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\ImageProvider
     */
    protected function getSonata_Media_Provider_ImageService()
    {
        $this->services['sonata.media.provider.image'] = $instance = new \Sonata\MediaBundle\Provider\ImageProvider('sonata.media.provider.image', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, array(0 => 'jpg', 1 => 'png', 2 => 'jpeg'), array(0 => 'image/pjpeg', 1 => 'image/jpeg', 2 => 'image/png', 3 => 'image/x-png'), ${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_image.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.square']) ? $this->services['sonata.media.resizer.square'] : $this->get('sonata.media.resizer.square')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.vimeo' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\VimeoProvider
     */
    protected function getSonata_Media_Provider_VimeoService()
    {
        $this->services['sonata.media.provider.vimeo'] = $instance = new \Sonata\MediaBundle\Provider\VimeoProvider('sonata.media.provider.vimeo', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_vimeo.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.youtube' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\YouTubeProvider
     */
    protected function getSonata_Media_Provider_YoutubeService()
    {
        $this->services['sonata.media.provider.youtube'] = $instance = new \Sonata\MediaBundle\Provider\YouTubeProvider('sonata.media.provider.youtube', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'}, false);

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_youtube.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 500, 'quality' => 70, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.resizer.simple' shared service.
     *
     * @return \Sonata\MediaBundle\Resizer\SimpleResizer
     */
    protected function getSonata_Media_Resizer_SimpleService()
    {
        return $this->services['sonata.media.resizer.simple'] = new \Sonata\MediaBundle\Resizer\SimpleResizer(${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, 'inset', ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.resizer.square' shared service.
     *
     * @return \Sonata\MediaBundle\Resizer\SquareResizer
     */
    protected function getSonata_Media_Resizer_SquareService()
    {
        return $this->services['sonata.media.resizer.square'] = new \Sonata\MediaBundle\Resizer\SquareResizer(${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, 'inset', ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.connected_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\RolesDownloadStrategy
     */
    protected function getSonata_Media_Security_ConnectedStrategyService()
    {
        return $this->services['sonata.media.security.connected_strategy'] = new \Sonata\MediaBundle\Security\RolesDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, false), array(0 => 'IS_AUTHENTICATED_FULLY', 1 => 'IS_AUTHENTICATED_REMEMBERED'));
    }

    /**
     * Gets the public 'sonata.media.security.forbidden_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\ForbiddenDownloadStrategy
     */
    protected function getSonata_Media_Security_ForbiddenStrategyService()
    {
        return $this->services['sonata.media.security.forbidden_strategy'] = new \Sonata\MediaBundle\Security\ForbiddenDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.public_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\PublicDownloadStrategy
     */
    protected function getSonata_Media_Security_PublicStrategyService()
    {
        return $this->services['sonata.media.security.public_strategy'] = new \Sonata\MediaBundle\Security\PublicDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.session_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\SessionDownloadStrategy
     */
    protected function getSonata_Media_Security_SessionStrategyService()
    {
        return $this->services['sonata.media.security.session_strategy'] = new \Sonata\MediaBundle\Security\SessionDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sonata.media.security.superadmin_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\RolesDownloadStrategy
     */
    protected function getSonata_Media_Security_SuperadminStrategyService()
    {
        return $this->services['sonata.media.security.superadmin_strategy'] = new \Sonata\MediaBundle\Security\RolesDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['debug.security.access.decision_manager']) ? $this->services['debug.security.access.decision_manager'] : $this->getDebug_Security_Access_DecisionManagerService()) && false ?: '_'}, false), array());
    }

    /**
     * Gets the public 'sonata.media.serializer.handler.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Serializer\GallerySerializerHandler
     */
    protected function getSonata_Media_Serializer_Handler_GalleryService()
    {
        return $this->services['sonata.media.serializer.handler.gallery'] = new \Sonata\MediaBundle\Serializer\GallerySerializerHandler(${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.serializer.handler.media' shared service.
     *
     * @return \Sonata\MediaBundle\Serializer\MediaSerializerHandler
     */
    protected function getSonata_Media_Serializer_Handler_MediaService()
    {
        return $this->services['sonata.media.serializer.handler.media'] = new \Sonata\MediaBundle\Serializer\MediaSerializerHandler(${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.thumbnail.format' shared service.
     *
     * @return \Sonata\MediaBundle\Thumbnail\FormatThumbnail
     */
    protected function getSonata_Media_Thumbnail_FormatService()
    {
        return $this->services['sonata.media.thumbnail.format'] = new \Sonata\MediaBundle\Thumbnail\FormatThumbnail('jpg');
    }

    /**
     * Gets the public 'sonata.media.twig.extension' shared service.
     *
     * @return \Sonata\MediaBundle\Twig\Extension\MediaExtension
     */
    protected function getSonata_Media_Twig_ExtensionService()
    {
        return $this->services['sonata.media.twig.extension'] = new \Sonata\MediaBundle\Twig\Extension\MediaExtension(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.twig.global' shared service.
     *
     * @return \Sonata\MediaBundle\Twig\GlobalVariables
     */
    protected function getSonata_Media_Twig_GlobalService()
    {
        return $this->services['sonata.media.twig.global'] = new \Sonata\MediaBundle\Twig\GlobalVariables($this);
    }

    /**
     * Gets the public 'sonata.media.validator.format' shared service.
     *
     * @return \Sonata\MediaBundle\Validator\FormatValidator
     */
    protected function getSonata_Media_Validator_FormatService()
    {
        return $this->services['sonata.media.validator.format'] = new \Sonata\MediaBundle\Validator\FormatValidator(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.breadcrumb.homepage' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Breadcrumb\HomepageBreadcrumbBlockService
     */
    protected function getSonata_Seo_Block_Breadcrumb_HomepageService()
    {
        return $this->services['sonata.seo.block.breadcrumb.homepage'] = new \Sonata\SeoBundle\Block\Breadcrumb\HomepageBreadcrumbBlockService('homepage', 'sonata.seo.block.breadcrumb.homepage', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.email.share_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\EmailShareButtonBlockService
     */
    protected function getSonata_Seo_Block_Email_ShareButtonService()
    {
        return $this->services['sonata.seo.block.email.share_button'] = new \Sonata\SeoBundle\Block\Social\EmailShareButtonBlockService('sonata.seo.block.email.share_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.facebook.like_box' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\FacebookLikeBoxBlockService
     */
    protected function getSonata_Seo_Block_Facebook_LikeBoxService()
    {
        return $this->services['sonata.seo.block.facebook.like_box'] = new \Sonata\SeoBundle\Block\Social\FacebookLikeBoxBlockService('sonata.seo.block.facebook.like_box', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.facebook.like_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\FacebookLikeButtonBlockService
     */
    protected function getSonata_Seo_Block_Facebook_LikeButtonService()
    {
        return $this->services['sonata.seo.block.facebook.like_button'] = new \Sonata\SeoBundle\Block\Social\FacebookLikeButtonBlockService('sonata.seo.block.facebook.like_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.facebook.send_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\FacebookSendButtonBlockService
     */
    protected function getSonata_Seo_Block_Facebook_SendButtonService()
    {
        return $this->services['sonata.seo.block.facebook.send_button'] = new \Sonata\SeoBundle\Block\Social\FacebookSendButtonBlockService('sonata.seo.block.facebook.send_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.facebook.share_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\FacebookShareButtonBlockService
     */
    protected function getSonata_Seo_Block_Facebook_ShareButtonService()
    {
        return $this->services['sonata.seo.block.facebook.share_button'] = new \Sonata\SeoBundle\Block\Social\FacebookShareButtonBlockService('sonata.seo.block.facebook.share_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.pinterest.pin_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\PinterestPinButtonBlockService
     */
    protected function getSonata_Seo_Block_Pinterest_PinButtonService()
    {
        return $this->services['sonata.seo.block.pinterest.pin_button'] = new \Sonata\SeoBundle\Block\Social\PinterestPinButtonBlockService('sonata.seo.block.pinterest.pin_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.twitter.embed' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\TwitterEmbedTweetBlockService
     */
    protected function getSonata_Seo_Block_Twitter_EmbedService()
    {
        return $this->services['sonata.seo.block.twitter.embed'] = new \Sonata\SeoBundle\Block\Social\TwitterEmbedTweetBlockService('sonata.seo.block.twitter.embed', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.twitter.follow_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\TwitterFollowButtonBlockService
     */
    protected function getSonata_Seo_Block_Twitter_FollowButtonService()
    {
        return $this->services['sonata.seo.block.twitter.follow_button'] = new \Sonata\SeoBundle\Block\Social\TwitterFollowButtonBlockService('sonata.seo.block.twitter.follow_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.twitter.hashtag_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\TwitterHashtagButtonBlockService
     */
    protected function getSonata_Seo_Block_Twitter_HashtagButtonService()
    {
        return $this->services['sonata.seo.block.twitter.hashtag_button'] = new \Sonata\SeoBundle\Block\Social\TwitterHashtagButtonBlockService('sonata.seo.block.twitter.hashtag_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.twitter.mention_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\TwitterMentionButtonBlockService
     */
    protected function getSonata_Seo_Block_Twitter_MentionButtonService()
    {
        return $this->services['sonata.seo.block.twitter.mention_button'] = new \Sonata\SeoBundle\Block\Social\TwitterMentionButtonBlockService('sonata.seo.block.twitter.mention_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.block.twitter.share_button' shared service.
     *
     * @return \Sonata\SeoBundle\Block\Social\TwitterShareButtonBlockService
     */
    protected function getSonata_Seo_Block_Twitter_ShareButtonService()
    {
        return $this->services['sonata.seo.block.twitter.share_button'] = new \Sonata\SeoBundle\Block\Social\TwitterShareButtonBlockService('sonata.seo.block.twitter.share_button', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.seo.event.breadcrumb' shared service.
     *
     * @return \Sonata\SeoBundle\Event\BreadcrumbListener
     */
    protected function getSonata_Seo_Event_BreadcrumbService()
    {
        $this->services['sonata.seo.event.breadcrumb'] = $instance = new \Sonata\SeoBundle\Event\BreadcrumbListener();

        $instance->addBlockService('sonata.media.block.breadcrumb_view', ${($_ = isset($this->services['sonata.media.block.breadcrumb_view']) ? $this->services['sonata.media.block.breadcrumb_view'] : $this->get('sonata.media.block.breadcrumb_view')) && false ?: '_'});
        $instance->addBlockService('sonata.media.block.breadcrumb_index', ${($_ = isset($this->services['sonata.media.block.breadcrumb_index']) ? $this->services['sonata.media.block.breadcrumb_index'] : $this->get('sonata.media.block.breadcrumb_index')) && false ?: '_'});
        $instance->addBlockService('sonata.media.block.breadcrumb_view_media', ${($_ = isset($this->services['sonata.media.block.breadcrumb_view_media']) ? $this->services['sonata.media.block.breadcrumb_view_media'] : $this->get('sonata.media.block.breadcrumb_view_media')) && false ?: '_'});
        $instance->addBlockService('sonata.seo.block.breadcrumb.homepage', ${($_ = isset($this->services['sonata.seo.block.breadcrumb.homepage']) ? $this->services['sonata.seo.block.breadcrumb.homepage'] : $this->get('sonata.seo.block.breadcrumb.homepage')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.seo.page.default' shared service.
     *
     * @return \Sonata\SeoBundle\Seo\SeoPage
     */
    protected function getSonata_Seo_Page_DefaultService()
    {
        $this->services['sonata.seo.page.default'] = $instance = new \Sonata\SeoBundle\Seo\SeoPage();

        $instance->setTitle('File Manager Vertin Go Website Productions');
        $instance->setMetas(array('name' => array('description' => 'Consulter toutes les productions publiés par Vertin Go Website, que ça soient les applications, logiciels, ou bien support_PDF afin de vous former dans les domaines tels que le développement Informatique, et vous apporter une meilleure compréhension également de l\'applications des notions mathématiques, physiques et chimiques à la création d\'algorithme informatique.', 'keywords' => 'File Manager, Formations Pédagogiques, SEO, Inventaires de Formations, Développeurs Informatiques, Tutoriels, Développements Informatiques, Search Engine Optimization, Symfony, Framework', 'robots' => 'index, follow'), 'property' => array('og:site_name' => 'File Manager Vertin Go Website Productions', 'og:description' => 'Consulter toutes les productions publiés par Vertin Go Website, que ça soient les applications, logiciels, ou bien support_PDF afin de vous former dans les domaines tels que le développement Informatique, et vous apporter une meilleure compréhension également de l\'applications des notions mathématiques, physiques et chimiques à la création d\'algorithme informatique.'), 'http-equiv' => array('Content-Type' => 'text/html; charset=utf-8'), 'charset' => array('UTF-8' => '')));
        $instance->setHtmlAttributes(array('xmlns' => 'http://www.w3.org/1999/xhtml', 'xmlns:og' => 'http://opengraphprotocol.org/schema/'));
        $instance->setSeparator(' - ');

        return $instance;
    }

    /**
     * Gets the public 'sonata.seo.sitemap.manager' service.
     *
     * @return \Sonata\SeoBundle\Sitemap\SourceManager
     */
    protected function getSonata_Seo_Sitemap_ManagerService()
    {
        return new \Sonata\SeoBundle\Sitemap\SourceManager();
    }

    /**
     * Gets the public 'sonata.templating' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TwigEngine
     */
    protected function getSonata_TemplatingService()
    {
        return $this->services['sonata.templating'] = new \Sonata\BlockBundle\Templating\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['sonata.templating.name_parser']) ? $this->services['sonata.templating.name_parser'] : $this->get('sonata.templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.templating.locator']) ? $this->services['sonata.templating.locator'] : $this->get('sonata.templating.locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.templating.locator' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TemplateLocator
     */
    protected function getSonata_Templating_LocatorService()
    {
        return $this->services['sonata.templating.locator'] = new \Sonata\BlockBundle\Templating\TemplateLocator(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, __DIR__);
    }

    /**
     * Gets the public 'sonata.templating.name_parser' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TemplateNameParser
     */
    protected function getSonata_Templating_NameParserService()
    {
        return $this->services['sonata.templating.name_parser'] = new \Sonata\BlockBundle\Templating\TemplateNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'streamed_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the public 'swiftmailer.email_sender.listener' shared service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default' shared service.
     *
     * @return \Swift_Mailer
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer(${($_ = isset($this->services['swiftmailer.mailer.default.transport']) ? $this->services['swiftmailer.mailer.default.transport'] : $this->get('swiftmailer.mailer.default.transport')) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.plugin.messagelogger' shared service.
     *
     * @return \Swift_Plugins_MessageLogger
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.spool' shared service.
     *
     * @return \Swift_MemorySpool
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport' shared service.
     *
     * @return \Swift_Transport_SpoolTransport
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport(${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['swiftmailer.mailer.default.spool']) ? $this->services['swiftmailer.mailer.default.spool'] : $this->get('swiftmailer.mailer.default.spool')) && false ?: '_'});

        $instance->registerPlugin(${($_ = isset($this->services['swiftmailer.mailer.default.plugin.messagelogger']) ? $this->services['swiftmailer.mailer.default.plugin.messagelogger'] : $this->get('swiftmailer.mailer.default.plugin.messagelogger')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport.real' shared service.
     *
     * @return \Swift_Transport_EsmtpTransport
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => ${($_ = isset($this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get16a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get26a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 2 => ${($_ = isset($this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get36a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}));
        $a->setUsername('03c76d39beae13');
        $a->setPassword('33c4313a9c190f');
        $a->setAuthMode('plain');

        $this->services['swiftmailer.mailer.default.transport.real'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(${($_ = isset($this->services['swiftmailer.transport.replacementfactory']) ? $this->services['swiftmailer.transport.replacementfactory'] : $this->getSwiftmailer_Transport_ReplacementfactoryService()) && false ?: '_'}), array(0 => $a), ${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'});

        $instance->setHost('smtp.mailtrap.io');
        $instance->setPort(2525);
        $instance->setEncryption('tls');
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'swiftmailer.mailer.defaultMailer' shared service.
     *
     * @return \Swift_Mailer
     */
    protected function getSwiftmailer_Mailer_DefaultMailerService()
    {
        return $this->services['swiftmailer.mailer.defaultMailer'] = new \Swift_Mailer(${($_ = isset($this->services['swiftmailer.mailer.defaultMailer.transport']) ? $this->services['swiftmailer.mailer.defaultMailer.transport'] : $this->get('swiftmailer.mailer.defaultMailer.transport')) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.defaultMailer.plugin.messagelogger' shared service.
     *
     * @return \Swift_Plugins_MessageLogger
     */
    protected function getSwiftmailer_Mailer_DefaultMailer_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.defaultMailer.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the public 'swiftmailer.mailer.defaultMailer.transport' shared service.
     *
     * @return \Swift_Transport_EsmtpTransport
     */
    protected function getSwiftmailer_Mailer_DefaultMailer_TransportService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => ${($_ = isset($this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get16a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get26a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 2 => ${($_ = isset($this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get36a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}));
        $a->setUsername(NULL);
        $a->setPassword(NULL);
        $a->setAuthMode(NULL);

        $this->services['swiftmailer.mailer.defaultMailer.transport'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(${($_ = isset($this->services['swiftmailer.transport.replacementfactory']) ? $this->services['swiftmailer.transport.replacementfactory'] : $this->getSwiftmailer_Transport_ReplacementfactoryService()) && false ?: '_'}), array(0 => $a), new \Swift_Events_SimpleEventDispatcher());

        $instance->setHost('localhost');
        $instance->setPort(25);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        $instance->registerPlugin(new \Swift_Plugins_RedirectingPlugin(array(0 => 'mail-to-dev-account-spool@your.domain.com'), array()));
        $instance->registerPlugin(${($_ = isset($this->services['swiftmailer.mailer.defaultMailer.plugin.messagelogger']) ? $this->services['swiftmailer.mailer.defaultMailer.plugin.messagelogger'] : $this->get('swiftmailer.mailer.defaultMailer.plugin.messagelogger')) && false ?: '_'});
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'swiftmailer.mailer.immediateMailer' shared service.
     *
     * @return \Swift_Mailer
     */
    protected function getSwiftmailer_Mailer_ImmediateMailerService()
    {
        return $this->services['swiftmailer.mailer.immediateMailer'] = new \Swift_Mailer(${($_ = isset($this->services['swiftmailer.mailer.immediateMailer.transport']) ? $this->services['swiftmailer.mailer.immediateMailer.transport'] : $this->get('swiftmailer.mailer.immediateMailer.transport')) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.immediateMailer.plugin.messagelogger' shared service.
     *
     * @return \Swift_Plugins_MessageLogger
     */
    protected function getSwiftmailer_Mailer_ImmediateMailer_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.immediateMailer.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the public 'swiftmailer.mailer.immediateMailer.transport' shared service.
     *
     * @return \Swift_Transport_EsmtpTransport
     */
    protected function getSwiftmailer_Mailer_ImmediateMailer_TransportService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => ${($_ = isset($this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get16a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get26a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}, 2 => ${($_ = isset($this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c']) ? $this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] : $this->get36a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()) && false ?: '_'}));
        $a->setUsername(NULL);
        $a->setPassword(NULL);
        $a->setAuthMode(NULL);

        $this->services['swiftmailer.mailer.immediateMailer.transport'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(${($_ = isset($this->services['swiftmailer.transport.replacementfactory']) ? $this->services['swiftmailer.transport.replacementfactory'] : $this->getSwiftmailer_Transport_ReplacementfactoryService()) && false ?: '_'}), array(0 => $a), new \Swift_Events_SimpleEventDispatcher());

        $instance->setHost('localhost');
        $instance->setPort(25);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        $instance->registerPlugin(new \Swift_Plugins_RedirectingPlugin(array(0 => 'mail-to-dev-account-nospool@your.domain.com'), array()));
        $instance->registerPlugin(${($_ = isset($this->services['swiftmailer.mailer.immediateMailer.plugin.messagelogger']) ? $this->services['swiftmailer.mailer.immediateMailer.plugin.messagelogger'] : $this->get('swiftmailer.mailer.immediateMailer.plugin.messagelogger')) && false ?: '_'});
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'templating' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.filename_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the public 'templating.helper.logout_url' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.helper.security' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.name_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'translation.dumper.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.json' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.php' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.po' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.res' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the public 'translation.extractor' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', ${($_ = isset($this->services['translation.extractor.php']) ? $this->services['translation.extractor.php'] : $this->get('translation.extractor.php')) && false ?: '_'});
        $instance->addExtractor('twig', ${($_ = isset($this->services['twig.translation.extractor']) ? $this->services['twig.translation.extractor'] : $this->get('twig.translation.extractor')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.extractor.php' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the public 'translation.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader
     */
    protected function getTranslation_LoaderService()
    {
        $a = ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'});
        $instance->addLoader('yml', ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'});
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'});
        $instance->addLoader('mo', ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'});
        $instance->addLoader('ts', ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'});
        $instance->addLoader('csv', ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'});
        $instance->addLoader('res', ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'});
        $instance->addLoader('dat', ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'});
        $instance->addLoader('ini', ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'});
        $instance->addLoader('json', ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.loader.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the public 'translation.loader.dat' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the public 'translation.loader.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the public 'translation.loader.json' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the public 'translation.loader.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.php' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the public 'translation.loader.po' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the public 'translation.loader.res' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the public 'translation.loader.xliff' shared service.
     *
     * @return \JMS\TranslationBundle\Translation\Loader\Symfony\XliffLoader
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \JMS\TranslationBundle\Translation\Loader\Symfony\XliffLoader();
    }

    /**
     * Gets the public 'translation.loader.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the public 'translation.writer' shared service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', ${($_ = isset($this->services['translation.dumper.php']) ? $this->services['translation.dumper.php'] : $this->get('translation.dumper.php')) && false ?: '_'});
        $instance->addDumper('xlf', ${($_ = isset($this->services['translation.dumper.xliff']) ? $this->services['translation.dumper.xliff'] : $this->get('translation.dumper.xliff')) && false ?: '_'});
        $instance->addDumper('po', ${($_ = isset($this->services['translation.dumper.po']) ? $this->services['translation.dumper.po'] : $this->get('translation.dumper.po')) && false ?: '_'});
        $instance->addDumper('mo', ${($_ = isset($this->services['translation.dumper.mo']) ? $this->services['translation.dumper.mo'] : $this->get('translation.dumper.mo')) && false ?: '_'});
        $instance->addDumper('yml', ${($_ = isset($this->services['translation.dumper.yml']) ? $this->services['translation.dumper.yml'] : $this->get('translation.dumper.yml')) && false ?: '_'});
        $instance->addDumper('ts', ${($_ = isset($this->services['translation.dumper.qt']) ? $this->services['translation.dumper.qt'] : $this->get('translation.dumper.qt')) && false ?: '_'});
        $instance->addDumper('csv', ${($_ = isset($this->services['translation.dumper.csv']) ? $this->services['translation.dumper.csv'] : $this->get('translation.dumper.csv')) && false ?: '_'});
        $instance->addDumper('ini', ${($_ = isset($this->services['translation.dumper.ini']) ? $this->services['translation.dumper.ini'] : $this->get('translation.dumper.ini')) && false ?: '_'});
        $instance->addDumper('json', ${($_ = isset($this->services['translation.dumper.json']) ? $this->services['translation.dumper.json'] : $this->get('translation.dumper.json')) && false ?: '_'});
        $instance->addDumper('res', ${($_ = isset($this->services['translation.dumper.res']) ? $this->services['translation.dumper.res'] : $this->get('translation.dumper.res')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.translation']) ? $this->services['monolog.logger.translation'] : $this->get('monolog.logger.translation')) && false ?: '_'}));
    }

    /**
     * Gets the public 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\ServiceLocator(array('translation.loader.csv' => function () {
            return ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'};
        }, 'translation.loader.dat' => function () {
            return ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'};
        }, 'translation.loader.ini' => function () {
            return ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'};
        }, 'translation.loader.json' => function () {
            return ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'};
        }, 'translation.loader.mo' => function () {
            return ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'};
        }, 'translation.loader.php' => function () {
            return ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'};
        }, 'translation.loader.po' => function () {
            return ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'};
        }, 'translation.loader.qt' => function () {
            return ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'};
        }, 'translation.loader.res' => function () {
            return ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'};
        }, 'translation.loader.xliff' => function () {
            return ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};
        }, 'translation.loader.yml' => function () {
            return ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'};
        })), new \Symfony\Component\Translation\MessageSelector(), 'fr', array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('af' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.af.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.af.yml')), 'ar' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ar.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ar.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ar.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.ar.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.ar.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ar.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ar.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.ar.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ar.xliff')), 'az' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.az.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.az.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.az.xlf')), 'bg' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.bg.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.bg.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.bg.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.bg.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.bg.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bg.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bg.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.bg.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.bg.xliff')), 'ca' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ca.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ca.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ca.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.ca.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.ca.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ca.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ca.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ca.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ca.xliff')), 'cs' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.cs.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.cs.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.cs.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.cs.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.cs.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.cs.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.cs.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.cs.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.cs.xliff')), 'cy' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.cy.xlf')), 'da' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.da.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.da.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.da.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.da.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.da.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.da.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.da.yml')), 'de' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.de.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.de.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.de.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.de.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.de.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.de.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.de.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.de.yml'), 8 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.de.yml'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.de.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.de.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.de.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.de.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.de.xliff'), 14 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\IbrowsNewsletterBundle.de.yml'), 15 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\IbrowsNewsletterBundleForms.de.yml'), 16 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\messages.de.yml')), 'el' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.el.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.el.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.el.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.el.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.el.yml')), 'en' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.en.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.en.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.en.xlf'), 3 => ($this->targetDirs[3].'\\src\\filemanager-bundle/Resources/translations\\messages.en.yml'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.en.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.en.xlf'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.en.yml'), 7 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.en.yml'), 8 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.en.yml'), 9 => ($this->targetDirs[3].'\\vendor\\artgris\\media-bundle/Resources/translations\\messages.en.yml'), 10 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.en.yml'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.en.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.en.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.en.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.en.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.en.xliff'), 16 => ($this->targetDirs[3].'\\vendor\\oneup\\uploader-bundle/Resources/translations\\OneupUploaderBundle.en.yml'), 17 => ($this->targetDirs[3].'\\src\\newsletters-bundle/Resources/translations\\messages.en.yml'), 18 => ($this->targetDirs[3].'\\src\\newsletters-bundle/Resources/translations\\validators.en.yml'), 19 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\messages.en.yml'), 20 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\validators.en.yml')), 'es' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.es.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.es.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.es.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.es.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.es.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.es.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.es.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.es.yml'), 8 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.es.yml'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.es.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.es.xliff')), 'et' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.et.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.et.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.et.yml')), 'eu' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.eu.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.eu.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.eu.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.eu.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.eu.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.eu.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.eu.xliff')), 'fa' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fa.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fa.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.fa.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fa.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fa.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fa.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fa.xliff')), 'fi' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fi.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fi.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.fi.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.fi.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fi.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fi.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fi.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fi.xliff')), 'fr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.fr.xlf'), 3 => ($this->targetDirs[3].'\\src\\filemanager-bundle/Resources/translations\\messages.fr.yml'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.fr.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.fr.xlf'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fr.yml'), 7 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fr.yml'), 8 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.fr.yml'), 9 => ($this->targetDirs[3].'\\vendor\\artgris\\media-bundle/Resources/translations\\messages.fr.yml'), 10 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.fr.yml'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fr.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.fr.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fr.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.fr.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.fr.xliff'), 16 => ($this->targetDirs[3].'\\vendor\\bnbc\\upload-bundle\\Bnbc\\UploadBundle/Resources/translations\\messages.fr.xliff'), 17 => ($this->targetDirs[3].'\\app/Resources/translations\\messages.fr.yml')), 'gl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.gl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.gl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.gl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.gl.yml')), 'he' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.he.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.he.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.he.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.he.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.he.yml')), 'hr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.hr.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.hr.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.hr.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.hr.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.hr.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.hr.xliff')), 'hu' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hu.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hu.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.hu.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.hu.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.hu.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.hu.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.hu.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.hu.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.hu.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.hu.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.hu.xliff')), 'hy' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hy.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hy.xlf')), 'id' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.id.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.id.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.id.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.id.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.id.yml')), 'it' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.it.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.it.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.it.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.it.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.it.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.it.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.it.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.it.yml'), 8 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.it.yml'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.it.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.it.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.it.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.it.xliff')), 'ja' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ja.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ja.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ja.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ja.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ja.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ja.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ja.xliff'), 7 => ($this->targetDirs[3].'\\src\\newsletters-bundle/Resources/translations\\messages.ja.yml'), 8 => ($this->targetDirs[3].'\\src\\newsletters-bundle/Resources/translations\\validators.ja.yml'), 9 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\messages.ja.yml'), 10 => ($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/translations\\validators.ja.yml')), 'lb' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lb.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lb.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lb.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lb.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.lb.xliff')), 'lt' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lt.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lt.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lt.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.lt.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.lt.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lt.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.lt.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.lt.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.lt.xliff')), 'lv' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lv.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lv.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lv.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lv.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.lv.yml')), 'mn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.mn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.mn.xlf')), 'nb' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nb.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nb.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nb.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.nb.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.nb.yml')), 'nl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.nl.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.nl.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.nl.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.nl.yml'), 7 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.nl.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.nl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.nl.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.nl.xliff')), 'nn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nn.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nn.xlf')), 'no' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.no.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.no.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.no.xlf')), 'pl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.pl.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.pl.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pl.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pl.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.pl.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.pl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pl.xliff')), 'pt' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pt.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pt.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.pt.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.pt.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pt.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pt.yml'), 6 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.pt.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pt.xliff')), 'pt_BR' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pt_BR.xlf'), 3 => ($this->targetDirs[3].'\\src\\filemanager-bundle/Resources/translations\\messages.pt_BR.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pt_BR.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pt_BR.yml'), 6 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.pt_BR.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.pt_BR.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pt_BR.xliff')), 'ro' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ro.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ro.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ro.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.ro.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.ro.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ro.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ro.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ro.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ro.xliff')), 'ru' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ru.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ru.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ru.xlf'), 3 => ($this->targetDirs[3].'\\src\\filemanager-bundle/Resources/translations\\messages.ru.yml'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.ru.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.ru.xlf'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ru.yml'), 7 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ru.yml'), 8 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.ru.yml'), 9 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.ru.yml'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ru.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/translations\\SonataSeoBundle.ru.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ru.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.ru.xliff')), 'sk' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sk.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sk.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sk.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sk.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sk.yml'), 5 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.sk.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.sk.xliff')), 'sl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.sl.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.sl.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sl.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sl.yml'), 7 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.sl.yml'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.sl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.sl.xliff')), 'sq' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sq.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sr_Cyrl.xlf')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sr_Latn.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sr_Latn.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sr_Latn.yml')), 'sv' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sv.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sv.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sv.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.sv.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.sv.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sv.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sv.yml')), 'th' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.th.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.th.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.th.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.th.yml')), 'tr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.tr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.tr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.tr.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.tr.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.tr.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.tr.yml'), 6 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.tr.yml')), 'uk' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.uk.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.uk.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.uk.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.uk.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.uk.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.uk.yml'), 6 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/translations\\VichUploaderBundle.uk.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.uk.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.uk.xliff')), 'vi' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.vi.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.vi.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.vi.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.vi.yml')), 'zh_CN' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.zh_CN.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\EasyAdminBundle.zh_CN.xlf'), 4 => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/translations\\messages.zh_CN.xlf'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.zh_CN.yml'), 6 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.zh_CN.yml'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.zh_CN.xliff')), 'zh_TW' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.zh_TW.xlf')), 'pt_PT' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ua.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.ua.yml')), 'bn' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bn.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bn.yml')), 'bn_BD' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bn_BD.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bn_BD.yml')), 'eo' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.eo.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.eo.yml')), 'ky' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ky.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ky.yml')))));

        $instance->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});
        $instance->setFallbackLocales(array(0 => 'fr'));

        return $instance;
    }

    /**
     * Gets the public 'translator_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected function getTwigService()
    {
        $a = ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $c = ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'};
        $d = ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'};
        $e = ${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'};

        $f = new \Knp\Menu\Util\MenuManipulator();

        $g = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 0);
        $g->setDisplayOptions(array('fileLinkFormat' => $c));

        $h = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 1);
        $h->setDisplayOptions(array('maxStringLength' => 4096, 'fileLinkFormat' => $c));

        $i = new \Symfony\Bridge\Twig\AppVariable();
        $i->setEnvironment('dev');
        $i->setDebug(true);
        if ($this->has('security.token_storage')) {
            $i->setTokenStorage(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }
        if ($this->has('request_stack')) {
            $i->setRequestStack($d);
        }

        $this->services['twig'] = $instance = new \Twig\Environment(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}, array('paths' => array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL), 'debug' => true, 'strict_variables' => true, 'form_themes' => array(0 => 'form_div_layout.html.twig', 1 => 'BnbcUploadBundle:Form:fields.html.twig'), 'exception_controller' => 'twig.controller.exception:showAction', 'autoescape' => 'name', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension($a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}, $b));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(${($_ = isset($this->services['assets.packages']) ? $this->services['assets.packages'] : $this->get('assets.packages')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension($c, ($this->targetDirs[3].'\\app'), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($b, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($d, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(array(0 => $this, 1 => 'twig.form.renderer')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\WebLinkExtension($d));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(${($_ = isset($this->services['file_type_extension']) ? $this->services['file_type_extension'] : $this->get('file_type_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['order_extension']) ? $this->services['order_extension'] : $this->get('order_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['video_player.twig.video_player_extension']) ? $this->services['video_player.twig.video_player_extension'] : $this->get('video_player.twig.video_player_extension')) && false ?: '_'});
        $instance->addExtension(new \EasyCorp\Bundle\EasyAdminBundle\Twig\EasyAdminTwigExtension(${($_ = isset($this->services['easyadmin.config.manager']) ? $this->services['easyadmin.config.manager'] : $this->get('easyadmin.config.manager')) && false ?: '_'}, ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'}, ${($_ = isset($this->services['easyadmin.router']) ? $this->services['easyadmin.router'] : $this->get('easyadmin.router')) && false ?: '_'}, true, $a));
        $instance->addExtension(${($_ = isset($this->services['jms_translation.twig_extension']) ? $this->services['jms_translation.twig_extension'] : $this->get('jms_translation.twig_extension')) && false ?: '_'});
        $instance->addExtension(new \Vich\UploaderBundle\Twig\Extension\UploaderExtension(${($_ = isset($this->services['vich_uploader.templating.helper.uploader_helper']) ? $this->services['vich_uploader.templating.helper.uploader_helper'] : $this->get('vich_uploader.templating.helper.uploader_helper')) && false ?: '_'}));
        $instance->addExtension(${($_ = isset($this->services['arkounay_block_service']) ? $this->services['arkounay_block_service'] : $this->get('arkounay_block_service')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['twig.extension.image']) ? $this->services['twig.extension.image'] : $this->get('twig.extension.image')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.media.twig.extension']) ? $this->services['sonata.media.twig.extension'] : $this->get('sonata.media.twig.extension')) && false ?: '_'});
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerRuntimeExtension());
        $instance->addExtension(${($_ = isset($this->services['youwe.twig.extension']) ? $this->services['youwe.twig.extension'] : $this->get('youwe.twig.extension')) && false ?: '_'});
        $instance->addExtension(new \Symfony\Bundle\AsseticBundle\Twig\AsseticExtension(${($_ = isset($this->services['assetic.asset_factory']) ? $this->services['assetic.asset_factory'] : $this->getAssetic_AssetFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, true, array(), array(0 => 'YouweFileManagerBundle', 1 => 'NewslettersBundle'), new \Symfony\Bundle\AsseticBundle\DefaultValueSupplier($this)));
        $instance->addExtension(${($_ = isset($this->services['twig.extension.nomaya_social_bar']) ? $this->services['twig.extension.nomaya_social_bar'] : $this->get('twig.extension.nomaya_social_bar')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['twig.extension.nomaya_social_links']) ? $this->services['twig.extension.nomaya_social_links'] : $this->get('twig.extension.nomaya_social_links')) && false ?: '_'});
        $instance->addExtension(new \Sonata\SeoBundle\Twig\Extension\SeoExtension(${($_ = isset($this->services['sonata.seo.page.default']) ? $this->services['sonata.seo.page.default'] : $this->get('sonata.seo.page.default')) && false ?: '_'}, 'UTF-8'));
        $instance->addExtension(new \Symfony\Cmf\Bundle\SeoBundle\Twig\Extension\CmfSeoExtension(${($_ = isset($this->services['cmf_seo.presentation']) ? $this->services['cmf_seo.presentation'] : $this->get('cmf_seo.presentation')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Cmf\Bundle\CoreBundle\Twig\Extension\CmfExtension(new \Symfony\Cmf\Bundle\CoreBundle\Templating\Helper\Cmf(${($_ = isset($this->services['cmf_core.publish_workflow.checker.default']) ? $this->services['cmf_core.publish_workflow.checker.default'] : $this->get('cmf_core.publish_workflow.checker.default', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'})));
        $instance->addExtension(${($_ = isset($this->services['sonata.core.flashmessage.twig.extension']) ? $this->services['sonata.core.flashmessage.twig.extension'] : $this->get('sonata.core.flashmessage.twig.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.extension.wrapping']) ? $this->services['sonata.core.twig.extension.wrapping'] : $this->get('sonata.core.twig.extension.wrapping')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.extension.text']) ? $this->services['sonata.core.twig.extension.text'] : $this->get('sonata.core.twig.extension.text')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.status_extension']) ? $this->services['sonata.core.twig.status_extension'] : $this->get('sonata.core.twig.status_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.deprecated_template_extension']) ? $this->services['sonata.core.twig.deprecated_template_extension'] : $this->get('sonata.core.twig.deprecated_template_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.template_extension']) ? $this->services['sonata.core.twig.template_extension'] : $this->get('sonata.core.twig.template_extension')) && false ?: '_'});
        $instance->addExtension(new \Sonata\BlockBundle\Twig\Extension\BlockExtension(${($_ = isset($this->services['sonata.block.templating.helper']) ? $this->services['sonata.block.templating.helper'] : $this->get('sonata.block.templating.helper')) && false ?: '_'}));
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension(new \Knp\Menu\Twig\Helper(${($_ = isset($this->services['knp_menu.renderer_provider']) ? $this->services['knp_menu.renderer_provider'] : $this->get('knp_menu.renderer_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, $f, $e), $e, $f));
        $instance->addExtension(${($_ = isset($this->services['oneup_uploader.twig.extension.uploader']) ? $this->services['oneup_uploader.twig.extension.uploader'] : $this->get('oneup_uploader.twig.extension.uploader')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['twig.extension.stfalcon_tinymce']) ? $this->services['twig.extension.stfalcon_tinymce'] : $this->get('twig.extension.stfalcon_tinymce')) && false ?: '_'});
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, $g));
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension($h));
        $instance->addGlobal('app', $i);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\ServiceLocator(array('JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => function () {
            return ${($_ = isset($this->services['jms_serializer.twig_extension.serializer_runtime_helper']) ? $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] : $this->get('jms_serializer.twig_extension.serializer_runtime_helper')) && false ?: '_'};
        }, 'Sonata\\CoreBundle\\Twig\\Extension\\FlashMessageRuntime' => function () {
            return ${($_ = isset($this->services['sonata.core.flashmessage.twig.runtime']) ? $this->services['sonata.core.flashmessage.twig.runtime'] : $this->get('sonata.core.flashmessage.twig.runtime')) && false ?: '_'};
        }, 'Sonata\\CoreBundle\\Twig\\Extension\\StatusRuntime' => function () {
            return ${($_ = isset($this->services['sonata.core.twig.status_runtime']) ? $this->services['sonata.core.twig.status_runtime'] : $this->get('sonata.core.twig.status_runtime')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => function () {
            return ${($_ = isset($this->services['twig.runtime.httpkernel']) ? $this->services['twig.runtime.httpkernel'] : $this->get('twig.runtime.httpkernel')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer' => function () {
            return ${($_ = isset($this->services['twig.form.renderer']) ? $this->services['twig.form.renderer'] : $this->get('twig.form.renderer')) && false ?: '_'};
        }))));
        $instance->addGlobal('sonata_media', ${($_ = isset($this->services['sonata.media.twig.global']) ? $this->services['sonata.media.twig.global'] : $this->get('sonata.media.twig.global')) && false ?: '_'});
        $instance->addGlobal('sonata_block', ${($_ = isset($this->services['sonata.block.twig.global']) ? $this->services['sonata.block.twig.global'] : $this->get('sonata.block.twig.global')) && false ?: '_'});
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'twig.controller.exception' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'twig.controller.preview_error' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, 'twig.controller.exception:showAction');
    }

    /**
     * Gets the public 'twig.exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('twig.controller.exception:showAction', ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'twig.extension.image' shared service.
     *
     * @return \Gregwar\ImageBundle\Extensions\ImageTwig
     */
    protected function getTwig_Extension_ImageService()
    {
        return $this->services['twig.extension.image'] = new \Gregwar\ImageBundle\Extensions\ImageTwig(${($_ = isset($this->services['image.handling']) ? $this->services['image.handling'] : $this->get('image.handling')) && false ?: '_'}, ($this->targetDirs[3].'\\app/../web'));
    }

    /**
     * Gets the public 'twig.extension.nomaya_social_bar' shared service.
     *
     * @return \Nomaya\SocialBundle\Twig\Extension\NomayaTwigSocialBar
     */
    protected function getTwig_Extension_NomayaSocialBarService()
    {
        $this->services['twig.extension.nomaya_social_bar'] = $instance = new \Nomaya\SocialBundle\Twig\Extension\NomayaTwigSocialBar($this);

        $instance->setNetworks(array(0 => 'facebook', 1 => 'twitter', 2 => 'googleplus', 3 => 'linkedin', 4 => 'pinterest'));

        return $instance;
    }

    /**
     * Gets the public 'twig.extension.nomaya_social_links' shared service.
     *
     * @return \Nomaya\SocialBundle\Twig\Extension\NomayaTwigSocialLinks
     */
    protected function getTwig_Extension_NomayaSocialLinksService()
    {
        return $this->services['twig.extension.nomaya_social_links'] = new \Nomaya\SocialBundle\Twig\Extension\NomayaTwigSocialLinks($this);
    }

    /**
     * Gets the public 'twig.extension.stfalcon_tinymce' shared service.
     *
     * @return \Stfalcon\Bundle\TinymceBundle\Twig\Extension\StfalconTinymceExtension
     */
    protected function getTwig_Extension_StfalconTinymceService()
    {
        return $this->services['twig.extension.stfalcon_tinymce'] = new \Stfalcon\Bundle\TinymceBundle\Twig\Extension\StfalconTinymceExtension($this);
    }

    /**
     * Gets the public 'twig.form.renderer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Form\TwigRenderer
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => '@ArtgrisMedia/form/field_media.html.twig', 1 => '@VichUploader/Form/fields.html.twig', 2 => 'form_div_layout.html.twig', 3 => 'BnbcUploadBundle:Form:fields.html.twig', 4 => 'A2lixTranslationFormBundle::default.html.twig'), ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}), ${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.loader' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, $this->targetDirs[3]);

        $instance->addPath(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\SecurityBundle/Resources/views'), 'Security');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[3].'\\src\\AppBundle/Resources/views'), 'App');
        $instance->addPath(($this->targetDirs[3].'\\src\\AppBundle/Resources/views'), 'FOSUser');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/FOSUserBundle/views'), 'FOSUser');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/views'), 'FOSUser');
        $instance->addPath(($this->targetDirs[3].'\\src\\filemanager-bundle/Resources/views'), 'FileManager');
        $instance->addPath(($this->targetDirs[3].'\\src\\video-player-bundle/Resources/views'), 'VideoPlayer');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/EasyAdminBundle/views'), 'EasyAdmin');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src/Resources/views'), 'EasyAdmin');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/JMSTranslationBundle/views'), 'JMSTranslation');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\jms\\translation-bundle\\JMS\\TranslationBundle/Resources/views'), 'JMSTranslation');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\a2lix\\translation-form-bundle/Resources/views'), 'A2lixTranslationForm');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle/Resources/views'), 'VichUploader');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\arkounay\\block-bundle-i18n\\Arkounay\\BlockI18nBundle/Resources/views'), 'ArkounayBlockI18n');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\artgris\\media-bundle/Resources/views'), 'ArtgrisMedia');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/views'), 'LexikFormFilter');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\petkopara\\multi-search-bundle/Resources/views'), 'PetkoparaMultiSearch');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\petkopara\\crud-generator-bundle/Resources/views'), 'PetkoparaCrudGenerator');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony-cmf\\media-bundle/Resources/views'), 'CmfMedia');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/views'), 'SonataMedia');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\youwe\\file-manager-bundle\\Youwe\\FileManagerBundle/Resources/views'), 'YouweFileManager');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\nomaya\\social-bundle\\Nomaya\\SocialBundle/Resources/views'), 'NomayaSocial');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src/Resources/views'), 'SonataSeo');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony-cmf\\seo-bundle\\src/Resources/views'), 'CmfSeo');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony-cmf\\core-bundle\\src/Resources/views'), 'CmfCore');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/views'), 'SonataCore');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/views'), 'SonataBlock');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu-bundle\\src/Resources/views'), 'KnpMenu');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\bnbc\\upload-bundle\\Bnbc\\UploadBundle/Resources/views'), 'BnbcUpload');
        $instance->addPath(($this->targetDirs[3].'\\src\\newsletters-bundle/Resources/views'), 'Newsletter');
        $instance->addPath(($this->targetDirs[3].'\\src\\newsletter-bundle/Resources/views'), 'Newsletters');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\stfalcon\\tinymce-bundle\\Stfalcon\\Bundle\\TinymceBundle/Resources/views'), 'StfalconTinymce');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\DebugBundle/Resources/views'), 'Debug');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the public 'twig.profile' shared service.
     *
     * @return \Twig\Profiler\Profile
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig\Profiler\Profile();
    }

    /**
     * Gets the public 'twig.runtime.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime
     */
    protected function getTwig_Runtime_HttpkernelService()
    {
        return $this->services['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime(${($_ = isset($this->services['fragment.handler']) ? $this->services['fragment.handler'] : $this->get('fragment.handler')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.translation.extractor' shared service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
    }

    /**
     * Gets the public 'type.newsletter' shared autowired service.
     *
     * @return \Usn\NewsletterBundle\Form\Type\NewsletterType
     */
    protected function getType_NewsletterService()
    {
        return $this->services['type.newsletter'] = new \Usn\NewsletterBundle\Form\Type\NewsletterType();
    }

    /**
     * Gets the public 'uri_signer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('ThisTokenIsNotSoSecretChangeIt');
    }

    /**
     * Gets the public 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected function getValidateRequestListenerService()
    {
        return $this->services['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the public 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = ${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}->getValidator();
    }

    /**
     * Gets the public 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(${($_ = isset($this->services['validator.validator_factory']) ? $this->services['validator.validator_factory'] : $this->getValidator_ValidatorFactoryService()) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/config/validation.xml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/config/validation.xml'), 2 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/config/validation.xml')));
        $instance->enableAnnotationMapping(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => ${($_ = isset($this->services['doctrine.orm.validator_initializer']) ? $this->services['doctrine.orm.validator_initializer'] : $this->get('doctrine.orm.validator_initializer')) && false ?: '_'}, 1 => new \FOS\UserBundle\Validator\Initializer(${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'})));
        $instance->addXmlMapping(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle\\DependencyInjection\\Compiler/../../Resources/config/storage-validation/orm.xml'));

        return $instance;
    }

    /**
     * Gets the public 'validator.email' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the public 'validator.expression' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator();
    }

    /**
     * Gets the public 'var_dumper.cli_dumper' shared service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this->services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8', 0);
    }

    /**
     * Gets the public 'var_dumper.cloner' shared service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner
     */
    protected function getVarDumper_ClonerService()
    {
        $this->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the public 'vich_uploader.directory_namer_subdir' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\SubdirDirectoryNamer
     */
    protected function getVichUploader_DirectoryNamerSubdirService()
    {
        return $this->services['vich_uploader.directory_namer_subdir'] = new \Vich\UploaderBundle\Naming\SubdirDirectoryNamer();
    }

    /**
     * Gets the public 'vich_uploader.download_handler' shared service.
     *
     * @return \Vich\UploaderBundle\Handler\DownloadHandler
     */
    protected function getVichUploader_DownloadHandlerService()
    {
        return $this->services['vich_uploader.download_handler'] = new \Vich\UploaderBundle\Handler\DownloadHandler(${($_ = isset($this->services['vich_uploader.property_mapping_factory']) ? $this->services['vich_uploader.property_mapping_factory'] : $this->getVichUploader_PropertyMappingFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.storage']) ? $this->services['vich_uploader.storage'] : $this->get('vich_uploader.storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'vich_uploader.form.type.file' shared service.
     *
     * @return \Vich\UploaderBundle\Form\Type\VichFileType
     */
    protected function getVichUploader_Form_Type_FileService()
    {
        return $this->services['vich_uploader.form.type.file'] = new \Vich\UploaderBundle\Form\Type\VichFileType(${($_ = isset($this->services['vich_uploader.storage']) ? $this->services['vich_uploader.storage'] : $this->get('vich_uploader.storage')) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->get('vich_uploader.upload_handler')) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.property_mapping_factory']) ? $this->services['vich_uploader.property_mapping_factory'] : $this->getVichUploader_PropertyMappingFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'vich_uploader.form.type.image' shared service.
     *
     * @return \Vich\UploaderBundle\Form\Type\VichImageType
     */
    protected function getVichUploader_Form_Type_ImageService()
    {
        return $this->services['vich_uploader.form.type.image'] = new \Vich\UploaderBundle\Form\Type\VichImageType(${($_ = isset($this->services['vich_uploader.storage']) ? $this->services['vich_uploader.storage'] : $this->get('vich_uploader.storage')) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->get('vich_uploader.upload_handler')) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.property_mapping_factory']) ? $this->services['vich_uploader.property_mapping_factory'] : $this->getVichUploader_PropertyMappingFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'vich_uploader.namer_base64' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\Base64Namer
     */
    protected function getVichUploader_NamerBase64Service()
    {
        return $this->services['vich_uploader.namer_base64'] = new \Vich\UploaderBundle\Naming\Base64Namer();
    }

    /**
     * Gets the public 'vich_uploader.namer_directory_property' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\PropertyDirectoryNamer
     */
    protected function getVichUploader_NamerDirectoryPropertyService()
    {
        return $this->services['vich_uploader.namer_directory_property'] = new \Vich\UploaderBundle\Naming\PropertyDirectoryNamer(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'vich_uploader.namer_hash' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\HashNamer
     */
    protected function getVichUploader_NamerHashService()
    {
        return $this->services['vich_uploader.namer_hash'] = new \Vich\UploaderBundle\Naming\HashNamer();
    }

    /**
     * Gets the public 'vich_uploader.namer_origname' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\OrignameNamer
     */
    protected function getVichUploader_NamerOrignameService()
    {
        return $this->services['vich_uploader.namer_origname'] = new \Vich\UploaderBundle\Naming\OrignameNamer();
    }

    /**
     * Gets the public 'vich_uploader.namer_property' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\PropertyNamer
     */
    protected function getVichUploader_NamerPropertyService()
    {
        return $this->services['vich_uploader.namer_property'] = new \Vich\UploaderBundle\Naming\PropertyNamer();
    }

    /**
     * Gets the public 'vich_uploader.namer_uniqid' shared service.
     *
     * @return \Vich\UploaderBundle\Naming\UniqidNamer
     */
    protected function getVichUploader_NamerUniqidService()
    {
        return $this->services['vich_uploader.namer_uniqid'] = new \Vich\UploaderBundle\Naming\UniqidNamer();
    }

    /**
     * Gets the public 'vich_uploader.storage' shared service.
     *
     * @return \Vich\UploaderBundle\Storage\FileSystemStorage
     */
    protected function getVichUploader_StorageService()
    {
        return $this->services['vich_uploader.storage'] = new \Vich\UploaderBundle\Storage\FileSystemStorage(${($_ = isset($this->services['vich_uploader.property_mapping_factory']) ? $this->services['vich_uploader.property_mapping_factory'] : $this->getVichUploader_PropertyMappingFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'vich_uploader.templating.helper.uploader_helper' shared service.
     *
     * @return \Vich\UploaderBundle\Templating\Helper\UploaderHelper
     */
    protected function getVichUploader_Templating_Helper_UploaderHelperService()
    {
        return $this->services['vich_uploader.templating.helper.uploader_helper'] = new \Vich\UploaderBundle\Templating\Helper\UploaderHelper(${($_ = isset($this->services['vich_uploader.storage']) ? $this->services['vich_uploader.storage'] : $this->get('vich_uploader.storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'vich_uploader.upload_handler' shared service.
     *
     * @return \Vich\UploaderBundle\Handler\UploadHandler
     */
    protected function getVichUploader_UploadHandlerService()
    {
        $a = ${($_ = isset($this->services['vich_uploader.storage']) ? $this->services['vich_uploader.storage'] : $this->get('vich_uploader.storage')) && false ?: '_'};

        return $this->services['vich_uploader.upload_handler'] = new \Vich\UploaderBundle\Handler\UploadHandler(${($_ = isset($this->services['vich_uploader.property_mapping_factory']) ? $this->services['vich_uploader.property_mapping_factory'] : $this->getVichUploader_PropertyMappingFactoryService()) && false ?: '_'}, $a, new \Vich\UploaderBundle\Injector\FileInjector($a), ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'video_player.entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    protected function getVideoPlayer_EntityManagerService()
    {
        return $this->services['video_player.entity_manager'] = new \Doctrine\ORM\EntityManager(NULL);
    }

    /**
     * Gets the public 'video_player.parser_service' shared service.
     *
     * @return \VideoPlayerBundle\Service\ParserService
     */
    protected function getVideoPlayer_ParserServiceService()
    {
        return $this->services['video_player.parser_service'] = new \VideoPlayerBundle\Service\ParserService();
    }

    /**
     * Gets the public 'video_player.twig.video_player_extension' shared service.
     *
     * @return \VideoPlayerBundle\Twig\VideoPlayerExtension
     */
    protected function getVideoPlayer_Twig_VideoPlayerExtensionService()
    {
        return $this->services['video_player.twig.video_player_extension'] = new \VideoPlayerBundle\Twig\VideoPlayerExtension(${($_ = isset($this->services['video_player.video_player_service']) ? $this->services['video_player.video_player_service'] : $this->get('video_player.video_player_service')) && false ?: '_'});
    }

    /**
     * Gets the public 'video_player.video_manager.default' shared service.
     *
     * @return \VideoPlayerBundle\Doctrine\VideoManager
     */
    protected function getVideoPlayer_VideoManager_DefaultService()
    {
        return $this->services['video_player.video_manager.default'] = new \VideoPlayerBundle\Doctrine\VideoManager('security.encoder_factory', 'video_player.entity_manager', 'VideoPlayerBundle\\Entity\\Video');
    }

    /**
     * Gets the public 'video_player.video_player_service' shared service.
     *
     * @return \VideoPlayerBundle\Service\VideoPlayerService
     */
    protected function getVideoPlayer_VideoPlayerServiceService()
    {
        return $this->services['video_player.video_player_service'] = new \VideoPlayerBundle\Service\VideoPlayerService();
    }

    /**
     * Gets the public 'web_profiler.controller.exception' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'web_profiler.controller.profiler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, array('data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.cache' => array(0 => 'cache', 1 => '@WebProfiler/Collector/cache.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => '@Security/Collector/security.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' => array(0 => 'dump', 1 => '@Debug/Profiler/dump.html.twig'), 'easyadmin.data_collector' => array(0 => 'easyadmin', 1 => '@EasyAdmin/data_collector/easyadmin.html.twig'), 'sonata.block.data_collector' => array(0 => 'block', 1 => '@SonataBlock/Profiler/block.html.twig'), 'data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig')), 'bottom', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'}, $this->targetDirs[3]);
    }

    /**
     * Gets the public 'web_profiler.controller.router' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'web_profiler.debug_toolbar' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, false, 2, 'bottom', ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, '^/(app(_[\\w]+)?\\.php/)?_wdt', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'youwe.file_manager.driver' shared service.
     *
     * @return \Youwe\FileManagerBundle\Driver\FileManagerDriver
     */
    protected function getYouwe_FileManager_DriverService()
    {
        return $this->services['youwe.file_manager.driver'] = new \Youwe\FileManagerBundle\Driver\FileManagerDriver($this);
    }

    /**
     * Gets the public 'youwe.file_manager.manager' shared service.
     *
     * @return \Youwe\FileManagerBundle\Model\FileManager
     */
    protected function getYouwe_FileManager_ManagerService()
    {
        return $this->services['youwe.file_manager.manager'] = new \Youwe\FileManagerBundle\Model\FileManager($this);
    }

    /**
     * Gets the public 'youwe.file_manager.service' shared service.
     *
     * @return \Youwe\FileManagerBundle\Services\FileManagerService
     */
    protected function getYouwe_FileManager_ServiceService()
    {
        return $this->services['youwe.file_manager.service'] = new \Youwe\FileManagerBundle\Services\FileManagerService($this);
    }

    /**
     * Gets the public 'youwe.twig.extension' shared service.
     *
     * @return \Youwe\FileManagerBundle\Twig\FileManagerExtension
     */
    protected function getYouwe_Twig_ExtensionService()
    {
        return $this->services['youwe.twig.extension'] = new \Youwe\FileManagerBundle\Twig\FileManagerExtension($this);
    }

    /**
     * Gets the private '1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' shared service.
     *
     * @return \Swift_Transport_Esmtp_Auth_CramMd5Authenticator
     */
    protected function get16a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()
    {
        return $this->services['1_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] = new \Swift_Transport_Esmtp_Auth_CramMd5Authenticator();
    }

    /**
     * Gets the private '1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker
     */
    protected function get1Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService()
    {
        return $this->services['1_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f'] = new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this);
    }

    /**
     * Gets the private '2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' shared service.
     *
     * @return \Swift_Transport_Esmtp_Auth_LoginAuthenticator
     */
    protected function get26a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()
    {
        return $this->services['2_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] = new \Swift_Transport_Esmtp_Auth_LoginAuthenticator();
    }

    /**
     * Gets the private '2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f' shared service.
     *
     * @return \Symfony\Component\Config\Resource\SelfCheckingResourceChecker
     */
    protected function get2Cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562fService()
    {
        return $this->services['2_cf6b848dd918ad8489c55179a831edc53e86a81dffb589cbd1393f7ddbe4562f'] = new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker();
    }

    /**
     * Gets the private '3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c' shared service.
     *
     * @return \Swift_Transport_Esmtp_Auth_PlainAuthenticator
     */
    protected function get36a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3cService()
    {
        return $this->services['3_6a50da3c957487361652c2ab61dd082ee218470cbc74011e7bdc9458c6490b3c'] = new \Swift_Transport_Esmtp_Auth_PlainAuthenticator();
    }

    /**
     * Gets the private 'AppBundle\Event\Listener\SitemapSubscriber' shared autowired service.
     *
     * @return \AppBundle\Event\Listener\SitemapSubscriber
     */
    protected function getAppBundle_Event_Listener_SitemapSubscriberService()
    {
        return $this->services['AppBundle\Event\Listener\SitemapSubscriber'] = new \AppBundle\Event\Listener\SitemapSubscriber(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the private 'VideoPlayerBundle.YourUploadListener' shared autowired service.
     *
     * @return \VideoPlayerBundle\EventListener\YourUploadListener
     */
    protected function getVideoPlayerBundle_YourUploadListenerService()
    {
        return $this->services['VideoPlayerBundle.YourUploadListener'] = new \VideoPlayerBundle\EventListener\YourUploadListener(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['php_ffmpeg.ffmpeg']) ? $this->services['php_ffmpeg.ffmpeg'] : $this->get('php_ffmpeg.ffmpeg')) && false ?: '_'});
    }

    /**
     * Gets the private 'annotations.cache' shared service.
     *
     * @return \Symfony\Component\Cache\DoctrineProvider
     */
    protected function getAnnotations_CacheService()
    {
        return $this->services['annotations.cache'] = new \Symfony\Component\Cache\DoctrineProvider(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create((__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $a = new \Doctrine\Common\Annotations\AnnotationRegistry();
        $a->registerUniqueLoader('class_exists');

        $this->services['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required', $a);

        return $instance;
    }

    /**
     * Gets the private 'app.sitemap.blog_post_subscriber' shared autowired service.
     *
     * @return \AppBundle\Event\Listener\SitemapSubscriber
     */
    protected function getApp_Sitemap_BlogPostSubscriberService()
    {
        return $this->services['app.sitemap.blog_post_subscriber'] = new \AppBundle\Event\Listener\SitemapSubscriber(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the private 'argument_resolver.default' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver
     */
    protected function getArgumentResolver_DefaultService()
    {
        return $this->services['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver
     */
    protected function getArgumentResolver_RequestService()
    {
        return $this->services['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request_attribute' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver
     */
    protected function getArgumentResolver_RequestAttributeService()
    {
        return $this->services['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver
     */
    protected function getArgumentResolver_ServiceService()
    {
        return $this->services['argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(new \Symfony\Component\DependencyInjection\ServiceLocator(array('AppBundle\\Controller\\AppMobileRegisterController:appmobileregisterAction' => function () {
            return ${($_ = isset($this->services['service_locator.552fd1ede5f2836c5944de264b796c06']) ? $this->services['service_locator.552fd1ede5f2836c5944de264b796c06'] : $this->getServiceLocator_552fd1ede5f2836c5944de264b796c06Service()) && false ?: '_'};
        }, 'AppBundle\\Controller\\ExempleController:showAction' => function () {
            return ${($_ = isset($this->services['service_locator.4307ff7f09475aed9ea8e29ba86cf217']) ? $this->services['service_locator.4307ff7f09475aed9ea8e29ba86cf217'] : $this->getServiceLocator_4307ff7f09475aed9ea8e29ba86cf217Service()) && false ?: '_'};
        }, 'AppBundle\\Controller\\AppMobileRegisterController::appmobileregisterAction' => function () {
            return ${($_ = isset($this->services['service_locator.552fd1ede5f2836c5944de264b796c06']) ? $this->services['service_locator.552fd1ede5f2836c5944de264b796c06'] : $this->getServiceLocator_552fd1ede5f2836c5944de264b796c06Service()) && false ?: '_'};
        }, 'AppBundle\\Controller\\ExempleController::showAction' => function () {
            return ${($_ = isset($this->services['service_locator.4307ff7f09475aed9ea8e29ba86cf217']) ? $this->services['service_locator.4307ff7f09475aed9ea8e29ba86cf217'] : $this->getServiceLocator_4307ff7f09475aed9ea8e29ba86cf217Service()) && false ?: '_'};
        })));
    }

    /**
     * Gets the private 'argument_resolver.session' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver
     */
    protected function getArgumentResolver_SessionService()
    {
        return $this->services['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.variadic' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver
     */
    protected function getArgumentResolver_VariadicService()
    {
        return $this->services['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver();
    }

    /**
     * Gets the private 'assetic.asset_factory' shared service.
     *
     * @return \Symfony\Bundle\AsseticBundle\Factory\AssetFactory
     */
    protected function getAssetic_AssetFactoryService()
    {
        $this->services['assetic.asset_factory'] = $instance = new \Symfony\Bundle\AsseticBundle\Factory\AssetFactory(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, $this, $this->getParameterBag(), ($this->targetDirs[3].'\\app/../web'), true);

        $instance->addWorker(new \Symfony\Bundle\AsseticBundle\Factory\Worker\UseControllerWorker());

        return $instance;
    }

    /**
     * Gets the private 'autowired.AppBundle\Entity\Exemple' shared autowired service.
     *
     * @return \AppBundle\Entity\Exemple
     */
    protected function getAutowired_AppBundle_Entity_ExempleService()
    {
        return $this->services['autowired.AppBundle\Entity\Exemple'] = new \AppBundle\Entity\Exemple();
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AnnotationsService()
    {
        return $this->services['cache.annotations'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.annotations.recorder_inner']) ? $this->services['cache.annotations.recorder_inner'] : $this->getCache_Annotations_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.annotations.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Annotations_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.annotations.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('st-DGpv3E4', 0, 'vjPRUJpqBVEUR3y2jRa0YM', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.app.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    public function getCache_App_RecorderInnerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['cache.app.recorder_inner'] = SymfonyComponentCacheAdapterFilesystemAdapter_00000000703f0fff00000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getCache_App_RecorderInnerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('U0ZtHrwYic', 0, (__DIR__.'/pools'));

        if ($this->has('monolog.logger.cache')) {
            $instance->setLogger(${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the private 'cache.serializer.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Serializer_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.serializer.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('hdpdnFKuhO', 0, 'vjPRUJpqBVEUR3y2jRa0YM', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.system.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_System_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.system.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('mdk-7mokWT', 0, 'vjPRUJpqBVEUR3y2jRa0YM', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_ValidatorService()
    {
        return $this->services['cache.validator'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.validator.recorder_inner']) ? $this->services['cache.validator.recorder_inner'] : $this->getCache_Validator_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Validator_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.validator.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('VwbebL0wQ3', 0, 'vjPRUJpqBVEUR3y2jRa0YM', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cmf_core.security.published_voter' shared service.
     *
     * @return \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishableVoter
     */
    protected function getCmfCore_Security_PublishedVoterService()
    {
        return $this->services['cmf_core.security.published_voter'] = new \Symfony\Cmf\Bundle\CoreBundle\PublishWorkflow\Voter\PublishableVoter($this);
    }

    /**
     * Gets the private 'console.error_listener' shared service.
     *
     * @return \Symfony\Component\Console\EventListener\ErrorListener
     */
    protected function getConsole_ErrorListenerService()
    {
        return $this->services['console.error_listener'] = new \Symfony\Component\Console\EventListener\ErrorListener(${($_ = isset($this->services['monolog.logger.console']) ? $this->services['monolog.logger.console'] : $this->get('monolog.logger.console', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'controller_name_converter' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the private 'debug.file_link_formatter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\FileLinkFormatter
     */
    protected function getDebug_FileLinkFormatterService()
    {
        return $this->services['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, $this->targetDirs[3], '/_profiler/open?file=%f&line=%l#line%l');
    }

    /**
     * Gets the private 'debug.log_processor' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Processor\DebugProcessor
     */
    protected function getDebug_LogProcessorService()
    {
        return $this->services['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor();
    }

    /**
     * Gets the private 'debug.security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager
     */
    protected function getDebug_Security_Access_DecisionManagerService()
    {
        return $this->services['debug.security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager(new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['security.access.authenticated_voter']) ? $this->services['security.access.authenticated_voter'] : $this->getSecurity_Access_AuthenticatedVoterService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['security.access.role_hierarchy_voter']) ? $this->services['security.access.role_hierarchy_voter'] : $this->getSecurity_Access_RoleHierarchyVoterService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['security.access.expression_voter']) ? $this->services['security.access.expression_voter'] : $this->getSecurity_Access_ExpressionVoterService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['cmf_core.security.published_voter']) ? $this->services['cmf_core.security.published_voter'] : $this->getCmfCore_Security_PublishedVoterService()) && false ?: '_'};
        }, 4), 'affirmative', false, true));
    }

    /**
     * Gets the private 'doctrine.dbal.logger' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Logger\DbalLogger
     */
    protected function getDoctrine_Dbal_LoggerService()
    {
        return $this->services['doctrine.dbal.logger'] = new \Symfony\Bridge\Doctrine\Logger\DbalLogger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'doctrine.dbal.logger.profiling.default' shared service.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the private 'doctrine.dbal.logger.profiling.mandantA' shared service.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack
     */
    protected function getDoctrine_Dbal_Logger_Profiling_MandantAService()
    {
        return $this->services['doctrine.dbal.logger.profiling.mandantA'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the private 'doctrine.dbal.logger.profiling.mandantB' shared service.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack
     */
    protected function getDoctrine_Dbal_Logger_Profiling_MandantBService()
    {
        return $this->services['doctrine.dbal.logger.profiling.mandantB'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the private 'doctrine.orm.container_repository_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory
     */
    protected function getDoctrine_Orm_ContainerRepositoryFactoryService()
    {
        return $this->services['doctrine.orm.container_repository_factory'] = new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array()));
    }

    /**
     * Gets the private 'doctrine.orm.default_entity_manager.delegate' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getDoctrine_Orm_DefaultEntityManager_DelegateService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.default_entity_manager.delegate'] = DoctrineORMEntityManager_00000000703f11cf00000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_DefaultEntityManager_DelegateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $b = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => ($this->targetDirs[3].'\\src\\AppBundle\\Entity'), 1 => ($this->targetDirs[3].'\\src\\redjanym\\fcm-bundle\\Entity'), 2 => ($this->targetDirs[3].'\\src\\filemanager-bundle\\Entity'), 3 => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle\\Entity'), 4 => ($this->targetDirs[3].'\\vendor\\arkounay\\block-bundle-i18n\\Arkounay\\BlockI18nBundle\\Entity'), 5 => ($this->targetDirs[3].'\\vendor\\artgris\\media-bundle\\Entity'), 6 => ($this->targetDirs[3].'\\src\\newsletter-bundle\\Entity')));

        $c = new \Doctrine\ORM\Mapping\Driver\SimplifiedYamlDriver(array(($this->targetDirs[3].'\\src\\video-player-bundle\\Resources\\config\\doctrine') => 'VideoPlayerBundle\\Entity', ($this->targetDirs[3].'\\src\\newsletters-bundle\\Resources\\config\\doctrine') => 'NewsletterBundle\\Entity'));
        $c->setGlobalBasename('mapping');

        $d = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(array(($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src\\Resources\\config\\doctrine') => 'Sonata\\MediaBundle\\Entity'));
        $d->setGlobalBasename('mapping');

        $e = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $e->addDriver($b, 'AppBundle\\Entity');
        $e->addDriver($b, 'FcmBundle\\Entity');
        $e->addDriver($b, 'FileManagerBundle\\Entity');
        $e->addDriver($b, 'Vich\\UploaderBundle\\Entity');
        $e->addDriver($b, 'Arkounay\\BlockI18nBundle\\Entity');
        $e->addDriver($b, 'Artgris\\Bundle\\MediaBundle\\Entity');
        $e->addDriver($b, 'NewslettersBundle\\Entity');
        $e->addDriver($c, 'VideoPlayerBundle\\Entity');
        $e->addDriver($c, 'NewsletterBundle\\Entity');
        $e->addDriver($d, 'Sonata\\MediaBundle\\Entity');
        $e->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle\\Resources\\config\\doctrine-mapping') => 'FOS\\UserBundle\\Model'), '.orm.xml')), 'FOS\\UserBundle\\Model');

        $f = new \Doctrine\ORM\Configuration();
        $f->setEntityNamespaces(array('AppBundle' => 'AppBundle\\Entity', 'RedjanYmFCMBundle' => 'FcmBundle\\Entity', 'FileManagerBundle' => 'FileManagerBundle\\Entity', 'VideoPlayerBundle' => 'VideoPlayerBundle\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity', 'ArkounayBlockI18nBundle' => 'Arkounay\\BlockI18nBundle\\Entity', 'ArtgrisMediaBundle' => 'Artgris\\Bundle\\MediaBundle\\Entity', 'SonataMediaBundle' => 'Sonata\\MediaBundle\\Entity', 'NewsletterBundle' => 'NewsletterBundle\\Entity', 'NewslettersBundle' => 'NewslettersBundle\\Entity'));
        $f->setMetadataCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache')) && false ?: '_'});
        $f->setQueryCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_query_cache')) && false ?: '_'});
        $f->setResultCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_result_cache')) && false ?: '_'});
        $f->setMetadataDriverImpl($e);
        $f->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $f->setProxyNamespace('Proxies');
        $f->setAutoGenerateProxyClasses(true);
        $f->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $f->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $f->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $f->setQuoteStrategy(${($_ = isset($this->services['doctrine.orm.quote_strategy.default']) ? $this->services['doctrine.orm.quote_strategy.default'] : $this->getDoctrine_Orm_QuoteStrategy_DefaultService()) && false ?: '_'});
        $f->setEntityListenerResolver(${($_ = isset($this->services['doctrine.orm.default_entity_listener_resolver']) ? $this->services['doctrine.orm.default_entity_listener_resolver'] : $this->get('doctrine.orm.default_entity_listener_resolver')) && false ?: '_'});
        $f->setRepositoryFactory(${($_ = isset($this->services['doctrine.orm.container_repository_factory']) ? $this->services['doctrine.orm.container_repository_factory'] : $this->getDoctrine_Orm_ContainerRepositoryFactoryService()) && false ?: '_'});

        $instance = \Doctrine\ORM\EntityManager::create(${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, $f);

        ${($_ = isset($this->services['doctrine.orm.default_manager_configurator']) ? $this->services['doctrine.orm.default_manager_configurator'] : $this->get('doctrine.orm.default_manager_configurator')) && false ?: '_'}->configure($instance);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.mandantA_entity_manager.delegate' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getDoctrine_Orm_MandantAEntityManager_DelegateService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.mandantA_entity_manager.delegate'] = DoctrineORMEntityManager_00000000703f1e8a00000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_MandantAEntityManager_DelegateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, array(0 => ($this->targetDirs[3].'\\src\\AppBundle\\Entity\\Newsletter'))), 'AppBundle\\Entity\\Newsletter');

        $b = new \Doctrine\ORM\Configuration();
        $b->setEntityNamespaces(array('ibrows_newsletter' => 'AppBundle\\Entity\\Newsletter'));
        $b->setMetadataCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantA_metadata_cache')) && false ?: '_'});
        $b->setQueryCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantA_query_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantA_query_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantA_query_cache')) && false ?: '_'});
        $b->setResultCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantA_result_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantA_result_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantA_result_cache')) && false ?: '_'});
        $b->setMetadataDriverImpl($a);
        $b->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $b->setProxyNamespace('Proxies');
        $b->setAutoGenerateProxyClasses(true);
        $b->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $b->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $b->setNamingStrategy(${($_ = isset($this->services['doctrine.orm.naming_strategy.default']) ? $this->services['doctrine.orm.naming_strategy.default'] : $this->getDoctrine_Orm_NamingStrategy_DefaultService()) && false ?: '_'});
        $b->setQuoteStrategy(${($_ = isset($this->services['doctrine.orm.quote_strategy.default']) ? $this->services['doctrine.orm.quote_strategy.default'] : $this->getDoctrine_Orm_QuoteStrategy_DefaultService()) && false ?: '_'});
        $b->setEntityListenerResolver(${($_ = isset($this->services['doctrine.orm.mandantA_entity_listener_resolver']) ? $this->services['doctrine.orm.mandantA_entity_listener_resolver'] : $this->get('doctrine.orm.mandantA_entity_listener_resolver')) && false ?: '_'});
        $b->setRepositoryFactory(${($_ = isset($this->services['doctrine.orm.container_repository_factory']) ? $this->services['doctrine.orm.container_repository_factory'] : $this->getDoctrine_Orm_ContainerRepositoryFactoryService()) && false ?: '_'});

        $instance = \Doctrine\ORM\EntityManager::create(${($_ = isset($this->services['doctrine.dbal.mandantA_connection']) ? $this->services['doctrine.dbal.mandantA_connection'] : $this->get('doctrine.dbal.mandantA_connection')) && false ?: '_'}, $b);

        ${($_ = isset($this->services['doctrine.orm.mandantA_manager_configurator']) ? $this->services['doctrine.orm.mandantA_manager_configurator'] : $this->get('doctrine.orm.mandantA_manager_configurator')) && false ?: '_'}->configure($instance);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.mandantB_entity_manager.delegate' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getDoctrine_Orm_MandantBEntityManager_DelegateService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.mandantB_entity_manager.delegate'] = DoctrineORMEntityManager_00000000703f1e8f00000000735bbd018e274c174209ffaa8e3e29eae032d474::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_MandantBEntityManager_DelegateService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $a->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, array(0 => ($this->targetDirs[3].'\\src\\AppBundle\\Entity\\Newsletter'))), 'AppBundle\\Entity\\Newsletter');

        $b = new \Doctrine\ORM\Configuration();
        $b->setEntityNamespaces(array('ibrows_newsletter' => 'AppBundle\\Entity\\Newsletter'));
        $b->setMetadataCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantB_metadata_cache')) && false ?: '_'});
        $b->setQueryCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantB_query_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantB_query_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantB_query_cache')) && false ?: '_'});
        $b->setResultCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.mandantB_result_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.mandantB_result_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.mandantB_result_cache')) && false ?: '_'});
        $b->setMetadataDriverImpl($a);
        $b->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $b->setProxyNamespace('Proxies');
        $b->setAutoGenerateProxyClasses(true);
        $b->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $b->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $b->setNamingStrategy(${($_ = isset($this->services['doctrine.orm.naming_strategy.default']) ? $this->services['doctrine.orm.naming_strategy.default'] : $this->getDoctrine_Orm_NamingStrategy_DefaultService()) && false ?: '_'});
        $b->setQuoteStrategy(${($_ = isset($this->services['doctrine.orm.quote_strategy.default']) ? $this->services['doctrine.orm.quote_strategy.default'] : $this->getDoctrine_Orm_QuoteStrategy_DefaultService()) && false ?: '_'});
        $b->setEntityListenerResolver(${($_ = isset($this->services['doctrine.orm.mandantB_entity_listener_resolver']) ? $this->services['doctrine.orm.mandantB_entity_listener_resolver'] : $this->get('doctrine.orm.mandantB_entity_listener_resolver')) && false ?: '_'});
        $b->setRepositoryFactory(${($_ = isset($this->services['doctrine.orm.container_repository_factory']) ? $this->services['doctrine.orm.container_repository_factory'] : $this->getDoctrine_Orm_ContainerRepositoryFactoryService()) && false ?: '_'});

        $instance = \Doctrine\ORM\EntityManager::create(${($_ = isset($this->services['doctrine.dbal.mandantB_connection']) ? $this->services['doctrine.dbal.mandantB_connection'] : $this->get('doctrine.dbal.mandantB_connection')) && false ?: '_'}, $b);

        ${($_ = isset($this->services['doctrine.orm.mandantB_manager_configurator']) ? $this->services['doctrine.orm.mandantB_manager_configurator'] : $this->get('doctrine.orm.mandantB_manager_configurator')) && false ?: '_'}->configure($instance);

        return $instance;
    }

    /**
     * Gets the private 'doctrine.orm.naming_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultNamingStrategy
     */
    protected function getDoctrine_Orm_NamingStrategy_DefaultService()
    {
        return $this->services['doctrine.orm.naming_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultNamingStrategy();
    }

    /**
     * Gets the private 'doctrine.orm.quote_strategy.default' shared service.
     *
     * @return \Doctrine\ORM\Mapping\DefaultQuoteStrategy
     */
    protected function getDoctrine_Orm_QuoteStrategy_DefaultService()
    {
        return $this->services['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy();
    }

    /**
     * Gets the private 'form.server_params' shared service.
     *
     * @return \Symfony\Component\Form\Util\ServerParams
     */
    protected function getForm_ServerParamsService()
    {
        return $this->services['form.server_params'] = new \Symfony\Component\Form\Util\ServerParams(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_user.user_listener' shared service.
     *
     * @return \FOS\UserBundle\Doctrine\UserListener
     */
    protected function getFosUser_UserListenerService()
    {
        return $this->services['fos_user.user_listener'] = new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->getFosUser_Util_PasswordUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_user.user_provider.username' shared service.
     *
     * @return \FOS\UserBundle\Security\UserProvider
     */
    protected function getFosUser_UserProvider_UsernameService()
    {
        return $this->services['fos_user.user_provider.username'] = new \FOS\UserBundle\Security\UserProvider(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_user.util.canonical_fields_updater' shared service.
     *
     * @return \FOS\UserBundle\Util\CanonicalFieldsUpdater
     */
    protected function getFosUser_Util_CanonicalFieldsUpdaterService()
    {
        $a = ${($_ = isset($this->services['fos_user.util.email_canonicalizer']) ? $this->services['fos_user.util.email_canonicalizer'] : $this->get('fos_user.util.email_canonicalizer')) && false ?: '_'};

        return $this->services['fos_user.util.canonical_fields_updater'] = new \FOS\UserBundle\Util\CanonicalFieldsUpdater($a, $a);
    }

    /**
     * Gets the private 'fos_user.util.password_updater' shared service.
     *
     * @return \FOS\UserBundle\Util\PasswordUpdater
     */
    protected function getFosUser_Util_PasswordUpdaterService()
    {
        return $this->services['fos_user.util.password_updater'] = new \FOS\UserBundle\Util\PasswordUpdater(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the private 'jms_di_extra.controller_resolver' shared service.
     *
     * @return \JMS\DiExtraBundle\HttpKernel\ControllerResolver
     */
    protected function getJmsDiExtra_ControllerResolverService()
    {
        return $this->services['jms_di_extra.controller_resolver'] = new \JMS\DiExtraBundle\HttpKernel\ControllerResolver($this, ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'jms_i18n_routing.route_exclusion_strategy' shared service.
     *
     * @return \JMS\I18nRoutingBundle\Router\DefaultRouteExclusionStrategy
     */
    protected function getJmsI18nRouting_RouteExclusionStrategyService()
    {
        return $this->services['jms_i18n_routing.route_exclusion_strategy'] = new \JMS\I18nRoutingBundle\Router\DefaultRouteExclusionStrategy();
    }

    /**
     * Gets the private 'jms_serializer.unserialize_object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the private 'knp.doctrine_behaviors.loggable_subscriber' shared service.
     *
     * @return \Knp\DoctrineBehaviors\ORM\Loggable\LoggableSubscriber
     */
    protected function getKnp_DoctrineBehaviors_LoggableSubscriberService()
    {
        return $this->services['knp.doctrine_behaviors.loggable_subscriber'] = new \Knp\DoctrineBehaviors\ORM\Loggable\LoggableSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.reflection.class_analyzer']) ? $this->services['knp.doctrine_behaviors.reflection.class_analyzer'] : $this->getKnp_DoctrineBehaviors_Reflection_ClassAnalyzerService()) && false ?: '_'}, true, new \Knp\DoctrineBehaviors\ORM\Loggable\LoggerCallable(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'}));
    }

    /**
     * Gets the private 'knp.doctrine_behaviors.reflection.class_analyzer' shared service.
     *
     * @return \Knp\DoctrineBehaviors\Reflection\ClassAnalyzer
     */
    protected function getKnp_DoctrineBehaviors_Reflection_ClassAnalyzerService()
    {
        return $this->services['knp.doctrine_behaviors.reflection.class_analyzer'] = new \Knp\DoctrineBehaviors\Reflection\ClassAnalyzer();
    }

    /**
     * Gets the private 'knp.doctrine_behaviors.sluggable_subscriber' shared service.
     *
     * @return \Knp\DoctrineBehaviors\ORM\Sluggable\SluggableSubscriber
     */
    protected function getKnp_DoctrineBehaviors_SluggableSubscriberService()
    {
        return $this->services['knp.doctrine_behaviors.sluggable_subscriber'] = new \Knp\DoctrineBehaviors\ORM\Sluggable\SluggableSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.reflection.class_analyzer']) ? $this->services['knp.doctrine_behaviors.reflection.class_analyzer'] : $this->getKnp_DoctrineBehaviors_Reflection_ClassAnalyzerService()) && false ?: '_'}, true, 'Knp\\DoctrineBehaviors\\Model\\Sluggable\\Sluggable');
    }

    /**
     * Gets the private 'knp.doctrine_behaviors.translatable_subscriber' shared service.
     *
     * @return \Knp\DoctrineBehaviors\ORM\Translatable\TranslatableSubscriber
     */
    protected function getKnp_DoctrineBehaviors_TranslatableSubscriberService()
    {
        return $this->services['knp.doctrine_behaviors.translatable_subscriber'] = new \Knp\DoctrineBehaviors\ORM\Translatable\TranslatableSubscriber(${($_ = isset($this->services['knp.doctrine_behaviors.reflection.class_analyzer']) ? $this->services['knp.doctrine_behaviors.reflection.class_analyzer'] : $this->getKnp_DoctrineBehaviors_Reflection_ClassAnalyzerService()) && false ?: '_'}, new \Knp\DoctrineBehaviors\ORM\Translatable\CurrentLocaleCallable($this), new \Knp\DoctrineBehaviors\ORM\Translatable\DefaultLocaleCallable('fr'), 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translatable', 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translation', 'LAZY', 'LAZY');
    }

    /**
     * Gets the private 'knp_menu.menu_provider.builder_alias' shared service.
     *
     * @return \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider
     */
    protected function getKnpMenu_MenuProvider_BuilderAliasService()
    {
        return $this->services['knp_menu.menu_provider.builder_alias'] = new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, $this, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the private 'knp_menu.menu_provider.lazy' shared service.
     *
     * @return \Knp\Menu\Provider\LazyProvider
     */
    protected function getKnpMenu_MenuProvider_LazyService()
    {
        return $this->services['knp_menu.menu_provider.lazy'] = new \Knp\Menu\Provider\LazyProvider(array());
    }

    /**
     * Gets the private 'resolve_controller_name_subscriber' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber
     */
    protected function getResolveControllerNameSubscriberService()
    {
        return $this->services['resolve_controller_name_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'});
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'symfony-easyadmin-heroku.herokuapp.com/', 'https', 80, 443);
    }

    /**
     * Gets the private 'security.access.authenticated_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter
     */
    protected function getSecurity_Access_AuthenticatedVoterService()
    {
        return $this->services['security.access.authenticated_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter(${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access.expression_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter
     */
    protected function getSecurity_Access_ExpressionVoterService()
    {
        return $this->services['security.access.expression_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access.role_hierarchy_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter
     */
    protected function getSecurity_Access_RoleHierarchyVoterService()
    {
        return $this->services['security.access.role_hierarchy_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter(${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->getSecurity_RoleHierarchyService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.authentication.manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['security.authentication.provider.dao.main']) ? $this->services['security.authentication.provider.dao.main'] : $this->getSecurity_Authentication_Provider_Dao_MainService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['security.authentication.provider.anonymous.main']) ? $this->services['security.authentication.provider.anonymous.main'] : $this->getSecurity_Authentication_Provider_Anonymous_MainService()) && false ?: '_'};
        }, 2), true);

        $instance->setEventDispatcher(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.main' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_MainService()
    {
        return $this->services['security.authentication.provider.anonymous.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5e9e57513a9c61.59950973');
    }

    /**
     * Gets the private 'security.authentication.provider.dao.main' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Dao_MainService()
    {
        return $this->services['security.authentication.provider.dao.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider(${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, 'main', ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, true);
    }

    /**
     * Gets the private 'security.authentication.session_strategy' shared service.
     *
     * @return \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy
     */
    protected function getSecurity_Authentication_SessionStrategyService()
    {
        return $this->services['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate');
    }

    /**
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the private 'security.csrf.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage
     */
    protected function getSecurity_Csrf_TokenStorageService()
    {
        return $this->services['security.csrf.token_storage'] = new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected function getSecurity_Firewall_MapService()
    {
        return $this->services['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap(new \Symfony\Component\DependencyInjection\ServiceLocator(array('security.firewall.map.context.dev' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.dev']) ? $this->services['security.firewall.map.context.dev'] : $this->get('security.firewall.map.context.dev')) && false ?: '_'};
        }, 'security.firewall.map.context.main' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.main']) ? $this->services['security.firewall.map.context.main'] : $this->get('security.firewall.map.context.main')) && false ?: '_'};
        })), new RewindableGenerator(function () {
            yield 'security.firewall.map.context.dev' => ${($_ = isset($this->services['security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d']) ? $this->services['security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d'] : $this->getSecurity_RequestMatcher_5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1dService()) && false ?: '_'};
            yield 'security.firewall.map.context.main' => ${($_ = isset($this->services['security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db']) ? $this->services['security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db'] : $this->getSecurity_RequestMatcher_A64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60dbService()) && false ?: '_'};
        }, 2));
    }

    /**
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->registerListener('main', '/logout', 'logout', '_csrf_token', NULL, NULL);

        return $instance;
    }

    /**
     * Gets the private 'security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1dService()
    {
        return $this->services['security.request_matcher.5314eeb91110adf24b9b678372bb11bbe00e8858c519c088bfb65f525181ad3bf573fd1d'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js)/');
    }

    /**
     * Gets the private 'security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_A64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60dbService()
    {
        return $this->services['security.request_matcher.a64d671f18e5575531d76c1d1154fdc4476cb8a79c02ed7a3469178c6d7b96b5ed4e60db'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/');
    }

    /**
     * Gets the private 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array('ROLE_ADMIN' => array(0 => 'ROLE_USER'), 'ROLE_SUPER_ADMIN' => array(0 => 'ROLE_ADMIN')));
    }

    /**
     * Gets the private 'security.user_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker
     */
    protected function getSecurity_UserCheckerService()
    {
        return $this->services['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /**
     * Gets the private 'security.user_value_resolver' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\SecurityUserValueResolver
     */
    protected function getSecurity_UserValueResolverService()
    {
        return $this->services['security.user_value_resolver'] = new \Symfony\Bundle\SecurityBundle\SecurityUserValueResolver(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});
    }

    /**
     * Gets the private 'service_locator.3368f0f4075960b08010e4ebdaedef01' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_3368f0f4075960b08010e4ebdaedef01Service()
    {
        return $this->services['service_locator.3368f0f4075960b08010e4ebdaedef01'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('esi' => function () {
            return ${($_ = isset($this->services['fragment.renderer.esi']) ? $this->services['fragment.renderer.esi'] : $this->get('fragment.renderer.esi')) && false ?: '_'};
        }, 'hinclude' => function () {
            return ${($_ = isset($this->services['fragment.renderer.hinclude']) ? $this->services['fragment.renderer.hinclude'] : $this->get('fragment.renderer.hinclude')) && false ?: '_'};
        }, 'inline' => function () {
            return ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'service_locator.4307ff7f09475aed9ea8e29ba86cf217' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_4307ff7f09475aed9ea8e29ba86cf217Service()
    {
        return $this->services['service_locator.4307ff7f09475aed9ea8e29ba86cf217'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('exemple' => function () {
            $f = function (\AppBundle\Entity\Exemple $v) { return $v; }; return $f(${($_ = isset($this->services['autowired.AppBundle\Entity\Exemple']) ? $this->services['autowired.AppBundle\Entity\Exemple'] : $this->getAutowired_AppBundle_Entity_ExempleService()) && false ?: '_'});
        }));
    }

    /**
     * Gets the private 'service_locator.552fd1ede5f2836c5944de264b796c06' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_552fd1ede5f2836c5944de264b796c06Service()
    {
        return $this->services['service_locator.552fd1ede5f2836c5944de264b796c06'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('mailer' => function () {
            return ${($_ = isset($this->services['swiftmailer.mailer.default']) ? $this->services['swiftmailer.mailer.default'] : $this->get('swiftmailer.mailer.default', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'session.storage.metadata_bag' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the private 'swiftmailer.mailer.default.transport.eventdispatcher' shared service.
     *
     * @return \Swift_Events_SimpleEventDispatcher
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the private 'swiftmailer.transport.replacementfactory' shared service.
     *
     * @return \Swift_StreamFilters_StringReplacementFilterFactory
     */
    protected function getSwiftmailer_Transport_ReplacementfactoryService()
    {
        return $this->services['swiftmailer.transport.replacementfactory'] = new \Swift_StreamFilters_StringReplacementFilterFactory();
    }

    /**
     * Gets the private 'templating.locator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, __DIR__);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected function getValidator_ValidatorFactoryService()
    {
        return $this->services['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Sonata\\CoreBundle\\Validator\\InlineValidator' => function () {
            return ${($_ = isset($this->services['sonata.core.validator.inline']) ? $this->services['sonata.core.validator.inline'] : $this->get('sonata.core.validator.inline')) && false ?: '_'};
        }, 'Sonata\\MediaBundle\\Validator\\FormatValidator' => function () {
            return ${($_ = isset($this->services['sonata.media.validator.format']) ? $this->services['sonata.media.validator.format'] : $this->get('sonata.media.validator.format')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => function () {
            return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->get('security.validator.user_password')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => function () {
            return ${($_ = isset($this->services['validator.email']) ? $this->services['validator.email'] : $this->get('validator.email')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        }, 'doctrine.orm.validator.unique' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'security.validator.user_password' => function () {
            return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->get('security.validator.user_password')) && false ?: '_'};
        }, 'sonata.core.validator.inline' => function () {
            return ${($_ = isset($this->services['sonata.core.validator.inline']) ? $this->services['sonata.core.validator.inline'] : $this->get('sonata.core.validator.inline')) && false ?: '_'};
        }, 'sonata.media.validator.format' => function () {
            return ${($_ = isset($this->services['sonata.media.validator.format']) ? $this->services['sonata.media.validator.format'] : $this->get('sonata.media.validator.format')) && false ?: '_'};
        }, 'validator.expression' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        })));
    }

    /**
     * Gets the private 'vich_uploader.adapter.orm' shared service.
     *
     * @return \Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter
     */
    protected function getVichUploader_Adapter_OrmService()
    {
        return $this->services['vich_uploader.adapter.orm'] = new \Vich\UploaderBundle\Adapter\ORM\DoctrineORMAdapter();
    }

    /**
     * Gets the private 'vich_uploader.listener.clean.exemple_images' shared service.
     *
     * @return \Vich\UploaderBundle\EventListener\Doctrine\CleanListener
     */
    protected function getVichUploader_Listener_Clean_ExempleImagesService()
    {
        return $this->services['vich_uploader.listener.clean.exemple_images'] = new \Vich\UploaderBundle\EventListener\Doctrine\CleanListener('exemple_images', ${($_ = isset($this->services['vich_uploader.adapter.orm']) ? $this->services['vich_uploader.adapter.orm'] : $this->getVichUploader_Adapter_OrmService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->getVichUploader_MetadataReaderService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->get('vich_uploader.upload_handler')) && false ?: '_'});
    }

    /**
     * Gets the private 'vich_uploader.listener.remove.exemple_images' shared service.
     *
     * @return \Vich\UploaderBundle\EventListener\Doctrine\RemoveListener
     */
    protected function getVichUploader_Listener_Remove_ExempleImagesService()
    {
        return $this->services['vich_uploader.listener.remove.exemple_images'] = new \Vich\UploaderBundle\EventListener\Doctrine\RemoveListener('exemple_images', ${($_ = isset($this->services['vich_uploader.adapter.orm']) ? $this->services['vich_uploader.adapter.orm'] : $this->getVichUploader_Adapter_OrmService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->getVichUploader_MetadataReaderService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->get('vich_uploader.upload_handler')) && false ?: '_'});
    }

    /**
     * Gets the private 'vich_uploader.listener.upload.exemple_images' shared service.
     *
     * @return \Vich\UploaderBundle\EventListener\Doctrine\UploadListener
     */
    protected function getVichUploader_Listener_Upload_ExempleImagesService()
    {
        return $this->services['vich_uploader.listener.upload.exemple_images'] = new \Vich\UploaderBundle\EventListener\Doctrine\UploadListener('exemple_images', ${($_ = isset($this->services['vich_uploader.adapter.orm']) ? $this->services['vich_uploader.adapter.orm'] : $this->getVichUploader_Adapter_OrmService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->getVichUploader_MetadataReaderService()) && false ?: '_'}, ${($_ = isset($this->services['vich_uploader.upload_handler']) ? $this->services['vich_uploader.upload_handler'] : $this->get('vich_uploader.upload_handler')) && false ?: '_'});
    }

    /**
     * Gets the private 'vich_uploader.metadata_reader' shared service.
     *
     * @return \Vich\UploaderBundle\Metadata\MetadataReader
     */
    protected function getVichUploader_MetadataReaderService()
    {
        $a = new \Metadata\Driver\FileLocator(array());

        $b = new \Metadata\MetadataFactory(new \Metadata\Driver\DriverChain(array(0 => new \Vich\UploaderBundle\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}), 1 => new \Vich\UploaderBundle\Metadata\Driver\YamlDriver($a), 2 => new \Vich\UploaderBundle\Metadata\Driver\XmlDriver($a))), 'Metadata\\ClassHierarchyMetadata', true);
        $b->setCache(new \Metadata\Cache\FileCache((__DIR__.'/vich_uploader')));

        return $this->services['vich_uploader.metadata_reader'] = new \Vich\UploaderBundle\Metadata\MetadataReader($b);
    }

    /**
     * Gets the private 'vich_uploader.property_mapping_factory' shared service.
     *
     * @return \Vich\UploaderBundle\Mapping\PropertyMappingFactory
     */
    protected function getVichUploader_PropertyMappingFactoryService()
    {
        return $this->services['vich_uploader.property_mapping_factory'] = new \Vich\UploaderBundle\Mapping\PropertyMappingFactory($this, ${($_ = isset($this->services['vich_uploader.metadata_reader']) ? $this->services['vich_uploader.metadata_reader'] : $this->getVichUploader_MetadataReaderService()) && false ?: '_'}, array('exemple_images' => array('uri_prefix' => '/web/uploads', 'upload_destination' => ($this->targetDirs[3].'\\app/../web/uploads'), 'namer' => array('service' => NULL, 'options' => NULL), 'directory_namer' => array('service' => NULL, 'options' => NULL), 'delete_on_remove' => true, 'delete_on_update' => true, 'inject_on_load' => false, 'db_driver' => 'orm')), '_name');
    }

    /**
     * Gets the private 'web_profiler.csp.handler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler
     */
    protected function getWebProfiler_Csp_HandlerService()
    {
        return $this->services['web_profiler.csp.handler'] = new \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler(new \Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator());
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = array(
        'kernel.root_dir' => false,
        'kernel.project_dir' => false,
        'kernel.logs_dir' => false,
        'kernel.bundles_metadata' => false,
        'session.save_path' => false,
        'vich_uploader.mappings' => false,
        'gregwar_image.web_dir' => false,
        'doctrine_migrations.dir_name' => false,
        'youwe_file_manager' => false,
        'assetic.read_from' => false,
        'assetic.write_to' => false,
        'newsletters.filesystem' => false,
        'newsletters.filesystem.block' => false,
        'newsletters.filesystem.block.directory' => false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
            case 'kernel.root_dir': $value = ($this->targetDirs[3].'\\app'); break;
            case 'kernel.project_dir': $value = $this->targetDirs[3]; break;
            case 'kernel.logs_dir': $value = ($this->targetDirs[2].'\\logs'); break;
            case 'kernel.bundles_metadata': $value = array(
                'FrameworkBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ),
                'SecurityBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\SecurityBundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ),
                'TwigBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\TwigBundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ),
                'MonologBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ),
                'SwiftmailerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\swiftmailer-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SwiftmailerBundle',
                ),
                'DoctrineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ),
                'SensioFrameworkExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\framework-extra-bundle'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ),
                'AppBundle' => array(
                    'parent' => 'FOSUserBundle',
                    'path' => ($this->targetDirs[3].'\\src\\AppBundle'),
                    'namespace' => 'AppBundle',
                ),
                'RedjanYmFCMBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\redjanym\\fcm-bundle'),
                    'namespace' => 'FcmBundle',
                ),
                'FileManagerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\filemanager-bundle'),
                    'namespace' => 'FileManagerBundle',
                ),
                'VideoPlayerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\video-player-bundle'),
                    'namespace' => 'VideoPlayerBundle',
                ),
                'EasyAdminBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\javiereguiluz\\easyadmin-bundle\\src'),
                    'namespace' => 'EasyCorp\\Bundle\\EasyAdminBundle',
                ),
                'FOSUserBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle'),
                    'namespace' => 'FOS\\UserBundle',
                ),
                'DoctrineBehaviorsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\doctrine-behaviors\\src\\Bundle'),
                    'namespace' => 'Knp\\DoctrineBehaviors\\Bundle',
                ),
                'JMSTranslationBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\translation-bundle\\JMS\\TranslationBundle'),
                    'namespace' => 'JMS\\TranslationBundle',
                ),
                'JMSDiExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\di-extra-bundle'),
                    'namespace' => 'JMS\\DiExtraBundle',
                ),
                'JMSAopBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\aop-bundle'),
                    'namespace' => 'JMS\\AopBundle',
                ),
                'JMSI18nRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\i18n-routing-bundle\\JMS\\I18nRoutingBundle'),
                    'namespace' => 'JMS\\I18nRoutingBundle',
                ),
                'A2lixTranslationFormBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\a2lix\\translation-form-bundle'),
                    'namespace' => 'A2lix\\TranslationFormBundle',
                ),
                'VichUploaderBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\vich\\uploader-bundle'),
                    'namespace' => 'Vich\\UploaderBundle',
                ),
                'ArkounayBlockI18nBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\arkounay\\block-bundle-i18n\\Arkounay\\BlockI18nBundle'),
                    'namespace' => 'Arkounay\\BlockI18nBundle',
                ),
                'GregwarImageBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\gregwar\\image-bundle'),
                    'namespace' => 'Gregwar\\ImageBundle',
                ),
                'ArtgrisMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\artgris\\media-bundle'),
                    'namespace' => 'Artgris\\Bundle\\MediaBundle',
                ),
                'StofDoctrineExtensionsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\stof\\doctrine-extensions-bundle'),
                    'namespace' => 'Stof\\DoctrineExtensionsBundle',
                ),
                'DoctrineMigrationsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ),
                'LexikFormFilterBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle'),
                    'namespace' => 'Lexik\\Bundle\\FormFilterBundle',
                ),
                'PetkoparaMultiSearchBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\petkopara\\multi-search-bundle'),
                    'namespace' => 'Petkopara\\MultiSearchBundle',
                ),
                'PetkoparaCrudGeneratorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\petkopara\\crud-generator-bundle'),
                    'namespace' => 'Petkopara\\CrudGeneratorBundle',
                ),
                'EkoFeedBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\eko\\feedbundle'),
                    'namespace' => 'Eko\\FeedBundle',
                ),
                'SocialPostBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\martin-georgiev\\social-post-bundle\\src\\MartinGeorgiev\\SocialPostBundle'),
                    'namespace' => 'MartinGeorgiev\\SocialPostBundle',
                ),
                'CmfMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony-cmf\\media-bundle'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\MediaBundle',
                ),
                'SonataMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src'),
                    'namespace' => 'Sonata\\MediaBundle',
                ),
                'SonataEasyExtendsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\easy-extends-bundle\\src'),
                    'namespace' => 'Sonata\\EasyExtendsBundle',
                ),
                'JMSSerializerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ),
                'YouweFileManagerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\youwe\\file-manager-bundle\\Youwe\\FileManagerBundle'),
                    'namespace' => 'Youwe\\FileManagerBundle',
                ),
                'AsseticBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\assetic-bundle'),
                    'namespace' => 'Symfony\\Bundle\\AsseticBundle',
                ),
                'FOSJsRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\jsrouting-bundle'),
                    'namespace' => 'FOS\\JsRoutingBundle',
                ),
                'NomayaSocialBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\nomaya\\social-bundle\\Nomaya\\SocialBundle'),
                    'namespace' => 'Nomaya\\SocialBundle',
                ),
                'PrestaSitemapBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\presta\\sitemap-bundle'),
                    'namespace' => 'Presta\\SitemapBundle',
                ),
                'SonataSeoBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\seo-bundle\\src'),
                    'namespace' => 'Sonata\\SeoBundle',
                ),
                'CmfSeoBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony-cmf\\seo-bundle\\src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\SeoBundle',
                ),
                'CmfCoreBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony-cmf\\core-bundle\\src'),
                    'namespace' => 'Symfony\\Cmf\\Bundle\\CoreBundle',
                ),
                'SonataCoreBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src'),
                    'namespace' => 'Sonata\\CoreBundle',
                ),
                'SonataBlockBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src'),
                    'namespace' => 'Sonata\\BlockBundle',
                ),
                'KnpMenuBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu-bundle\\src'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ),
                'BnbcUploadBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\bnbc\\upload-bundle\\Bnbc\\UploadBundle'),
                    'namespace' => 'Bnbc\\UploadBundle',
                ),
                'OneupUploaderBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\oneup\\uploader-bundle'),
                    'namespace' => 'Oneup\\UploaderBundle',
                ),
                'DubtureFFmpegBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\pulse00\\ffmpeg-bundle'),
                    'namespace' => 'Dubture\\FFmpegBundle',
                ),
                'PhpFFmpegBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\ffmpeg-bundle'),
                    'namespace' => 'FfmpegBundle',
                ),
                'NewsletterBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\newsletters-bundle'),
                    'namespace' => 'NewsletterBundle',
                ),
                'NewslettersBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\newsletter-bundle'),
                    'namespace' => 'NewslettersBundle',
                ),
                'StfalconTinymceBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\stfalcon\\tinymce-bundle\\Stfalcon\\Bundle\\TinymceBundle'),
                    'namespace' => 'Stfalcon\\Bundle\\TinymceBundle',
                ),
                'DebugBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\DebugBundle'),
                    'namespace' => 'Symfony\\Bundle\\DebugBundle',
                ),
                'WebProfilerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebProfilerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebProfilerBundle',
                ),
                'SensioDistributionBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\distribution-bundle'),
                    'namespace' => 'Sensio\\Bundle\\DistributionBundle',
                ),
                'SensioGeneratorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\generator-bundle'),
                    'namespace' => 'Sensio\\Bundle\\GeneratorBundle',
                ),
                'WebServerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebServerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebServerBundle',
                ),
                'DoctrineFixturesBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-fixtures-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\FixturesBundle',
                ),
            ); break;
            case 'session.save_path': $value = ($this->targetDirs[3].'\\app/../var/sessions/dev'); break;
            case 'vich_uploader.mappings': $value = array(
                'exemple_images' => array(
                    'uri_prefix' => '/web/uploads',
                    'upload_destination' => ($this->targetDirs[3].'\\app/../web/uploads'),
                    'namer' => array(
                        'service' => NULL,
                        'options' => NULL,
                    ),
                    'directory_namer' => array(
                        'service' => NULL,
                        'options' => NULL,
                    ),
                    'delete_on_remove' => true,
                    'delete_on_update' => true,
                    'inject_on_load' => false,
                    'db_driver' => 'orm',
                ),
            ); break;
            case 'gregwar_image.web_dir': $value = ($this->targetDirs[3].'\\app/../web'); break;
            case 'doctrine_migrations.dir_name': $value = ($this->targetDirs[3].'\\app/migrations'); break;
            case 'youwe_file_manager': $value = array(
                'upload_path' => ($this->targetDirs[3].'\\app/../web/uploads'),
                'full_exception' => false,
                'theme' => array(
                    'css' => '/bundles/youwefilemanager/css/simple/default.css',
                    'template' => 'YouweFileManagerBundle:FileManager:file_manager.html.twig',
                ),
                'mime_allowed' => array(
                    0 => 'image/png',
                    1 => 'image/jpg',
                    2 => 'image/jpeg',
                    3 => 'image/gif',
                    4 => 'application/pdf',
                    5 => 'application/ogg',
                    6 => 'video/mp4',
                    7 => 'application/zip',
                    8 => 'multipart/x-zip',
                    9 => 'application/rar',
                    10 => 'application/x-rar-compressed',
                    11 => 'application/x-zip-compressed',
                    12 => 'application/tar',
                    13 => 'application/x-tar',
                    14 => 'text/plain',
                    15 => 'text/x-asm',
                    16 => 'application/octet-stream',
                ),
                'filter_images' => false,
                'keep_original_extension' => false,
                'usage_class' => false,
                'magic_file' => ($this->targetDirs[3].'\\vendor\\youwe\\file-manager-bundle\\Youwe\\FileManagerBundle\\DependencyInjection/../Resources/magic/programming.magic'),
            ); break;
            case 'assetic.read_from': $value = ($this->targetDirs[3].'\\app/../web'); break;
            case 'assetic.write_to': $value = ($this->targetDirs[3].'\\app/../web'); break;
            case 'newsletters.filesystem': $value = array(
                'block' => array(
                    'directory' => ($this->targetDirs[3].'\\app/../web/uploads/block'),
                    'public' => '/uploads/block',
                    'host' => 'http://platform-media.herokuapp.com',
                ),
            ); break;
            case 'newsletters.filesystem.block': $value = array(
                'directory' => ($this->targetDirs[3].'\\app/../web/uploads/block'),
                'public' => '/uploads/block',
                'host' => 'http://platform-media.herokuapp.com',
            ); break;
            case 'newsletters.filesystem.block.directory': $value = ($this->targetDirs[3].'\\app/../web/uploads/block'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'AppBundle' => 'AppBundle\\AppBundle',
                'RedjanYmFCMBundle' => 'FcmBundle\\RedjanYmFCMBundle',
                'FileManagerBundle' => 'FileManagerBundle\\FileManagerBundle',
                'VideoPlayerBundle' => 'VideoPlayerBundle\\VideoPlayerBundle',
                'EasyAdminBundle' => 'EasyCorp\\Bundle\\EasyAdminBundle\\EasyAdminBundle',
                'FOSUserBundle' => 'FOS\\UserBundle\\FOSUserBundle',
                'DoctrineBehaviorsBundle' => 'Knp\\DoctrineBehaviors\\Bundle\\DoctrineBehaviorsBundle',
                'JMSTranslationBundle' => 'JMS\\TranslationBundle\\JMSTranslationBundle',
                'JMSDiExtraBundle' => 'JMS\\DiExtraBundle\\JMSDiExtraBundle',
                'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle',
                'JMSI18nRoutingBundle' => 'JMS\\I18nRoutingBundle\\JMSI18nRoutingBundle',
                'A2lixTranslationFormBundle' => 'A2lix\\TranslationFormBundle\\A2lixTranslationFormBundle',
                'VichUploaderBundle' => 'Vich\\UploaderBundle\\VichUploaderBundle',
                'ArkounayBlockI18nBundle' => 'Arkounay\\BlockI18nBundle\\ArkounayBlockI18nBundle',
                'GregwarImageBundle' => 'Gregwar\\ImageBundle\\GregwarImageBundle',
                'ArtgrisMediaBundle' => 'Artgris\\Bundle\\MediaBundle\\ArtgrisMediaBundle',
                'StofDoctrineExtensionsBundle' => 'Stof\\DoctrineExtensionsBundle\\StofDoctrineExtensionsBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'LexikFormFilterBundle' => 'Lexik\\Bundle\\FormFilterBundle\\LexikFormFilterBundle',
                'PetkoparaMultiSearchBundle' => 'Petkopara\\MultiSearchBundle\\PetkoparaMultiSearchBundle',
                'PetkoparaCrudGeneratorBundle' => 'Petkopara\\CrudGeneratorBundle\\PetkoparaCrudGeneratorBundle',
                'EkoFeedBundle' => 'Eko\\FeedBundle\\EkoFeedBundle',
                'SocialPostBundle' => 'MartinGeorgiev\\SocialPostBundle\\SocialPostBundle',
                'CmfMediaBundle' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\CmfMediaBundle',
                'SonataMediaBundle' => 'Sonata\\MediaBundle\\SonataMediaBundle',
                'SonataEasyExtendsBundle' => 'Sonata\\EasyExtendsBundle\\SonataEasyExtendsBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'YouweFileManagerBundle' => 'Youwe\\FileManagerBundle\\YouweFileManagerBundle',
                'AsseticBundle' => 'Symfony\\Bundle\\AsseticBundle\\AsseticBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'NomayaSocialBundle' => 'Nomaya\\SocialBundle\\NomayaSocialBundle',
                'PrestaSitemapBundle' => 'Presta\\SitemapBundle\\PrestaSitemapBundle',
                'SonataSeoBundle' => 'Sonata\\SeoBundle\\SonataSeoBundle',
                'CmfSeoBundle' => 'Symfony\\Cmf\\Bundle\\SeoBundle\\CmfSeoBundle',
                'CmfCoreBundle' => 'Symfony\\Cmf\\Bundle\\CoreBundle\\CmfCoreBundle',
                'SonataCoreBundle' => 'Sonata\\CoreBundle\\SonataCoreBundle',
                'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'BnbcUploadBundle' => 'Bnbc\\UploadBundle\\BnbcUploadBundle',
                'OneupUploaderBundle' => 'Oneup\\UploaderBundle\\OneupUploaderBundle',
                'DubtureFFmpegBundle' => 'Dubture\\FFmpegBundle\\DubtureFFmpegBundle',
                'PhpFFmpegBundle' => 'FfmpegBundle\\PhpFFmpegBundle',
                'NewsletterBundle' => 'NewsletterBundle\\NewsletterBundle',
                'NewslettersBundle' => 'NewslettersBundle\\NewslettersBundle',
                'StfalconTinymceBundle' => 'Stfalcon\\Bundle\\TinymceBundle\\StfalconTinymceBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
                'WebServerBundle' => 'Symfony\\Bundle\\WebServerBundle\\WebServerBundle',
                'DoctrineFixturesBundle' => 'Doctrine\\Bundle\\FixturesBundle\\DoctrineFixturesBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'database_host' => '127.0.0.1',
            'database_port' => 3306,
            'database_name' => 'easyadmin',
            'database_user' => 'root',
            'database_password' => 'root',
            'database_host_prod' => 'ec2-46-137-177-160.eu-west-1.compute.amazonaws.com',
            'database_port_prod' => 5432,
            'database_name_prod' => 'dc3o9u720sdqoj',
            'database_user_prod' => 'eptluorbexwymp',
            'database_password_prod' => '299df3bedc0a8b3992034c0c2831c60052760de78cb60925ca75a1029d88cc6a',
            'database_url' => NULL,
            'database_driver_mandanta' => 'pdo_mysql',
            'database_host_mandanta' => '127.0.0.1',
            'database_port_mandanta' => NULL,
            'database_name_mandanta' => 'newslettersandbox_mandanta',
            'database_user_mandanta' => 'root',
            'database_password_mandanta' => 'root',
            'database_driver_mandantb' => 'pdo_mysql',
            'database_host_mandantb' => '127.0.0.1',
            'database_port_mandantb' => NULL,
            'database_name_mandantb' => 'newslettersandbox_mandantb',
            'database_user_mandantb' => 'root',
            'database_password_mandantb' => 'root',
            'database_driver_mandanta_prod' => 'pdo_mysql',
            'database_host_mandanta_prod' => 'ec2-46-137-177-160.eu-west-1.compute.amazonaws.com',
            'database_port_mandanta_prod' => 5432,
            'database_name_mandanta_prod' => 'dhp35dtqj73u6',
            'database_user_mandanta_prod' => 'lgthuxxcimvxqr',
            'database_password_mandanta_prod' => '44d74579953aad76a9ead46bb88bfe5a5ace4f2b7a34079e811147272c1eab23',
            'database_driver_mandantb_prod' => 'pdo_mysql',
            'database_host_mandantb_prod' => 'ec2-46-137-177-160.eu-west-1.compute.amazonaws.com',
            'database_port_mandantb_prod' => 5432,
            'database_name_mandantb_prod' => 'd717inn7eq4qk1',
            'database_user_mandantb_prod' => 'gafrauzjzqxgag',
            'database_password_mandantb_prod' => '7b626d03d6de86b77f7050b82de5fdd706ad4528fd30baba7801684cd4a77a1f',
            'mailer_transport' => 'smtp',
            'mailer_encryption' => 'tls',
            'mailer_auth_mode' => 'plain',
            'mailer_host' => 'smtp.mailtrap.io',
            'mailer_user' => '03c76d39beae13',
            'mailer_password' => '33c4313a9c190f',
            'mailer_port' => 2525,
            'secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'router.request_context.host' => 'symfony-easyadmin-heroku.herokuapp.com/',
            'router.request_context.scheme' => 'https',
            'locale' => 'fr',
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.secret' => 'ThisTokenIsNotSoSecretChangeIt',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.default_locale' => 'fr',
            'templating.helper.code.file_link_format' => NULL,
            'debug.file_link_format' => NULL,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => array(
                'cookie_httponly' => true,
                'gc_probability' => 1,
            ),
            'session.metadata.update_threshold' => '0',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.cache.file' => (__DIR__.'/validation.php'),
            'validator.translation_domain' => 'validators',
            'translator.logging' => true,
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'debug.error_handler.throw_at' => -1,
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.options.matcher.cache_class' => 'appDevDebugProjectContainerUrlMatcher',
            'router.options.generator.cache_class' => 'appDevDebugProjectContainerUrlGenerator',
            'router.request_context.base_url' => '',
            'router.resource' => (__DIR__.'/assetic/routing.yml'),
            'router.cache_class_prefix' => 'appDevDebugProjectContainer',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.role_hierarchy.roles' => array(
                'ROLE_ADMIN' => array(
                    0 => 'ROLE_USER',
                ),
                'ROLE_SUPER_ADMIN' => array(
                    0 => 'ROLE_ADMIN',
                ),
            ),
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'twig.exception_listener.controller' => 'twig.controller.exception:showAction',
            'twig.form.resources' => array(
                0 => '@ArtgrisMedia/form/field_media.html.twig',
                1 => '@VichUploader/Form/fields.html.twig',
                2 => 'form_div_layout.html.twig',
                3 => 'BnbcUploadBundle:Form:fields.html.twig',
                4 => 'A2lixTranslationFormBundle::default.html.twig',
            ),
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.server_log' => NULL,
                'monolog.handler.console' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'event',
                        1 => 'doctrine',
                        2 => 'console',
                    ),
                ),
                'monolog.handler.main' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'event',
                    ),
                ),
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.transport.smtp.encryption' => 'tls',
            'swiftmailer.mailer.default.transport.smtp.port' => 2525,
            'swiftmailer.mailer.default.transport.smtp.host' => 'smtp.mailtrap.io',
            'swiftmailer.mailer.default.transport.smtp.username' => '03c76d39beae13',
            'swiftmailer.mailer.default.transport.smtp.password' => '33c4313a9c190f',
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => 'plain',
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.default.transport.smtp.local_domain' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.name' => 'smtp',
            'swiftmailer.mailer.defaultmailer.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.smtp.port' => 25,
            'swiftmailer.mailer.defaultmailer.transport.smtp.host' => 'localhost',
            'swiftmailer.mailer.defaultmailer.transport.smtp.username' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.smtp.password' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.defaultmailer.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.defaultmailer.transport.smtp.local_domain' => NULL,
            'swiftmailer.mailer.defaultmailer.spool.enabled' => false,
            'swiftmailer.mailer.defaultmailer.plugin.impersonate' => NULL,
            'swiftmailer.mailer.defaultmailer.single_address' => 'mail-to-dev-account-spool@your.domain.com',
            'swiftmailer.mailer.defaultmailer.delivery_addresses' => array(
                0 => 'mail-to-dev-account-spool@your.domain.com',
            ),
            'swiftmailer.mailer.defaultmailer.delivery_whitelist' => array(

            ),
            'swiftmailer.mailer.defaultmailer.delivery.enabled' => true,
            'swiftmailer.mailer.immediatemailer.transport.name' => 'smtp',
            'swiftmailer.mailer.immediatemailer.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.immediatemailer.transport.smtp.port' => 25,
            'swiftmailer.mailer.immediatemailer.transport.smtp.host' => 'localhost',
            'swiftmailer.mailer.immediatemailer.transport.smtp.username' => NULL,
            'swiftmailer.mailer.immediatemailer.transport.smtp.password' => NULL,
            'swiftmailer.mailer.immediatemailer.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.immediatemailer.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.immediatemailer.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.immediatemailer.transport.smtp.local_domain' => NULL,
            'swiftmailer.mailer.immediatemailer.spool.enabled' => false,
            'swiftmailer.mailer.immediatemailer.plugin.impersonate' => NULL,
            'swiftmailer.mailer.immediatemailer.single_address' => 'mail-to-dev-account-nospool@your.domain.com',
            'swiftmailer.mailer.immediatemailer.delivery_addresses' => array(
                0 => 'mail-to-dev-account-nospool@your.domain.com',
            ),
            'swiftmailer.mailer.immediatemailer.delivery_whitelist' => array(

            ),
            'swiftmailer.mailer.immediatemailer.delivery.enabled' => true,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
                'defaultMailer' => 'swiftmailer.mailer.defaultMailer',
                'immediateMailer' => 'swiftmailer.mailer.immediateMailer',
            ),
            'swiftmailer.default_mailer' => 'default',
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
                'mandantA' => 'doctrine.orm.mandantA_entity_manager',
                'mandantB' => 'doctrine.orm.mandantB_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(
                'media' => array(
                    'class' => 'Artgris\\Bundle\\MediaBundle\\Type\\MediaType',
                    'commented' => true,
                ),
                'media_collection' => array(
                    'class' => 'Artgris\\Bundle\\MediaBundle\\Type\\MediaCollectionType',
                    'commented' => true,
                ),
                'json' => array(
                    'class' => 'Sonata\\Doctrine\\Types\\JsonType',
                    'commented' => true,
                ),
                'nostreamblob' => array(
                    'class' => 'NewslettersBundle\\DBAL\\Types\\NoStreamBlobType',
                    'commented' => true,
                ),
            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
                'mandantA' => 'doctrine.dbal.mandantA_connection',
                'mandantB' => 'doctrine.dbal.mandantB_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerAwareEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'redjan_ym_fcm.firebase_api_key' => 'AIzaSyDz99I-m4VDKvM3P9l8wo5QieBxzwlu1hQ',
            'file_manager' => array(
                'web_dir' => 'uploads',
                'conf' => array(
                    'default' => array(
                        'dir' => '../web/uploads',
                        'view' => 'list',
                    ),
                ),
            ),
            'video_player.backend_type_orm' => true,
            'listener.storage' => 'orm',
            'video_player.model_manager_name' => NULL,
            'video_player.model.video.class' => 'VideoPlayerBundle\\Entity\\Video',
            'easyadmin.config' => array(
                'site_name' => 'Admin',
                'formats' => array(
                    'date' => 'd/m/Y',
                    'datetime' => 'd/m/Y H:i:s',
                    'time' => 'H:i',
                ),
                'list' => array(
                    'title' => '%entity_label%',
                    'actions' => array(
                        0 => array(
                            'name' => 'edit',
                            'icon' => 'pencil',
                        ),
                        1 => array(
                            'name' => 'delete',
                            'icon' => 'trash-o',
                        ),
                    ),
                    'max_results' => 15,
                ),
                'show' => array(
                    'title' => 'Éditer %entity_label% (#%entity_id%)',
                    'actions' => array(

                    ),
                    'max_results' => 10,
                ),
                'new' => array(
                    'title' => 'Créer %entity_label%',
                    'actions' => array(

                    ),
                ),
                'design' => array(
                    'form_theme' => array(
                        0 => '@EasyAdmin/form/bootstrap_3_horizontal_layout.html.twig',
                        1 => 'VichUploaderBundle:Form:fields.html.twig',
                        2 => 'admin/themes/jquery.collection.html.twig',
                    ),
                    'assets' => array(
                        'css' => array(
                            0 => 'admin/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css',
                            1 => 'admin/css/admin.css',
                            2 => 'bundles/artgrismedia/css/media.css',
                            3 => 'bundles/filemanager/libs/blueimp-file-upload/css/jquery.fileupload.css',
                        ),
                        'js' => array(
                            0 => 'admin/plugins/tinymce/tinymce.min.js',
                            1 => 'admin/plugins/tinymce/jquery.tinymce.min.js',
                            2 => 'admin/plugins/jquery-ui-1.12.1/jquery-ui.js',
                            3 => 'admin/plugins/moment-with-locales.js',
                            4 => 'admin/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js',
                            5 => 'admin/plugins/symfony-collection-2.0.4/jquery.collection.js',
                            6 => 'admin/js/admin.js',
                        ),
                        'favicon' => array(
                            'path' => '/favicon.ico',
                            'mime_type' => 'image/x-icon',
                        ),
                    ),
                    'menu' => array(
                        0 => array(
                            'label' => 'menu.dashboard',
                            'route' => 'admin_dashboard',
                            'icon' => 'dashboard',
                            'default' => true,
                        ),
                        1 => array(
                            'label' => 'menu.user',
                            'icon' => 'users',
                            'entity' => 'User',
                            'role' => 'ROLE_SUPER_ADMIN',
                        ),
                        2 => array(
                            'label' => 'GcmUser',
                            'icon' => 'users',
                            'entity' => 'GcmUser',
                        ),
                        3 => array(
                            'label' => 'Videos',
                            'icon' => 'play',
                            'entity' => 'Video',
                        ),
                        4 => array(
                            'label' => 'YouTubePlayList',
                            'icon' => 'list',
                            'entity' => 'PlayListYouTube',
                        ),
                        5 => array(
                            'label' => 'YouTubeInfos',
                            'icon' => 'youtube',
                            'entity' => 'YouTubeInfos',
                        ),
                        6 => array(
                            'label' => 'YouTubeAnalytics',
                            'icon' => 'youtube',
                            'entity' => 'YouTubeAnalytics',
                        ),
                        7 => array(
                            'label' => 'Newsletter',
                            'route' => 'newsletters_admin',
                            'icon' => 'square-o',
                        ),
                        8 => array(
                            'label' => 'DownloadFileCounter',
                            'icon' => 'download',
                            'entity' => 'DownloadFileCounter',
                        ),
                        9 => array(
                            'label' => 'FootballAPI',
                            'icon' => 'flag',
                            'entity' => 'FootballAPI',
                        ),
                        10 => array(
                            'label' => 'menu.settings',
                            'icon' => 'wrench',
                            'children' => array(
                                0 => array(
                                    'label' => 'menu.cc',
                                    'route' => 'admin_tools_cc',
                                    'icon' => 'eraser',
                                    'role' => 'ROLE_SUPER_ADMIN',
                                ),
                                1 => array(
                                    'label' => 'menu.dsv',
                                    'route' => 'admin_tools_checkdatabase',
                                    'icon' => 'database',
                                    'role' => 'ROLE_SUPER_ADMIN',
                                ),
                                2 => array(
                                    'label' => 'menu.translate',
                                    'route' => 'jms_translation_index',
                                    'icon' => 'flag',
                                    'role' => 'ROLE_SUPER_ADMIN',
                                ),
                                3 => array(
                                    'label' => 'menu.manager',
                                    'route' => 'admin_tools_manager',
                                    'icon' => 'upload',
                                ),
                            ),
                        ),
                        11 => array(
                            'label' => 'Blocs',
                            'icon' => 'square-o',
                            'role' => 'ROLE_SUPER_ADMIN',
                            'children' => array(
                                0 => array(
                                    'label' => 'menu.bloc.text',
                                    'entity' => 'PageBlock',
                                ),
                            ),
                        ),
                        12 => array(
                            'label' => 'Exemple',
                            'entity' => 'Exemple',
                            'icon' => 'terminal',
                        ),
                    ),
                    'theme' => 'default',
                    'color_scheme' => 'dark',
                    'brand_color' => '#205081',
                ),
                'entities' => array(
                    'PageBlock' => array(
                        'label' => 'Bloc de texte',
                        'class' => 'Arkounay\\BlockI18nBundle\\Entity\\PageBlock',
                        'list' => array(
                            'fields' => array(
                                0 => 'id',
                            ),
                            'actions' => array(
                                0 => array(
                                    'name' => 'new',
                                    'label' => 'Créer un bloc',
                                ),
                            ),
                        ),
                        'edit' => array(
                            'fields' => array(
                                0 => '-id',
                            ),
                            'title' => 'Editer un bloc',
                        ),
                        'form' => array(
                            'title' => 'Créer un bloc',
                            'fields' => array(
                                0 => 'id',
                                1 => array(
                                    'property' => 'translations',
                                    'label' => 'Traductions',
                                    'type' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType',
                                    'type_options' => array(
                                        'fields' => array(
                                            'content' => array(
                                                'label' => 'Description',
                                                'attr' => array(
                                                    'class' => 'tinymce',
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                        'name' => 'PageBlock',
                    ),
                    'Exemple' => array(
                        'label' => 'Entité exemple',
                        'class' => 'AppBundle\\Entity\\Exemple',
                        'list' => array(
                            'actions' => array(
                                0 => array(
                                    'name' => 'admin_move_up',
                                    'icon' => 'arrow-up',
                                    'label' => '',
                                    'type' => 'route',
                                ),
                                1 => array(
                                    'name' => 'admin_move_down',
                                    'icon' => 'arrow-down',
                                    'label' => '',
                                    'type' => 'route',
                                ),
                            ),
                            'fields' => array(
                                0 => array(
                                    'property' => 'media',
                                    'template' => ':admin/_fields:field_media.html.twig',
                                    'type_options' => array(
                                        'conf' => 'default',
                                    ),
                                ),
                                1 => array(
                                    'property' => 'mediaCollection',
                                    'template' => ':admin/_fields:field_media_collection.html.twig',
                                    'type_options' => array(
                                        'conf' => 'default',
                                    ),
                                ),
                                2 => array(
                                    'property' => 'position',
                                ),
                            ),
                            'sort' => array(
                                0 => 'position',
                                1 => 'ASC',
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'imageFile',
                                    'type' => 'file',
                                ),
                                1 => array(
                                    'property' => 'media',
                                    'type' => 'Artgris\\Bundle\\MediaBundle\\Form\\Type\\MediaType',
                                    'type_options' => array(
                                        'conf' => 'default',
                                    ),
                                ),
                                2 => array(
                                    'property' => 'mediaCollection',
                                    'type' => 'Artgris\\Bundle\\MediaBundle\\Form\\Type\\MediaCollectionType',
                                    'type_options' => array(
                                        'allow_add' => true,
                                        'conf' => 'default',
                                    ),
                                ),
                                3 => array(
                                    'property' => 'date',
                                    'type' => 'date',
                                    'type_options' => array(
                                        'widget' => 'single_text',
                                        'html5' => false,
                                        'attr' => array(
                                            'class' => 'datepicker',
                                        ),
                                        'format' => 'dd/MM/yyyy',
                                        'required' => false,
                                    ),
                                ),
                                4 => array(
                                    'property' => 'translations',
                                    'label' => 'Traductions',
                                    'type' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType',
                                    'type_options' => array(
                                        'fields' => array(
                                            'title' => array(
                                                'label' => 'Titre',
                                            ),
                                            'content' => array(
                                                'label' => 'Contenu',
                                                'attr' => array(
                                                    'class' => 'tinymce',
                                                ),
                                            ),
                                        ),
                                    ),
                                ),
                            ),
                        ),
                        'show' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'image',
                                    'type' => 'image',
                                    'base_path' => '/web/uploads',
                                ),
                            ),
                        ),
                        'name' => 'Exemple',
                    ),
                    'DownloadFileCounter' => array(
                        'disabled_actions' => array(
                            0 => 'edit',
                            1 => 'delete',
                            2 => 'new',
                        ),
                        'label' => 'DownloadFileCounter',
                        'class' => 'FileManagerBundle\\Entity\\DownloadFileCounter',
                        'list' => array(
                            'fields' => array(
                                0 => 'filename',
                                1 => array(
                                    'property' => 'download_counter',
                                    'type' => 'integer',
                                ),
                            ),
                        ),
                        'edit' => array(
                            'fields' => array(
                                0 => 'filename',
                                1 => array(
                                    'property' => 'download_counter',
                                    'type' => 'integer',
                                ),
                            ),
                        ),
                        'name' => 'DownloadFileCounter',
                    ),
                    'FootballAPI' => array(
                        'disabled_actions' => array(
                            0 => 'delete',
                        ),
                        'label' => 'FootballAPI',
                        'class' => 'AppBundle\\Entity\\FootballAPI',
                        'list' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'championnat_favori',
                                    'template' => 'admin/_fields/field_role.html.twig',
                                    'label_colors' => array(
                                        'Ligue 1' => 'primary',
                                        'BundesLiga' => 'primary',
                                        'Liga' => 'primary',
                                        'Premier League' => 'primary',
                                    ),
                                ),
                                1 => array(
                                    'property' => 'joueur_favori',
                                    'template' => 'admin/_fields/field_role.html.twig',
                                    'label_colors' => array(
                                        'Lionel Messi' => 'primary',
                                        'Karim Benzema' => 'primary',
                                        'Kylian Mbappé' => 'primary',
                                    ),
                                ),
                                2 => array(
                                    'property' => 'club_favori',
                                    'template' => 'admin/_fields/field_role.html.twig',
                                    'label_colors' => array(
                                        'Real-Madrid' => 'primary',
                                        'Barcelone' => 'primary',
                                        'Chelsea' => 'primary',
                                    ),
                                ),
                                3 => 'username',
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'championnat_favori',
                                    'type' => 'choice',
                                    'type_options' => array(
                                        'multiple' => true,
                                        'attr' => array(
                                            'data-widget' => 'select2',
                                        ),
                                        'choices' => array(
                                            'Ligue 1' => 'Ligue 1',
                                            'BundesLiga' => 'BundesLiga',
                                            'Liga' => 'Liga',
                                            'Premier League' => 'Premier League',
                                        ),
                                    ),
                                ),
                                1 => array(
                                    'property' => 'joueur_favori',
                                    'type' => 'choice',
                                    'type_options' => array(
                                        'multiple' => true,
                                        'attr' => array(
                                            'data-widget' => 'select2',
                                        ),
                                        'choices' => array(
                                            'Lionel Messi' => 'Lionel Messi',
                                            'Karim Benzema' => 'Karim Benzema',
                                            'Kylian Mbappé' => 'Kylian Mbappé',
                                        ),
                                    ),
                                ),
                                2 => array(
                                    'property' => 'club_favori',
                                    'type' => 'choice',
                                    'type_options' => array(
                                        'multiple' => true,
                                        'attr' => array(
                                            'data-widget' => 'select2',
                                        ),
                                        'choices' => array(
                                            'Real-Madrid' => 'Real-Madrid',
                                            'Barcelone' => 'Barcelone',
                                            'Chelsea' => 'Chelsea',
                                        ),
                                    ),
                                ),
                                3 => 'username',
                            ),
                        ),
                        'name' => 'FootballAPI',
                    ),
                    'GcmUser' => array(
                        'disabled_actions' => array(
                            0 => 'delete',
                            1 => 'edit',
                            2 => 'new',
                        ),
                        'label' => 'GcmUser',
                        'class' => 'AppBundle\\Entity\\GcmUser',
                        'list' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'username',
                                    'type' => 'text',
                                ),
                                1 => array(
                                    'property' => 'token',
                                    'type' => 'text',
                                ),
                                2 => array(
                                    'property' => 'enabled',
                                    'type' => 'toggle',
                                ),
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'username',
                                1 => 'token',
                                2 => 'enabled',
                            ),
                        ),
                        'name' => 'GcmUser',
                    ),
                    'Newsletter' => array(
                        'label' => 'Newsletter',
                        'class' => 'AppBundle\\Entity\\Newsletter\\Design',
                        'list' => array(
                            'fields' => array(
                                0 => 'id',
                                1 => 'name',
                                2 => 'content',
                            ),
                        ),
                        'edit' => array(
                            'fields' => array(
                                0 => 'id',
                                1 => 'name',
                                2 => 'content',
                            ),
                        ),
                        'name' => 'Newsletter',
                    ),
                    'User' => array(
                        'label' => 'User',
                        'controller' => 'AppBundle\\Controller\\Admin\\UserController',
                        'class' => 'AppBundle\\Entity\\User',
                        'list' => array(
                            'fields' => array(
                                0 => 'username',
                                1 => array(
                                    'property' => 'email',
                                    'type' => 'email',
                                ),
                                2 => array(
                                    'property' => 'enabled',
                                    'sortable' => false,
                                ),
                                3 => 'lastLogin',
                                4 => array(
                                    'property' => 'roles',
                                    'template' => 'admin/_fields/field_role.html.twig',
                                    'label_colors' => array(
                                        'ROLE_SUPER_ADMIN' => 'danger',
                                        'ROLE_ADMIN' => 'warning',
                                        'ROLE_USER' => 'primary',
                                    ),
                                ),
                                5 => 'fbid',
                                6 => 'mandant',
                            ),
                            'sort' => 'lastLogin',
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'username',
                                1 => 'email',
                                2 => 'enabled',
                                3 => array(
                                    'property' => 'plainPassword',
                                    'type' => 'text',
                                ),
                                4 => array(
                                    'property' => 'roles',
                                    'type' => 'choice',
                                    'type_options' => array(
                                        'multiple' => true,
                                        'attr' => array(
                                            'data-widget' => 'select2',
                                        ),
                                        'choices' => array(
                                            'ROLE_USER' => 'ROLE_USER',
                                            'ROLE_ADMIN' => 'ROLE_ADMIN',
                                            'ROLE_SUPER_ADMIN' => 'ROLE_SUPER_ADMIN',
                                        ),
                                    ),
                                ),
                                5 => 'fbid',
                                6 => 'mandant',
                            ),
                        ),
                        'edit' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'plainPassword',
                                    'type_options' => array(
                                        'required' => false,
                                    ),
                                ),
                            ),
                            'form_options' => array(
                                'validation_groups' => array(
                                    0 => 'Profile',
                                ),
                            ),
                        ),
                        'new' => array(
                            'fields' => array(
                                0 => array(
                                    'property' => 'plainPassword',
                                    'type_options' => array(
                                        'required' => true,
                                    ),
                                ),
                            ),
                            'form_options' => array(
                                'validation_groups' => array(
                                    0 => 'Registration',
                                ),
                            ),
                        ),
                        'name' => 'User',
                    ),
                    'Video' => array(
                        'disabled_actions' => array(
                            0 => 'edit',
                            1 => 'new',
                            2 => 'delete',
                        ),
                        'label' => 'Video',
                        'class' => 'VideoPlayerBundle\\Entity\\MainVideo',
                        'list' => array(
                            'fields' => array(
                                0 => 'title',
                                1 => 'video_url',
                                2 => array(
                                    'property' => 'thumb',
                                    'type' => 'image',
                                ),
                                3 => 'description',
                                4 => array(
                                    'property' => 'enabled',
                                    'type' => 'toggle',
                                ),
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'title',
                                1 => 'video_url',
                                2 => array(
                                    'property' => 'thumb',
                                    'type' => 'image',
                                ),
                                3 => 'description',
                                4 => array(
                                    'property' => 'enabled',
                                    'type' => 'toggle',
                                ),
                            ),
                        ),
                        'name' => 'Video',
                    ),
                    'YouTubeAnalytics' => array(
                        'disabled_actions' => array(
                            0 => 'edit',
                            1 => 'new',
                            2 => 'delete',
                        ),
                        'label' => 'YouTubeAnalytics',
                        'class' => 'VideoPlayerBundle\\Entity\\YouTubeAnalytics',
                        'list' => array(
                            'actions' => array(
                                0 => 'export',
                            ),
                            'fields' => array(
                                0 => 'day',
                                1 => 'views',
                                2 => 'estimated_minutes_watched',
                                3 => 'average_view_duration',
                                4 => 'average_view_percentage',
                                5 => 'subscribers_gained',
                                6 => 'likes',
                                7 => 'dislikes',
                                8 => 'shares',
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'day',
                                1 => 'views',
                                2 => 'estimated_minutes_watched',
                                3 => 'average_view_duration',
                                4 => 'average_view_percentage',
                                5 => 'subscribers_gained',
                                6 => 'likes',
                                7 => 'dislikes',
                                8 => 'shares',
                            ),
                        ),
                        'name' => 'YouTubeAnalytics',
                    ),
                    'YouTubeInfos' => array(
                        'disabled_actions' => array(
                            0 => 'delete',
                            1 => 'edit',
                            2 => 'new',
                        ),
                        'label' => 'YouTubeInfos',
                        'class' => 'VideoPlayerBundle\\Entity\\YouTubeInfos',
                        'list' => array(
                            'fields' => array(
                                0 => 'idyoutube',
                                1 => 'titleyoutube',
                                2 => 'subscribercount',
                                3 => 'viewcount',
                                4 => 'videocount',
                                5 => 'channeldescription',
                                6 => 'customurl',
                                7 => 'username',
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'idyoutube',
                                1 => 'titleyoutube',
                                2 => 'subscribercount',
                                3 => 'viewcount',
                                4 => 'videocount',
                                5 => 'channeldescription',
                                6 => 'customurl',
                                7 => 'username',
                            ),
                        ),
                        'name' => 'YouTubeInfos',
                    ),
                    'PlayListYouTube' => array(
                        'disabled_actions' => array(
                            0 => 'delete',
                            1 => 'edit',
                            2 => 'new',
                        ),
                        'label' => 'YouTubePlayList',
                        'class' => 'VideoPlayerBundle\\Entity\\PlayListYouTube',
                        'list' => array(
                            'fields' => array(
                                0 => 'playlisttitle',
                                1 => array(
                                    'property' => 'playlistthumbnails',
                                    'type' => 'image',
                                ),
                                2 => array(
                                    'property' => 'enabled',
                                    'type' => 'toggle',
                                ),
                            ),
                        ),
                        'form' => array(
                            'fields' => array(
                                0 => 'playlisttitle',
                                1 => array(
                                    'property' => 'playlistthumbnails',
                                    'type' => 'image',
                                ),
                                2 => array(
                                    'property' => 'enabled',
                                    'type' => 'toggle',
                                ),
                            ),
                        ),
                        'name' => 'PlayListYouTube',
                    ),
                ),
                'disabled_actions' => array(

                ),
                'translation_domain' => 'messages',
                'search' => array(

                ),
                'edit' => array(
                    'actions' => array(

                    ),
                ),
            ),
            'easyadmin.cache.dir' => (__DIR__.'/easy_admin'),
            'fos_user.backend_type_orm' => true,
            'fos_user.security.interactive_login_listener.class' => 'FOS\\UserBundle\\EventListener\\LastLoginListener',
            'fos_user.security.login_manager.class' => 'FOS\\UserBundle\\Security\\LoginManager',
            'fos_user.resetting.email.template' => '@FOSUser/Resetting/email.txt.twig',
            'fos_user.registration.confirmation.template' => '@FOSUser/Registration/email.txt.twig',
            'fos_user.storage' => 'orm',
            'fos_user.firewall_name' => 'main',
            'fos_user.model_manager_name' => NULL,
            'fos_user.model.user.class' => 'AppBundle\\Entity\\User',
            'fos_user.profile.form.type' => 'FOS\\UserBundle\\Form\\Type\\ProfileFormType',
            'fos_user.profile.form.name' => 'fos_user_profile_form',
            'fos_user.profile.form.validation_groups' => array(
                0 => 'Profile',
                1 => 'Default',
            ),
            'fos_user.registration.confirmation.from_email' => array(
                '84f33334a1-05e91d@inbox.mailtrap.io' => 'Admin Vertin Go Website',
            ),
            'fos_user.registration.confirmation.enabled' => true,
            'fos_user.registration.form.type' => 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType',
            'fos_user.registration.form.name' => 'fos_user_registration_form',
            'fos_user.registration.form.validation_groups' => array(
                0 => 'Registration',
                1 => 'Default',
            ),
            'fos_user.change_password.form.type' => 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType',
            'fos_user.change_password.form.name' => 'fos_user_change_password_form',
            'fos_user.change_password.form.validation_groups' => array(
                0 => 'ChangePassword',
                1 => 'Default',
            ),
            'fos_user.resetting.email.from_email' => array(
                'admin@vertin-go.com' => 'Admin',
            ),
            'fos_user.resetting.retry_ttl' => 7200,
            'fos_user.resetting.token_ttl' => 86400,
            'fos_user.resetting.form.type' => 'FOS\\UserBundle\\Form\\Type\\ResettingFormType',
            'fos_user.resetting.form.name' => 'fos_user_resetting_form',
            'fos_user.resetting.form.validation_groups' => array(
                0 => 'ResetPassword',
                1 => 'Default',
            ),
            'knp.doctrine_behaviors.reflection.class_analyzer.class' => 'Knp\\DoctrineBehaviors\\Reflection\\ClassAnalyzer',
            'knp.doctrine_behaviors.reflection.is_recursive' => true,
            'knp.doctrine_behaviors.translatable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\TranslatableSubscriber',
            'knp.doctrine_behaviors.translatable_subscriber.current_locale_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\CurrentLocaleCallable',
            'knp.doctrine_behaviors.translatable_subscriber.default_locale_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Translatable\\DefaultLocaleCallable',
            'knp.doctrine_behaviors.translatable_subscriber.translatable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translatable',
            'knp.doctrine_behaviors.translatable_subscriber.translation_trait' => 'Knp\\DoctrineBehaviors\\Model\\Translatable\\Translation',
            'knp.doctrine_behaviors.translatable_subscriber.translatable_fetch_method' => 'LAZY',
            'knp.doctrine_behaviors.translatable_subscriber.translation_fetch_method' => 'LAZY',
            'knp.doctrine_behaviors.softdeletable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\SoftDeletable\\SoftDeletableSubscriber',
            'knp.doctrine_behaviors.softdeletable_subscriber.softdeletable_trait' => 'Knp\\DoctrineBehaviors\\Model\\SoftDeletable\\SoftDeletable',
            'knp.doctrine_behaviors.timestampable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Timestampable\\TimestampableSubscriber',
            'knp.doctrine_behaviors.timestampable_subscriber.timestampable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Timestampable\\Timestampable',
            'knp.doctrine_behaviors.timestampable_subscriber.db_field_type' => 'datetime',
            'knp.doctrine_behaviors.blameable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Blameable\\BlameableSubscriber',
            'knp.doctrine_behaviors.blameable_subscriber.blameable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Blameable\\Blameable',
            'knp.doctrine_behaviors.blameable_subscriber.user_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Blameable\\UserCallable',
            'knp.doctrine_behaviors.blameable_subscriber.user_entity' => NULL,
            'knp.doctrine_behaviors.loggable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Loggable\\LoggableSubscriber',
            'knp.doctrine_behaviors.loggable_subscriber.logger_callable.class' => 'Knp\\DoctrineBehaviors\\ORM\\Loggable\\LoggerCallable',
            'knp.doctrine_behaviors.geocodable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Geocodable\\GeocodableSubscriber',
            'knp.doctrine_behaviors.geocodable_subscriber.geocodable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Geocodable\\Geocodable',
            'knp.doctrine_behaviors.sluggable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Sluggable\\SluggableSubscriber',
            'knp.doctrine_behaviors.sluggable_subscriber.sluggable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Sluggable\\Sluggable',
            'knp.doctrine_behaviors.tree_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Tree\\TreeSubscriber',
            'knp.doctrine_behaviors.tree_subscriber.tree_trait' => 'Knp\\DoctrineBehaviors\\Model\\Tree\\Node',
            'knp.doctrine_behaviors.sortable_subscriber.class' => 'Knp\\DoctrineBehaviors\\ORM\\Sortable\\SortableSubscriber',
            'knp.doctrine_behaviors.sortable_subscriber.sortable_trait' => 'Knp\\DoctrineBehaviors\\Model\\Sortable\\Sortable',
            'jms_translation.twig_extension.class' => 'JMS\\TranslationBundle\\Twig\\TranslationExtension',
            'jms_translation.controller.translate_controller.class' => 'JMS\\TranslationBundle\\Controller\\TranslateController',
            'jms_translation.controller.api_controller.class' => 'JMS\\TranslationBundle\\Controller\\ApiController',
            'jms_translation.extractor_manager.class' => 'JMS\\TranslationBundle\\Translation\\ExtractorManager',
            'jms_translation.extractor.file_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\FileExtractor',
            'jms_translation.extractor.file.default_php_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\DefaultPhpFileExtractor',
            'jms_translation.extractor.file.translation_container_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\TranslationContainerExtractor',
            'jms_translation.extractor.file.twig_extractor' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\TwigFileExtractor',
            'jms_translation.extractor.file.form_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\FormExtractor',
            'jms_translation.extractor.file.validation_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\ValidationExtractor',
            'jms_translation.extractor.file.authentication_message_extractor.class' => 'JMS\\TranslationBundle\\Translation\\Extractor\\File\\AuthenticationMessagesExtractor',
            'jms_translation.loader.symfony.xliff_loader.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\Symfony\\XliffLoader',
            'jms_translation.loader.xliff_loader.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\XliffLoader',
            'jms_translation.loader.symfony_adapter.class' => 'JMS\\TranslationBundle\\Translation\\Loader\\SymfonyLoaderAdapter',
            'jms_translation.loader_manager.class' => 'JMS\\TranslationBundle\\Translation\\LoaderManager',
            'jms_translation.dumper.php_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\PhpDumper',
            'jms_translation.dumper.xliff_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\XliffDumper',
            'jms_translation.dumper.yaml_dumper.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\YamlDumper',
            'jms_translation.dumper.symfony_adapter.class' => 'JMS\\TranslationBundle\\Translation\\Dumper\\SymfonyDumperAdapter',
            'jms_translation.file_writer.class' => 'JMS\\TranslationBundle\\Translation\\FileWriter',
            'jms_translation.updater.class' => 'JMS\\TranslationBundle\\Translation\\Updater',
            'jms_translation.config_factory.class' => 'JMS\\TranslationBundle\\Translation\\ConfigFactory',
            'jms_translation.file_source_factory.class' => 'JMS\\TranslationBundle\\Translation\\FileSourceFactory',
            'jms_translation.source_language' => 'en',
            'jms_translation.locales' => array(

            ),
            'jms_translation.dumper.add_date' => true,
            'jms_translation.dumper.add_references' => true,
            'jms_di_extra.metadata.driver.annotation_driver.class' => 'JMS\\DiExtraBundle\\Metadata\\Driver\\AnnotationDriver',
            'jms_di_extra.metadata.driver.configured_controller_injections.class' => 'JMS\\DiExtraBundle\\Metadata\\Driver\\ConfiguredControllerInjectionsDriver',
            'jms_di_extra.metadata.driver.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_di_extra.service_naming_strategy.default.class' => 'JMS\\DiExtraBundle\\Metadata\\DefaultNamingStrategy',
            'jms_di_extra.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_di_extra.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_di_extra.metadata.converter.class' => 'JMS\\DiExtraBundle\\Metadata\\MetadataConverter',
            'jms_di_extra.controller_resolver.class' => 'JMS\\DiExtraBundle\\HttpKernel\\ControllerResolver',
            'jms_di_extra.controller_injectors_warmer.class' => 'JMS\\DiExtraBundle\\HttpKernel\\ControllerInjectorsWarmer',
            'jms_di_extra.all_bundles' => false,
            'jms_di_extra.bundles' => array(

            ),
            'jms_di_extra.directories' => array(

            ),
            'jms_di_extra.cache_dir' => (__DIR__.'/jms_diextra'),
            'jms_di_extra.disable_grep' => false,
            'jms_di_extra.doctrine_integration' => true,
            'jms_di_extra.annotation_patterns' => array(
                0 => 'JMS\\DiExtraBundle\\Annotation',
            ),
            'jms_di_extra.cache_warmer.controller_file_blacklist' => array(

            ),
            'jms_di_extra.doctrine_integration.entity_manager.file' => (__DIR__.'/jms_diextra/doctrine/EntityManager_5e9e57519c1b3.php'),
            'jms_di_extra.doctrine_integration.entity_manager.class' => 'EntityManager5e9e57519c1b3_546a8d27f194334ee012bfe64f629947b07e4919\\__CG__\\Doctrine\\ORM\\EntityManager',
            'jms_aop.cache_dir' => (__DIR__.'/jms_aop'),
            'jms_aop.interceptor_loader.class' => 'JMS\\AopBundle\\Aop\\InterceptorLoader',
            'jms_i18n_routing.router.class' => 'JMS\\I18nRoutingBundle\\Router\\I18nRouter',
            'jms_i18n_routing.locale_resolver.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultLocaleResolver',
            'jms_i18n_routing.loader.class' => 'JMS\\I18nRoutingBundle\\Router\\I18nLoader',
            'jms_i18n_routing.route_exclusion_strategy.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultRouteExclusionStrategy',
            'jms_i18n_routing.pattern_generation_strategy.class' => 'JMS\\I18nRoutingBundle\\Router\\DefaultPatternGenerationStrategy',
            'jms_i18n_routing.locale_choosing_listener.class' => 'JMS\\I18nRoutingBundle\\EventListener\\LocaleChoosingListener',
            'jms_i18n_routing.cookie_setting_listener.class' => 'JMS\\I18nRoutingBundle\\EventListener\\CookieSettingListener',
            'jms_i18n_routing.route_translation_extractor.class' => 'JMS\\I18nRoutingBundle\\Translation\\RouteTranslationExtractor',
            'jms_i18n_routing.default_locale' => 'fr',
            'jms_i18n_routing.locales' => array(
                0 => 'fr',
                1 => 'en',
            ),
            'jms_i18n_routing.catalogue' => 'routes',
            'jms_i18n_routing.strategy' => 'prefix_except_default',
            'jms_i18n_routing.redirect_to_host' => true,
            'jms_i18n_routing.cookie.name' => 'hl',
            'a2lix_translation_form.locales' => array(
                0 => 'fr',
                1 => 'en',
            ),
            'a2lix_translation_form.required_locales' => array(

            ),
            'a2lix_translation_form.default.service.translation.class' => 'A2lix\\TranslationFormBundle\\TranslationForm\\TranslationForm',
            'a2lix_translation_form.default.service.parameter_locale_provider.class' => 'A2lix\\TranslationFormBundle\\Locale\\DefaultProvider',
            'a2lix_translation_form.default.listener.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\EventListener\\TranslationsListener',
            'a2lix_translation_form.default.listener.translationsforms.class' => 'A2lix\\TranslationFormBundle\\Form\\EventListener\\TranslationsFormsListener',
            'a2lix_translation_form.default.type.translations.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsType',
            'a2lix_translation_form.default.type.translationsfields.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFieldsType',
            'a2lix_translation_form.default.type.translationsforms.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsFormsType',
            'a2lix_translation_form.default.type.translationslocalesselector.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslationsLocalesSelectorType',
            'a2lix_translation_form.default.type.translatedentity.class' => 'A2lix\\TranslationFormBundle\\Form\\Type\\TranslatedEntityType',
            'a2lix_translation_form.locale_provider' => 'default',
            'a2lix_translation_form.default_locale' => 'fr',
            'a2lix_translation_form.templating' => 'A2lixTranslationFormBundle::default.html.twig',
            'vich_uploader.default_filename_attribute_suffix' => '_name',
            'vich_uploader.file_injector.class' => 'Vich\\UploaderBundle\\Injector\\FileInjector',
            'arkounay_block_i18n_bundle' => array(
                'roles' => array(
                    0 => 'ROLE_ADMIN',
                ),
            ),
            'gregwar_image.cache_dir' => 'cache',
            'gregwar_image.cache_dir_mode' => NULL,
            'gregwar_image.throw_exception' => true,
            'gregwar_image.fallback_image' => NULL,
            'image.handling.class' => 'Gregwar\\ImageBundle\\Services\\ImageHandling',
            'image.handler.class' => 'Gregwar\\ImageBundle\\ImageHandler',
            'stof_doctrine_extensions.listener.timestampable.class' => 'Gedmo\\Timestampable\\TimestampableListener',
            'stof_doctrine_extensions.listener.sluggable.class' => 'Gedmo\\Sluggable\\SluggableListener',
            'stof_doctrine_extensions.listener.sortable.class' => 'Gedmo\\Sortable\\SortableListener',
            'stof_doctrine_extensions.default_locale' => 'en',
            'stof_doctrine_extensions.translation_fallback' => false,
            'stof_doctrine_extensions.persist_default_translation' => false,
            'stof_doctrine_extensions.skip_translation_on_load' => false,
            'stof_doctrine_extensions.listener.translatable.class' => 'Gedmo\\Translatable\\TranslatableListener',
            'stof_doctrine_extensions.listener.blameable.class' => 'Gedmo\\Blameable\\BlameableListener',
            'stof_doctrine_extensions.listener.tree.class' => 'Gedmo\\Tree\\TreeListener',
            'stof_doctrine_extensions.listener.loggable.class' => 'Gedmo\\Loggable\\LoggableListener',
            'stof_doctrine_extensions.listener.softdeleteable.class' => 'Gedmo\\SoftDeleteable\\SoftDeleteableListener',
            'stof_doctrine_extensions.listener.uploadable.class' => 'Gedmo\\Uploadable\\UploadableListener',
            'stof_doctrine_extensions.listener.reference_integrity.class' => 'Gedmo\\ReferenceIntegrity\\ReferenceIntegrityListener',
            'doctrine_migrations.namespace' => 'Migrations',
            'doctrine_migrations.table_name' => 'migrations',
            'doctrine_migrations.name' => 'migrations',
            'doctrine_migrations.custom_template' => NULL,
            'doctrine_migrations.organize_migrations' => false,
            'lexik_form_filter.query_builder_updater.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\FilterBuilderUpdater',
            'lexik_form_filter.form_data_extractor.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\FormDataExtractor',
            'lexik_form_filter.data_extraction_method.default.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\DefaultExtractionMethod',
            'lexik_form_filter.data_extraction_method.text.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\TextExtractionMethod',
            'lexik_form_filter.data_extraction_method.key_values.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\ValueKeysExtractionMethod',
            'lexik_form_filter.filter_prepare.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Listener\\PrepareListener',
            'lexik_form_filter.type.filter_text.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\TextFilterType',
            'lexik_form_filter.type.filter_number.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberFilterType',
            'lexik_form_filter.type.filter_number_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberRangeFilterType',
            'lexik_form_filter.type.filter_checkbox.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CheckboxFilterType',
            'lexik_form_filter.type.filter_boolean.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\BooleanFilterType',
            'lexik_form_filter.type.filter_choice.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\ChoiceFilterType',
            'lexik_form_filter.type.filter_date.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateFilterType',
            'lexik_form_filter.type.filter_date_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateRangeFilterType',
            'lexik_form_filter.type.filter_datetime.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeFilterType',
            'lexik_form_filter.type.filter_datetime_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeRangeFilterType',
            'lexik_form_filter.type.filter_collection_adapter.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CollectionAdapterFilterType',
            'lexik_form_filter.type.filter_sharedable.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\SharedableFilterType',
            'lexik_form_filter.type_extension.filter_extension.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\FilterTypeExtension',
            'lexik_form_filter.get_filter.doctrine_orm.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Subscriber\\DoctrineORMSubscriber',
            'lexik_form_filter.apply_filter.doctrine_orm.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Listener\\DoctrineApplyFilterListener',
            'lexik_form_filter.type.filter_entity.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\EntityFilterType',
            'lexik_form_filter.where_method' => 'and',
            'lexik_form_filter.text.condition_pattern' => 1,
            'eko_feed.feed.manager.class' => 'Eko\\FeedBundle\\Feed\\FeedManager',
            'eko_feed.feed.class' => 'Eko\\FeedBundle\\Feed\\Feed',
            'eko_feed.feed.reader.class' => 'Eko\\FeedBundle\\Feed\\Reader',
            'eko_feed.feed.dump.class' => 'Eko\\FeedBundle\\Service\\FeedDumpService',
            'eko_feed.formatter.rss.class' => 'Eko\\FeedBundle\\Formatter\\RssFormatter',
            'eko_feed.formatter.atom.class' => 'Eko\\FeedBundle\\Formatter\\AtomFormatter',
            'eko_feed.hydrator.default.class' => 'Eko\\FeedBundle\\Hydrator\\DefaultHydrator',
            'eko_feed.config' => array(
                'translation_domain' => 'test  Optional, if you want to use a custom translation domain',
                'feeds' => array(
                    'medias' => array(
                        'title' => 'VertinGo Production',
                        'description' => 'Latests Publications',
                        'link' => array(
                            'uri' => 'http://platform-media.herokuapp.com/flux_rss_vertin_go_prod',
                            'route_params' => array(

                            ),
                        ),
                        'encoding' => 'utf-8',
                        'author' => 'Vertin Go',
                    ),
                ),
                'hydrator' => 'eko_feed.hydrator.default',
            ),
            'eko_feed.translation_domain' => 'test  Optional, if you want to use a custom translation domain',
            'social_post.configuration.publish_on' => array(
                0 => 'facebook',
                1 => 'linkedin',
                2 => 'twitter',
            ),
            'social_post.configuration.facebook' => array(
                'app_id' => '2132676947050059',
                'app_secret' => 'a6c887c7b89e3f286c958079618d0e9e',
                'default_access_token' => 'YOUR-FACEBOOK-NON-EXPIRING-PAGE-ACCESS-TOKEN',
                'page_id' => 'vertingo',
                'enable_beta_mode' => true,
                'default_graph_version' => 'v2.8',
                'persistent_data_handler' => 'memory',
                'pseudo_random_string_generator' => 'openssl',
                'http_client_handler' => 'curl',
            ),
            'social_post.configuration.facebook.page_id' => 'vertingo',
            'social_post.facebook.provider' => 'MartinGeorgiev\\SocialPost\\SocialNetwork\\Facebook\\SDK5',
            'social_post.configuration.linkedin.client_id' => 'YOUR-LINKEDIN-APP-CLIENT-ID',
            'social_post.configuration.linkedin.client_secret' => 'YOUR-LINKEDIN-APP-CLIENT-SECRET',
            'social_post.configuration.linkedin.access_token' => 'YOUR-LINKEDIN-60-DAYS-LONG-USER-ACCESS-TOKEN',
            'social_post.configuration.linkedin.company_page_id' => 'YOUR-LINKEDIN-COMPANY-PAGE-ID',
            'social_post.linkedin.provider' => 'MartinGeorgiev\\SocialPost\\SocialNetwork\\LinkedIn\\HappyrLinkedInApiClient',
            'social_post.configuration.twitter.consumer_key' => 'YOUR-TWITTER-APP-CONSUMER-KEY',
            'social_post.configuration.twitter.consumer_secret' => 'YOUR-TWITTER-APP-CONSUMER-SECRET',
            'social_post.configuration.twitter.access_token' => 'YOUR-TWITTER-ACCESS-TOKEN',
            'social_post.configuration.twitter.access_token_secret' => 'YOUR-TWITTER-ACCESS-TOKEN-SECRET',
            'social_post.twitter.provider' => 'MartinGeorgiev\\SocialPost\\SocialNetwork\\Twitter\\TwitterOAuth07',
            'social_post.all_in_one' => 'MartinGeorgiev\\SocialPost\\SocialNetwork\\AllInOne',
            'cmf_media.default_browser' => NULL,
            'cmf_media.browser_file_helper.class' => 'Symfony\\Cmf\\Bundle\\MediaBundle\\File\\BrowserFileHelper',
            'cmf_media.upload_file_role' => 'ROLE_CAN_UPLOAD_FILE',
            'cmf_media.use_imagine' => false,
            'cmf_media.imagine.filter.upload_thumbnail' => false,
            'cmf_media.imagine.filter.elfinder_thumbnail' => false,
            'cmf_media.imagine.all_filters' => array(

            ),
            'sonata.media.provider.image.class' => 'Sonata\\MediaBundle\\Provider\\ImageProvider',
            'sonata.media.provider.file.class' => 'Sonata\\MediaBundle\\Provider\\FileProvider',
            'sonata.media.provider.youtube.class' => 'Sonata\\MediaBundle\\Provider\\YouTubeProvider',
            'sonata.media.provider.dailymotion.class' => 'Sonata\\MediaBundle\\Provider\\DailyMotionProvider',
            'sonata.media.provider.vimeo.class' => 'Sonata\\MediaBundle\\Provider\\VimeoProvider',
            'sonata.media.thumbnail.format' => 'Sonata\\MediaBundle\\Thumbnail\\FormatThumbnail',
            'sonata.media.thumbnail.format.default' => 'jpg',
            'sonata.media.thumbnail.liip_imagine' => 'Sonata\\MediaBundle\\Thumbnail\\LiipImagineThumbnail',
            'sonata.media.pool.class' => 'Sonata\\MediaBundle\\Provider\\Pool',
            'sonata.media.resizer.simple.class' => 'Sonata\\MediaBundle\\Resizer\\SimpleResizer',
            'sonata.media.resizer.square.class' => 'Sonata\\MediaBundle\\Resizer\\SquareResizer',
            'sonata.media.adapter.image.gd.class' => 'Imagine\\Gd\\Imagine',
            'sonata.media.adapter.image.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'sonata.media.adapter.image.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'sonata.media.metadata.proxy.class' => 'Sonata\\MediaBundle\\Metadata\\ProxyMetadataBuilder',
            'sonata.media.metadata.amazon.class' => 'Sonata\\MediaBundle\\Metadata\\AmazonMetadataBuilder',
            'sonata.media.metadata.noop.class' => 'Sonata\\MediaBundle\\Metadata\\NoopMetadataBuilder',
            'sonata.media.adapater.filesystem.opencloud.class' => '',
            'sonata.media.block.media.class' => 'Sonata\\MediaBundle\\Block\\MediaBlockService',
            'sonata.media.block.feature_media.class' => 'Sonata\\MediaBundle\\Block\\FeatureMediaBlockService',
            'sonata.media.block.gallery.class' => 'Sonata\\MediaBundle\\Block\\GalleryBlockService',
            'sonata.media.block.gallery_list.class' => 'Sonata\\MediaBundle\\Block\\GalleryListBlockService',
            'sonata.media.block.breadcrumb_view.class' => 'Sonata\\MediaBundle\\Block\\Breadcrumb\\GalleryViewBreadcrumbBlockService',
            'sonata.media.block.breadcrumb_index.class' => 'Sonata\\MediaBundle\\Block\\Breadcrumb\\GalleryIndexBreadcrumbBlockService',
            'sonata.media.block.breadcrumb_media.class' => 'Sonata\\MediaBundle\\Block\\Breadcrumb\\MediaViewBreadcrumbBlockService',
            'sonata.media.manager.media.class' => 'Sonata\\MediaBundle\\Entity\\MediaManager',
            'sonata.media.manager.gallery.class' => 'Sonata\\MediaBundle\\Entity\\GalleryManager',
            'sonata.media.admin_format' => array(
                'width' => 200,
                'height' => false,
                'quality' => 90,
                'format' => 'jpg',
                'constraint' => true,
            ),
            'sonata.media.resizer.simple.adapter.mode' => 'inset',
            'sonata.media.resizer.square.adapter.mode' => 'inset',
            'sonata.media.admin.media.entity' => 'Application\\Sonata\\MediaBundle\\Entity\\Media',
            'sonata.media.admin.gallery.entity' => 'Application\\Sonata\\MediaBundle\\Entity\\Gallery',
            'sonata.media.admin.gallery_has_media.entity' => 'Application\\Sonata\\MediaBundle\\Entity\\GalleryHasMedia',
            'sonata.media.media.class' => 'Application\\Sonata\\MediaBundle\\Entity\\Media',
            'sonata.media.gallery.class' => 'Application\\Sonata\\MediaBundle\\Entity\\Gallery',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.identical_property_naming_strategy.class' => 'JMS\\Serializer\\Naming\\IdenticalPropertyNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.twig_runtime_extension.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeExtension',
            'jms_serializer.twig_runtime_extension_helper.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeHelper',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.xml_serialization_visitor.format_output' => true,
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'JMS\\Serializer\\Handler\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.configured_context_factory.class' => 'JMS\\SerializerBundle\\ContextFactory\\ConfiguredContextFactory',
            'jms_serializer.expression_evaluator.class' => 'JMS\\Serializer\\Expression\\ExpressionEvaluator',
            'jms_serializer.expression_language.class' => 'Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage',
            'jms_serializer.expression_language.function_provider.class' => 'JMS\\SerializerBundle\\ExpressionLanguage\\BasicSerializerFunctionsProvider',
            'jms_serializer.accessor_strategy.default.class' => 'JMS\\Serializer\\Accessor\\DefaultAccessorStrategy',
            'jms_serializer.accessor_strategy.expression.class' => 'JMS\\Serializer\\Accessor\\ExpressionAccessorStrategy',
            'jms_serializer.cache.cache_warmer.class' => 'JMS\\SerializerBundle\\Cache\\CacheWarmer',
            'assetic.asset_factory.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\AssetFactory',
            'assetic.asset_manager.class' => 'Assetic\\Factory\\LazyAssetManager',
            'assetic.asset_manager_cache_warmer.class' => 'Symfony\\Bundle\\AsseticBundle\\CacheWarmer\\AssetManagerCacheWarmer',
            'assetic.cached_formula_loader.class' => 'Assetic\\Factory\\Loader\\CachedFormulaLoader',
            'assetic.config_cache.class' => 'Assetic\\Cache\\ConfigCache',
            'assetic.config_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\ConfigurationLoader',
            'assetic.config_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\ConfigurationResource',
            'assetic.coalescing_directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\CoalescingDirectoryResource',
            'assetic.directory_resource.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Resource\\DirectoryResource',
            'assetic.filter_manager.class' => 'Symfony\\Bundle\\AsseticBundle\\FilterManager',
            'assetic.worker.ensure_filter.class' => 'Assetic\\Factory\\Worker\\EnsureFilterWorker',
            'assetic.worker.cache_busting.class' => 'Assetic\\Factory\\Worker\\CacheBustingWorker',
            'assetic.value_supplier.class' => 'Symfony\\Bundle\\AsseticBundle\\DefaultValueSupplier',
            'assetic.node.paths' => array(

            ),
            'assetic.cache_dir' => (__DIR__.'/assetic'),
            'assetic.bundles' => array(
                0 => 'YouweFileManagerBundle',
                1 => 'NewslettersBundle',
            ),
            'assetic.twig_extension.class' => 'Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticExtension',
            'assetic.twig_formula_loader.class' => 'Assetic\\Extension\\Twig\\TwigFormulaLoader',
            'assetic.helper.dynamic.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\DynamicAsseticHelper',
            'assetic.helper.static.class' => 'Symfony\\Bundle\\AsseticBundle\\Templating\\StaticAsseticHelper',
            'assetic.php_formula_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Loader\\AsseticHelperFormulaLoader',
            'assetic.debug' => true,
            'assetic.use_controller' => true,
            'assetic.enable_profiler' => false,
            'assetic.variables' => array(

            ),
            'assetic.java.bin' => 'C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath\\java.EXE',
            'assetic.node.bin' => 'C:\\Program Files\\nodejs\\node.EXE',
            'assetic.ruby.bin' => 'C:\\Ruby26-x64\\bin\\ruby.EXE',
            'assetic.sass.bin' => '/usr/bin/sass',
            'assetic.reactjsx.bin' => '/usr/bin/jsx',
            'assetic.twig_extension.functions' => array(

            ),
            'assetic.controller.class' => 'Symfony\\Bundle\\AsseticBundle\\Controller\\AsseticController',
            'assetic.routing_loader.class' => 'Symfony\\Bundle\\AsseticBundle\\Routing\\AsseticLoader',
            'assetic.cache.class' => 'Assetic\\Cache\\FilesystemCache',
            'assetic.use_controller_worker.class' => 'Symfony\\Bundle\\AsseticBundle\\Factory\\Worker\\UseControllerWorker',
            'assetic.request_listener.class' => 'Symfony\\Bundle\\AsseticBundle\\EventListener\\RequestListener',
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'buttons.facebook' => array(
                'url' => 'https://www.facebook.com/vertingo/?ref=bookmarks',
                'locale' => 'fr_FR',
                'send' => false,
                'width' => 200,
                'showFaces' => true,
                'layout' => 'button_count',
                'share' => true,
            ),
            'buttons.twitter' => array(
                'url' => NULL,
                'locale' => 'fr',
                'message' => 'Consulter le File Manager Vertin Go Website',
                'text' => 'Tweet',
                'via' => 'Vertin Go Website',
                'tag' => '',
                'showFaces' => false,
                'send' => true,
                'share' => true,
            ),
            'buttons.googleplus' => array(
                'url' => NULL,
                'locale' => 'fr',
                'size' => 'medium',
                'annotation' => 'bubble',
                'width' => 200,
                'showFaces' => false,
                'send' => true,
                'share' => true,
            ),
            'buttons.linkedin' => array(
                'url' => NULL,
                'locale' => 'fr_FR',
                'counter' => 'right',
                'showFaces' => false,
                'send' => true,
                'share' => true,
            ),
            'buttons.pinterest' => array(
                'url' => NULL,
                'locale' => 'fr',
                'showFaces' => false,
                'send' => true,
                'share' => true,
            ),
            'links.facebook' => array(
                'network' => 'facebook',
                'url' => 'https://www.facebook.com/vertingo/?ref=bookmarks',
                'theme' => 'default',
            ),
            'links.googleplus' => array(
                'network' => 'googleplus',
                'url' => 'https://plus.google.com/105931415830389032796',
                'theme' => 'default',
            ),
            'social.theme' => 'default',
            'presta_sitemap.generator.class' => 'Presta\\SitemapBundle\\Service\\Generator',
            'presta_sitemap.dumper.class' => 'Presta\\SitemapBundle\\Service\\Dumper',
            'presta_sitemap.routing_loader.class' => 'Presta\\SitemapBundle\\Routing\\SitemapRoutingLoader',
            'presta_sitemap.dump_command.class' => 'Presta\\SitemapBundle\\Command\\DumpSitemapsCommand',
            'presta_sitemap.timetolive' => 3600,
            'presta_sitemap.sitemap_file_prefix' => 'sitemap',
            'presta_sitemap.items_by_set' => 50000,
            'presta_sitemap.defaults' => array(
                'priority' => 1,
                'changefreq' => 'daily',
                'lastmod' => 'now',
            ),
            'sonata.seo.block.social.container.class' => 'Sonata\\SeoBundle\\Block\\Social\\SocialBlockContainer',
            'sonata.seo.block.email.share_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\EmailShareButtonBlockService',
            'sonata.seo.block.facebook.like_box.class' => 'Sonata\\SeoBundle\\Block\\Social\\FacebookLikeBoxBlockService',
            'sonata.seo.block.facebook.like_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\FacebookLikeButtonBlockService',
            'sonata.seo.block.facebook.send_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\FacebookSendButtonBlockService',
            'sonata.seo.block.facebook.share_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\FacebookShareButtonBlockService',
            'sonata.seo.block.twitter.share_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\TwitterShareButtonBlockService',
            'sonata.seo.block.twitter.follow_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\TwitterFollowButtonBlockService',
            'sonata.seo.block.twitter.hashtag_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\TwitterHashtagButtonBlockService',
            'sonata.seo.block.twitter.mention_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\TwitterMentionButtonBlockService',
            'sonata.seo.block.twitter.embed.class' => 'Sonata\\SeoBundle\\Block\\Social\\TwitterEmbedTweetBlockService',
            'sonata.seo.block.pinterest.pin_button.class' => 'Sonata\\SeoBundle\\Block\\Social\\PinterestPinButtonBlockService',
            'sonata.seo.block.breadcrumb.homepage.class' => 'Sonata\\SeoBundle\\Block\\Breadcrumb\\HomepageBreadcrumbBlockService',
            'sonata.seo.exporter.database_source_iterator.class' => 'Exporter\\Source\\DoctrineDBALConnectionSourceIterator',
            'sonata.seo.exporter.sitemap_source_iterator.class' => 'Exporter\\Source\\SymfonySitemapSourceIterator',
            'sonata.seo.page.default.class' => 'Sonata\\SeoBundle\\Seo\\SeoPage',
            'sonata.seo.twig.extension.class' => 'Sonata\\SeoBundle\\Twig\\Extension\\SeoExtension',
            'sonata.seo.sitemap.manager.class' => 'Sonata\\SeoBundle\\Sitemap\\SourceManager',
            'cmf_seo.translation_domain' => 'seo',
            'cmf_seo.title' => NULL,
            'cmf_seo.description' => NULL,
            'cmf_seo.original_route_pattern' => 'redirect',
            'cmf_seo.error.templates' => array(

            ),
            'cmf_seo.sitemap.configurations' => array(
                'sitemap' => array(
                    'templates' => array(
                        'html' => 'CmfSeoBundle:Sitemap:index.html.twig',
                        'xml' => 'CmfSeoBundle:Sitemap:index.xml.twig',
                    ),
                ),
                'categories' => array(
                    'templates' => array(
                        'html' => 'sitemap/categories.html.twig',
                        'xml' => 'CmfSeoBundle:Sitemap:index.xml.twig',
                    ),
                ),
            ),
            'cmf_seo.sitemap.default_change_frequency' => 'always',
            'cmf_seo.form.data_class.seo_metadata' => 'Symfony\\Cmf\\Bundle\\SeoBundle\\Model\\SeoMetadata',
            'cmf_seo.form.options' => array(
                'generic_metadata' => false,
                'storage' => 'default',
            ),
            'cmf_core.persistence.phpcr.manager_name' => NULL,
            'cmf_core.publish_workflow.view_non_published_role' => 'ROLE_CAN_VIEW_NON_PUBLISHED',
            'cmf_core.phpcr.multilang.locales' => array(

            ),
            'sonata.core.flashmessage.manager.class' => 'Sonata\\CoreBundle\\FlashMessage\\FlashManager',
            'sonata.core.twig.extension.flashmessage.class' => 'Sonata\\CoreBundle\\Twig\\Extension\\FlashMessageExtension',
            'sonata.core.form_type' => 'standard',
            'sonata.core.form.mapping.type' => array(

            ),
            'sonata.core.form.mapping.extension' => array(

            ),
            'sonata.block.service.container.class' => 'Sonata\\BlockBundle\\Block\\Service\\ContainerBlockService',
            'sonata.block.service.empty.class' => 'Sonata\\BlockBundle\\Block\\Service\\EmptyBlockService',
            'sonata.block.service.text.class' => 'Sonata\\BlockBundle\\Block\\Service\\TextBlockService',
            'sonata.block.service.rss.class' => 'Sonata\\BlockBundle\\Block\\Service\\RssBlockService',
            'sonata.block.service.menu.class' => 'Sonata\\BlockBundle\\Block\\Service\\MenuBlockService',
            'sonata.block.service.template.class' => 'Sonata\\BlockBundle\\Block\\Service\\TemplateBlockService',
            'sonata.block.exception.strategy.manager.class' => 'Sonata\\BlockBundle\\Exception\\Strategy\\StrategyManager',
            'sonata.block.container.types' => array(
                0 => 'sonata.block.service.container',
                1 => 'sonata.page.block.container',
                2 => 'sonata.dashboard.block.container',
                3 => 'cmf.block.container',
                4 => 'cmf.block.slideshow',
            ),
            'sonata_block.blocks' => array(
                'sonata.admin.block.admin_list' => array(
                    'contexts' => array(
                        0 => 'admin',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.text' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.rss' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
            ),
            'sonata_block.blocks_by_class' => array(

            ),
            'sonata_block.cache_blocks' => array(
                'by_type' => array(
                    'sonata.admin.block.admin_list' => 'sonata.cache.noop',
                    'sonata.block.service.text' => 'sonata.cache.noop',
                    'sonata.block.service.rss' => 'sonata.cache.noop',
                ),
            ),
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Integration\\Symfony\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.listener.voters.class' => 'Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener',
            'knp_menu.voter.router.class' => 'Knp\\Menu\\Matcher\\Voter\\RouteVoter',
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => '@KnpMenu/menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'bnbc_upload.uniqid' => false,
            'bnbc_upload.max_file_size' => NULL,
            'bnbc_upload.accept_file_types' => '/.+$/i',
            'bnbc_upload.upload_folder' => 'uploads',
            'bnbc_upload.image_versions' => NULL,
            'oneup_uploader.chunks.manager.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\ChunkManager',
            'oneup_uploader.chunks_storage.gaufrette.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\GaufretteStorage',
            'oneup_uploader.chunks_storage.flysystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\FlysystemStorage',
            'oneup_uploader.chunks_storage.filesystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Chunk\\Storage\\FilesystemStorage',
            'oneup_uploader.namer.urlsafename.class' => 'Oneup\\UploaderBundle\\Uploader\\Naming\\UrlSafeNamer',
            'oneup_uploader.namer.uniqid.class' => 'Oneup\\UploaderBundle\\Uploader\\Naming\\UniqidNamer',
            'oneup_uploader.routing.loader.class' => 'Oneup\\UploaderBundle\\Routing\\RouteLoader',
            'oneup_uploader.storage.gaufrette.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\GaufretteStorage',
            'oneup_uploader.storage.flysystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FlysystemStorage',
            'oneup_uploader.storage.filesystem.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FilesystemStorage',
            'oneup_uploader.orphanage.class' => 'Oneup\\UploaderBundle\\Uploader\\Storage\\FilesystemOrphanageStorage',
            'oneup_uploader.orphanage.manager.class' => 'Oneup\\UploaderBundle\\Uploader\\Orphanage\\OrphanageManager',
            'oneup_uploader.controller.fineuploader.class' => 'Oneup\\UploaderBundle\\Controller\\FineUploaderController',
            'oneup_uploader.controller.blueimp.class' => 'Oneup\\UploaderBundle\\Controller\\BlueimpController',
            'oneup_uploader.controller.uploadify.class' => 'Oneup\\UploaderBundle\\Controller\\UploadifyController',
            'oneup_uploader.controller.yui3.class' => 'Oneup\\UploaderBundle\\Controller\\YUI3Controller',
            'oneup_uploader.controller.fancyupload.class' => 'Oneup\\UploaderBundle\\Controller\\FancyUploadController',
            'oneup_uploader.controller.mooupload.class' => 'Oneup\\UploaderBundle\\Controller\\MooUploadController',
            'oneup_uploader.controller.plupload.class' => 'Oneup\\UploaderBundle\\Controller\\PluploadController',
            'oneup_uploader.controller.dropzone.class' => 'Oneup\\UploaderBundle\\Controller\\DropzoneController',
            'oneup_uploader.command.clear_chunks.class' => 'Oneup\\UploaderBundle\\Command\\ClearChunkCommand',
            'oneup_uploader.command.clear_orphans.class' => 'Oneup\\UploaderBundle\\Command\\ClearOrphansCommand',
            'oneup_uploader.error_handler.noop.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\NoopErrorHandler',
            'oneup_uploader.error_handler.blueimp.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\BlueimpErrorHandler',
            'oneup_uploader.error_handler.plupload.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\PluploadErrorHandler',
            'oneup_uploader.error_handler.dropzone.class' => 'Oneup\\UploaderBundle\\Uploader\\ErrorHandler\\DropzoneErrorHandler',
            'oneup_uploader.chunks' => array(
                'maxage' => 604800,
                'storage' => array(
                    'type' => 'filesystem',
                    'filesystem' => NULL,
                    'directory' => (__DIR__.'/uploader/chunks'),
                    'stream_wrapper' => NULL,
                    'sync_buffer_size' => '100K',
                    'prefix' => 'chunks',
                ),
                'load_distribution' => true,
            ),
            'oneup_uploader.orphanage' => array(
                'maxage' => 604800,
                'directory' => (__DIR__.'/uploader/orphanage'),
            ),
            'oneup_uploader.config.gallery' => array(
                'frontend' => 'dropzone',
                'custom_frontend' => array(
                    'name' => NULL,
                    'class' => NULL,
                ),
                'storage' => array(
                    'service' => NULL,
                    'type' => 'filesystem',
                    'filesystem' => NULL,
                    'directory' => NULL,
                    'stream_wrapper' => NULL,
                    'sync_buffer_size' => '100K',
                ),
                'route_prefix' => '',
                'endpoints' => array(
                    'upload' => NULL,
                    'progress' => NULL,
                    'cancel' => NULL,
                ),
                'allowed_mimetypes' => array(

                ),
                'disallowed_mimetypes' => array(

                ),
                'error_handler' => NULL,
                'max_size' => 2147483647,
                'use_orphanage' => false,
                'enable_progress' => false,
                'enable_cancelation' => false,
                'namer' => 'oneup_uploader.namer.uniqid',
                'root_folder' => false,
            ),
            'oneup_uploader.config' => array(
                'mappings' => array(
                    'gallery' => array(
                        'frontend' => 'dropzone',
                        'custom_frontend' => array(
                            'name' => NULL,
                            'class' => NULL,
                        ),
                        'storage' => array(
                            'service' => NULL,
                            'type' => 'filesystem',
                            'filesystem' => NULL,
                            'directory' => NULL,
                            'stream_wrapper' => NULL,
                            'sync_buffer_size' => '100K',
                        ),
                        'route_prefix' => '',
                        'endpoints' => array(
                            'upload' => NULL,
                            'progress' => NULL,
                            'cancel' => NULL,
                        ),
                        'allowed_mimetypes' => array(

                        ),
                        'disallowed_mimetypes' => array(

                        ),
                        'error_handler' => NULL,
                        'max_size' => 2147483647,
                        'use_orphanage' => false,
                        'enable_progress' => false,
                        'enable_cancelation' => false,
                        'namer' => 'oneup_uploader.namer.uniqid',
                        'root_folder' => false,
                    ),
                ),
                'chunks' => array(
                    'maxage' => 604800,
                    'storage' => array(
                        'type' => 'filesystem',
                        'filesystem' => NULL,
                        'directory' => (__DIR__.'/uploader/chunks'),
                        'stream_wrapper' => NULL,
                        'sync_buffer_size' => '100K',
                        'prefix' => 'chunks',
                    ),
                    'load_distribution' => true,
                ),
                'orphanage' => array(
                    'maxage' => 604800,
                    'directory' => (__DIR__.'/uploader/orphanage'),
                ),
                'twig' => true,
            ),
            'oneup_uploader.controllers' => array(
                'gallery' => array(
                    0 => 'oneup_uploader.controller.gallery',
                    1 => array(
                        'enable_progress' => false,
                        'enable_cancelation' => false,
                        'route_prefix' => '',
                        'endpoints' => array(
                            'upload' => NULL,
                            'progress' => NULL,
                            'cancel' => NULL,
                        ),
                    ),
                ),
            ),
            'oneup_uploader.maxsize' => array(
                'gallery' => 2097152,
            ),
            'dubture_ffmpeg.binary' => 'C:/ffmpeg/bin/ffmpeg.exe',
            'dubture_ffprobe.binary' => 'C:/ffmpeg/bin/ffprobe.exe',
            'dubture_ffmpeg.binary_timeout' => 300,
            'dubture_ffmpeg.threads_count' => 4,
            'php_ffmpeg.ffmpeg.class' => 'FFMpeg\\FFMpeg',
            'php_ffmpeg.ffprobe.class' => 'FFMpeg\\FFProbe',
            'php_ffmpeg.binary' => 'C:/ffmpeg/bin/ffmpeg.exe',
            'php_ffprobe.binary' => 'C:/ffmpeg/bin/ffprobe.exe',
            'php_ffmpeg.binary_timeout' => 300,
            'php_ffmpeg.threads_count' => 4,
            'newsletters.renderer.twig.options' => array(
                'autoescape' => false,
                'strict_variables' => true,
                'debug' => true,
            ),
            'newsletters.mandants' => array(
                'default' => 'ThisTokenIsNotSoSecretChangeItdefault',
                'mandantA' => 'ThisTokenIsNotSoSecretChangeItMandantA',
                'mandantB' => 'ThisTokenIsNotSoSecretChangeItMandantB',
            ),
            'newsletters.mandants.default' => 'ThisTokenIsNotSoSecretChangeItdefault',
            'newsletters.mandants.mandanta' => 'ThisTokenIsNotSoSecretChangeItMandantA',
            'newsletters.mandants.mandantb' => 'ThisTokenIsNotSoSecretChangeItMandantB',
            'newsletters.classes' => array(
                'model' => array(
                    'user' => 'AppBundle\\Entity\\User',
                    'mandant' => 'AppBundle\\Entity\\Newsletter\\Mandant',
                    'newsletter' => 'AppBundle\\Entity\\Newsletter\\Newsletter',
                    'subscriber' => 'AppBundle\\Entity\\Newsletter\\Subscriber',
                    'design' => 'AppBundle\\Entity\\Newsletter\\Design',
                    'block' => 'AppBundle\\Entity\\Newsletter\\Block',
                    'group' => 'AppBundle\\Entity\\Newsletter\\Group',
                    'readlog' => 'AppBundle\\Entity\\Newsletter\\Log\\ReadLog',
                    'sendlog' => 'AppBundle\\Entity\\Newsletter\\Log\\SendLog',
                    'sendsettings' => 'AppBundle\\Entity\\Newsletter\\SendSettings',
                    'mailjob' => 'AppBundle\\Entity\\Newsletter\\MailJob',
                    'unsubscribelog' => 'AppBundle\\Entity\\Newsletter\\Unsubscribelog',
                ),
                'form' => array(
                    'newsletter' => 'NewslettersBundle\\Form\\NewsletterType',
                    'mandant' => 'NewslettersBundle\\Form\\MandantType',
                    'subscriber' => 'NewslettersBundle\\Form\\SubscriberType',
                    'design' => 'NewslettersBundle\\Form\\DesignType',
                    'testmail' => 'NewslettersBundle\\Form\\TestMailType',
                    'unsubscribe' => 'NewslettersBundle\\Form\\UnsubscribeType',
                    'sendsettings' => 'NewslettersBundle\\Form\\SendSettingsType',
                ),
            ),
            'newsletters.classes.model' => array(
                'user' => 'AppBundle\\Entity\\User',
                'mandant' => 'AppBundle\\Entity\\Newsletter\\Mandant',
                'newsletter' => 'AppBundle\\Entity\\Newsletter\\Newsletter',
                'subscriber' => 'AppBundle\\Entity\\Newsletter\\Subscriber',
                'design' => 'AppBundle\\Entity\\Newsletter\\Design',
                'block' => 'AppBundle\\Entity\\Newsletter\\Block',
                'group' => 'AppBundle\\Entity\\Newsletter\\Group',
                'readlog' => 'AppBundle\\Entity\\Newsletter\\Log\\ReadLog',
                'sendlog' => 'AppBundle\\Entity\\Newsletter\\Log\\SendLog',
                'sendsettings' => 'AppBundle\\Entity\\Newsletter\\SendSettings',
                'mailjob' => 'AppBundle\\Entity\\Newsletter\\MailJob',
                'unsubscribelog' => 'AppBundle\\Entity\\Newsletter\\Unsubscribelog',
            ),
            'newsletters.classes.model.user' => 'AppBundle\\Entity\\User',
            'newsletters.classes.model.mandant' => 'AppBundle\\Entity\\Newsletter\\Mandant',
            'newsletters.classes.model.newsletter' => 'AppBundle\\Entity\\Newsletter\\Newsletter',
            'newsletters.classes.model.subscriber' => 'AppBundle\\Entity\\Newsletter\\Subscriber',
            'newsletters.classes.model.design' => 'AppBundle\\Entity\\Newsletter\\Design',
            'newsletters.classes.model.block' => 'AppBundle\\Entity\\Newsletter\\Block',
            'newsletters.classes.model.group' => 'AppBundle\\Entity\\Newsletter\\Group',
            'newsletters.classes.model.readlog' => 'AppBundle\\Entity\\Newsletter\\Log\\ReadLog',
            'newsletters.classes.model.sendlog' => 'AppBundle\\Entity\\Newsletter\\Log\\SendLog',
            'newsletters.classes.model.sendsettings' => 'AppBundle\\Entity\\Newsletter\\SendSettings',
            'newsletters.classes.model.mailjob' => 'AppBundle\\Entity\\Newsletter\\MailJob',
            'newsletters.classes.model.unsubscribelog' => 'AppBundle\\Entity\\Newsletter\\Unsubscribelog',
            'newsletters.classes.form' => array(
                'newsletter' => 'NewslettersBundle\\Form\\NewsletterType',
                'mandant' => 'NewslettersBundle\\Form\\MandantType',
                'subscriber' => 'NewslettersBundle\\Form\\SubscriberType',
                'design' => 'NewslettersBundle\\Form\\DesignType',
                'testmail' => 'NewslettersBundle\\Form\\TestMailType',
                'unsubscribe' => 'NewslettersBundle\\Form\\UnsubscribeType',
                'sendsettings' => 'NewslettersBundle\\Form\\SendSettingsType',
            ),
            'newsletters.classes.form.newsletter' => 'NewslettersBundle\\Form\\NewsletterType',
            'newsletters.classes.form.mandant' => 'NewslettersBundle\\Form\\MandantType',
            'newsletters.classes.form.subscriber' => 'NewslettersBundle\\Form\\SubscriberType',
            'newsletters.classes.form.design' => 'NewslettersBundle\\Form\\DesignType',
            'newsletters.classes.form.testmail' => 'NewslettersBundle\\Form\\TestMailType',
            'newsletters.classes.form.unsubscribe' => 'NewslettersBundle\\Form\\UnsubscribeType',
            'newsletters.classes.form.sendsettings' => 'NewslettersBundle\\Form\\SendSettingsType',
            'newsletters.filesystem.block.public' => '/uploads/block',
            'newsletters.filesystem.block.host' => 'http://platform-media.herokuapp.com',
            'newsletters.db_driver' => 'orm',
            'newsletters.templates' => array(
                'base_template' => 'NewslettersBundle::layout.html.twig',
                'mandant' => array(
                    'index' => 'NewslettersBundle:Mandant:index.html.twig',
                    'edit' => 'NewslettersBundle:Mandant:edit.html.twig',
                ),
                'newsletter' => array(
                    'index' => 'NewslettersBundle:Newsletter:index.html.twig',
                    'list' => 'NewslettersBundle:Newsletter:list.html.twig',
                    'create' => 'NewslettersBundle:Newsletter:create.html.twig',
                    'edit' => 'NewslettersBundle:Newsletter:edit.html.twig',
                    'subscriber' => 'NewslettersBundle:Newsletter:subscriber.html.twig',
                    'settings' => 'NewslettersBundle:Newsletter:settings.html.twig',
                    'summary' => 'NewslettersBundle:Newsletter:summary.html.twig',
                    'send' => 'NewslettersBundle:Newsletter:send.html.twig',
                    'unsubscribe' => 'NewslettersBundle:Newsletter:unsubscribe.html.twig',
                    'overview' => 'NewslettersBundle:Newsletter:overview.html.twig',
                    'generate' => 'NewslettersBundle:Newsletter:generate.html.twig',
                ),
                'design' => array(
                    'index' => 'NewslettersBundle:Design:index.html.twig',
                    'list' => 'NewslettersBundle:Design:list.html.twig',
                    'create' => 'NewslettersBundle:Design:create.html.twig',
                    'edit' => 'NewslettersBundle:Design:edit.html.twig',
                    'show' => 'NewslettersBundle:Design:show.html.twig',
                ),
                'subscriber' => array(
                    'list' => 'NewslettersBundle:Subscriber:list.html.twig',
                ),
                'statistic' => array(
                    'show' => 'NewslettersBundle:Statistic:show.html.twig',
                ),
            ),
            'newsletters.templates.base_template' => 'NewslettersBundle::layout.html.twig',
            'newsletters.templates.mandant' => array(
                'index' => 'NewslettersBundle:Mandant:index.html.twig',
                'edit' => 'NewslettersBundle:Mandant:edit.html.twig',
            ),
            'newsletters.templates.mandant.index' => 'NewslettersBundle:Mandant:index.html.twig',
            'newsletters.templates.mandant.edit' => 'NewslettersBundle:Mandant:edit.html.twig',
            'newsletters.templates.newsletter' => array(
                'index' => 'NewslettersBundle:Newsletter:index.html.twig',
                'list' => 'NewslettersBundle:Newsletter:list.html.twig',
                'create' => 'NewslettersBundle:Newsletter:create.html.twig',
                'edit' => 'NewslettersBundle:Newsletter:edit.html.twig',
                'subscriber' => 'NewslettersBundle:Newsletter:subscriber.html.twig',
                'settings' => 'NewslettersBundle:Newsletter:settings.html.twig',
                'summary' => 'NewslettersBundle:Newsletter:summary.html.twig',
                'send' => 'NewslettersBundle:Newsletter:send.html.twig',
                'unsubscribe' => 'NewslettersBundle:Newsletter:unsubscribe.html.twig',
                'overview' => 'NewslettersBundle:Newsletter:overview.html.twig',
                'generate' => 'NewslettersBundle:Newsletter:generate.html.twig',
            ),
            'newsletters.templates.newsletter.index' => 'NewslettersBundle:Newsletter:index.html.twig',
            'newsletters.templates.newsletter.list' => 'NewslettersBundle:Newsletter:list.html.twig',
            'newsletters.templates.newsletter.create' => 'NewslettersBundle:Newsletter:create.html.twig',
            'newsletters.templates.newsletter.edit' => 'NewslettersBundle:Newsletter:edit.html.twig',
            'newsletters.templates.newsletter.subscriber' => 'NewslettersBundle:Newsletter:subscriber.html.twig',
            'newsletters.templates.newsletter.settings' => 'NewslettersBundle:Newsletter:settings.html.twig',
            'newsletters.templates.newsletter.summary' => 'NewslettersBundle:Newsletter:summary.html.twig',
            'newsletters.templates.newsletter.send' => 'NewslettersBundle:Newsletter:send.html.twig',
            'newsletters.templates.newsletter.unsubscribe' => 'NewslettersBundle:Newsletter:unsubscribe.html.twig',
            'newsletters.templates.newsletter.overview' => 'NewslettersBundle:Newsletter:overview.html.twig',
            'newsletters.templates.newsletter.generate' => 'NewslettersBundle:Newsletter:generate.html.twig',
            'newsletters.templates.design' => array(
                'index' => 'NewslettersBundle:Design:index.html.twig',
                'list' => 'NewslettersBundle:Design:list.html.twig',
                'create' => 'NewslettersBundle:Design:create.html.twig',
                'edit' => 'NewslettersBundle:Design:edit.html.twig',
                'show' => 'NewslettersBundle:Design:show.html.twig',
            ),
            'newsletters.templates.design.index' => 'NewslettersBundle:Design:index.html.twig',
            'newsletters.templates.design.list' => 'NewslettersBundle:Design:list.html.twig',
            'newsletters.templates.design.create' => 'NewslettersBundle:Design:create.html.twig',
            'newsletters.templates.design.edit' => 'NewslettersBundle:Design:edit.html.twig',
            'newsletters.templates.design.show' => 'NewslettersBundle:Design:show.html.twig',
            'newsletters.templates.subscriber' => array(
                'list' => 'NewslettersBundle:Subscriber:list.html.twig',
            ),
            'newsletters.templates.subscriber.list' => 'NewslettersBundle:Subscriber:list.html.twig',
            'newsletters.templates.statistic' => array(
                'show' => 'NewslettersBundle:Statistic:show.html.twig',
            ),
            'newsletters.templates.statistic.show' => 'NewslettersBundle:Statistic:show.html.twig',
            'newsletters.rendererbridge' => array(
                'class' => 'NewslettersBundle\\Renderer\\Bridge\\RendererBridge',
            ),
            'newsletters.rendererbridge.class' => 'NewslettersBundle\\Renderer\\Bridge\\RendererBridge',
            'newsletters.gendertitlestrategy' => array(
                'class' => 'NewslettersBundle\\Renderer\\GenderTitleStrategy\\GenderTitleTranslatorStrategy',
                'translator' => array(
                    'translationdomain' => 'NewslettersBundle',
                ),
            ),
            'newsletters.gendertitlestrategy.class' => 'NewslettersBundle\\Renderer\\GenderTitleStrategy\\GenderTitleTranslatorStrategy',
            'newsletters.gendertitlestrategy.translator' => array(
                'translationdomain' => 'NewslettersBundle',
            ),
            'newsletters.gendertitlestrategy.translator.translationdomain' => 'NewslettersBundle',
            'newsletters.serviceid' => array(
                'rendererbridge' => 'newsletters.rendererbridge',
                'gendertitlestrategy' => 'newsletters.rendererbridge.gendertitlestrategy.translator',
                'encryptionadapter' => 'newsletters.encryption.adapter.mcrypt',
            ),
            'newsletters.serviceid.rendererbridge' => 'newsletters.rendererbridge',
            'newsletters.serviceid.gendertitlestrategy' => 'newsletters.rendererbridge.gendertitlestrategy.translator',
            'newsletters.serviceid.encryptionadapter' => 'newsletters.encryption.adapter.mcrypt',
            'stfalcon_tinymce.config' => array(
                'include_jquery' => false,
                'tinymce_jquery' => true,
                'selector' => '.tinymce',
                'tinymce_buttons' => array(
                    'unsubscribelink' => array(
                        'title' => 'Unsubscribe link',
                        'image' => 'http://placehold.it/30x30',
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                    'now' => array(
                        'title' => 'Current date',
                        'image' => 'http://placehold.it/30x30',
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                    'gendertitle' => array(
                        'title' => 'Gender title',
                        'image' => 'http://placehold.it/30x30',
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                    'statisticlogreadimage' => array(
                        'title' => 'Statistics image',
                        'image' => 'http://placehold.it/30x30',
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                    'readonlinelink' => array(
                        'title' => 'Read online link',
                        'image' => 'http://placehold.it/30x30',
                        'text' => NULL,
                        'icon' => NULL,
                    ),
                ),
                'theme' => array(
                    'simple' => array(
                        'mode' => 'textareas',
                        'theme' => 'modern',
                        'plugins' => 'fullscreen,table',
                        'theme_advanced_buttons2' => 'unsubscribelink,now,gendertitle,statisticlogreadimage,readonlinelink',
                    ),
                ),
                'use_callback_tinymce_init' => false,
                'language' => NULL,
                'external_plugins' => array(

                ),
            ),
            'stfalcon_tinymce.twig.extension.class' => 'Stfalcon\\Bundle\\TinymceBundle\\Twig\\Extension\\StfalconTinymceExtension',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'data_collector.templates' => array(
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.cache' => array(
                    0 => 'cache',
                    1 => '@WebProfiler/Collector/cache.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.dump' => array(
                    0 => 'dump',
                    1 => '@Debug/Profiler/dump.html.twig',
                ),
                'easyadmin.data_collector' => array(
                    0 => 'easyadmin',
                    1 => '@EasyAdmin/data_collector/easyadmin.html.twig',
                ),
                'sonata.block.data_collector' => array(
                    0 => 'block',
                    1 => '@SonataBlock/Profiler/block.html.twig',
                ),
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
            ),
            'console.command.ids' => array(
                'console.command.appbundle_command_populateadminuserscommand' => 'console.command.appbundle_command_populateadminuserscommand',
                'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' => 'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand',
                'console.command.doctrine_bundle_doctrinecachebundle_command_containscommand' => 'doctrine_cache.contains_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_deletecommand' => 'doctrine_cache.delete_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_flushcommand' => 'doctrine_cache.flush_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_statscommand' => 'doctrine_cache.stats_command',
                'console.command.doctrine_bundle_doctrinebundle_command_createdatabasedoctrinecommand' => 'doctrine.database_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_dropdatabasedoctrinecommand' => 'doctrine.database_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_generateentitiesdoctrinecommand' => 'doctrine.generate_entities_command',
                'console.command.doctrine_bundle_doctrinebundle_command_importmappingdoctrinecommand' => 'doctrine.mapping_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearmetadatacachedoctrinecommand' => 'doctrine.cache_clear_metadata_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearquerycachedoctrinecommand' => 'doctrine.cache_clear_query_cache_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearresultcachedoctrinecommand' => 'doctrine.cache_clear_result_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_collectionregiondoctrinecommand' => 'doctrine.cache_collection_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_convertmappingdoctrinecommand' => 'doctrine.mapping_convert_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_createschemadoctrinecommand' => 'doctrine.schema_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_dropschemadoctrinecommand' => 'doctrine.schema_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_ensureproductionsettingsdoctrinecommand' => 'doctrine.ensure_production_settings_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_entityregioncachedoctrinecommand' => 'doctrine.clear_entity_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_importdoctrinecommand' => 'doctrine.database_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_infodoctrinecommand' => 'doctrine.mapping_info_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_queryregioncachedoctrinecommand' => 'doctrine.clear_query_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_rundqldoctrinecommand' => 'doctrine.query_dql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_runsqldoctrinecommand' => 'doctrine.query_sql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_updateschemadoctrinecommand' => 'doctrine.schema_update_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_validateschemacommand' => 'doctrine.schema_validate_command',
                'console.command.fos_userbundle_command_activateusercommand' => 'fos_user.command.activate_user',
                'console.command.fos_userbundle_command_changepasswordcommand' => 'fos_user.command.change_password',
                'console.command.fos_userbundle_command_createusercommand' => 'fos_user.command.create_user',
                'console.command.fos_userbundle_command_deactivateusercommand' => 'fos_user.command.deactivate_user',
                'console.command.fos_userbundle_command_demoteusercommand' => 'fos_user.command.demote_user',
                'console.command.fos_userbundle_command_promoteusercommand' => 'fos_user.command.promote_user',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsdiffdoctrinecommand' => 'doctrine_migrations.diff_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsexecutedoctrinecommand' => 'doctrine_migrations.execute_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsgeneratedoctrinecommand' => 'doctrine_migrations.generate_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationslatestdoctrinecommand' => 'doctrine_migrations.latest_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsmigratedoctrinecommand' => 'doctrine_migrations.migrate_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsstatusdoctrinecommand' => 'doctrine_migrations.status_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsversiondoctrinecommand' => 'doctrine_migrations.version_command',
                'console.command.sonata_mediabundle_command_addmassmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMassMediaCommand',
                'console.command.sonata_mediabundle_command_addmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMediaCommand',
                'console.command.sonata_mediabundle_command_cleanmediacommand' => 'Sonata\\MediaBundle\\Command\\CleanMediaCommand',
                'console.command.sonata_mediabundle_command_fixmediacontextcommand' => 'Sonata\\MediaBundle\\Command\\FixMediaContextCommand',
                'console.command.sonata_mediabundle_command_migratetojsontypecommand' => 'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand',
                'console.command.sonata_mediabundle_command_refreshmetadatacommand' => 'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand',
                'console.command.sonata_mediabundle_command_removethumbscommand' => 'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand',
                'console.command.sonata_mediabundle_command_syncthumbscommand' => 'Sonata\\MediaBundle\\Command\\SyncThumbsCommand',
                'console.command.sonata_mediabundle_command_updatecdnstatuscommand' => 'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand',
                'console.command.sonata_easyextendsbundle_command_dumpmappingcommand' => 'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand',
                'console.command.sonata_easyextendsbundle_command_generatecommand' => 'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand',
                'console.command.presta_sitemapbundle_command_dumpsitemapscommand' => 'presta_sitemap.dump_command',
                'console.command.sonata_corebundle_command_sonatadumpdoctrinemetacommand' => 'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand',
                'console.command.sonata_corebundle_command_sonatalistformmappingcommand' => 'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand',
                'console.command.sonata_blockbundle_command_debugblockscommand' => 'Sonata\\BlockBundle\\Command\\DebugBlocksCommand',
                'console.command.oneup_uploaderbundle_command_clearchunkcommand' => 'oneup_uploader.command.clear_chunks',
                'console.command.oneup_uploaderbundle_command_clearorphanscommand' => 'oneup_uploader.command.clear_orphans',
                'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
                'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'console.command.symfony_bundle_webserverbundle_command_serverruncommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand',
                'console.command.doctrine_bundle_fixturesbundle_command_loaddatafixturesdoctrinecommand' => 'doctrine.fixtures_load_command',
            ),
            'sonata.core.form.types' => array(
                0 => 'AppBundle\\Form\\ExempleFilterType',
                1 => 'type.newsletter',
                2 => 'form.type.form',
                3 => 'form.type.choice',
                4 => 'form.type.entity',
                5 => 'easyadmin.form.type',
                6 => 'easyadmin.form.type.autocomplete',
                7 => 'easyadmin.form.type.divider',
                8 => 'easyadmin.form.type.section',
                9 => 'easyadmin.form.type.group',
                10 => 'fos_user.username_form_type',
                11 => 'fos_user.profile.form.type',
                12 => 'fos_user.registration.form.type',
                13 => 'fos_user.change_password.form.type',
                14 => 'fos_user.resetting.form.type',
                15 => 'a2lix_translation_form.default.type.translations',
                16 => 'a2lix_translation_form.default.type.translationsFields',
                17 => 'a2lix_translation_form.default.type.translationsForms',
                18 => 'a2lix_translation_form.default.type.translationsLocalesSelector',
                19 => 'a2lix_translation_form.default.type.translatedEntity',
                20 => 'vich_uploader.form.type.file',
                21 => 'vich_uploader.form.type.image',
                22 => 'lexik_form_filter.type.filter_text',
                23 => 'lexik_form_filter.type.filter_number',
                24 => 'lexik_form_filter.type.filter_number_range',
                25 => 'lexik_form_filter.type.filter_checkbox',
                26 => 'lexik_form_filter.type.filter_boolean',
                27 => 'lexik_form_filter.type.filter_choice',
                28 => 'lexik_form_filter.type.filter_date',
                29 => 'lexik_form_filter.type.filter_date_range',
                30 => 'lexik_form_filter.type.filter_datetime',
                31 => 'lexik_form_filter.type.filter_datetime_range',
                32 => 'lexik_form_filter.type.filter_collection_adapter',
                33 => 'lexik_form_filter.type.filter_sharedable',
                34 => 'lexik_form_filter.type.filter_entity',
                35 => 'sonata.media.form.type.media',
                36 => 'cmf_seo.form.type.seo_metadata',
                37 => 'sonata.core.form.type.array',
                38 => 'sonata.core.form.type.boolean',
                39 => 'sonata.core.form.type.collection',
                40 => 'sonata.core.form.type.translatable_choice',
                41 => 'sonata.core.form.type.date_range',
                42 => 'sonata.core.form.type.datetime_range',
                43 => 'sonata.core.form.type.date_picker',
                44 => 'sonata.core.form.type.datetime_picker',
                45 => 'sonata.core.form.type.date_range_picker',
                46 => 'sonata.core.form.type.datetime_range_picker',
                47 => 'sonata.core.form.type.equal',
                48 => 'sonata.core.form.type.color_selector',
                49 => 'sonata.core.form.type.color',
                50 => 'sonata.block.form.type.block',
                51 => 'sonata.block.form.type.container_template',
                52 => 'bnbc_upload.form.type.bnbc_ajax_file',
            ),
            'sonata.core.form.type_extensions' => array(
                0 => 'form.type_extension.form.http_foundation',
                1 => 'form.type_extension.form.validator',
                2 => 'form.type_extension.repeated.validator',
                3 => 'form.type_extension.submit.validator',
                4 => 'form.type_extension.upload.validator',
                5 => 'form.type_extension.csrf',
                6 => 'form.type_extension.form.data_collector',
                7 => 'easyadmin.form.type.extension',
                8 => 'lexik_form_filter.type_extension.filter_extension',
            ),
        );
    }
}

class FFMpegFFMpeg_00000000703f1b0200000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \FFMpeg\FFMpeg implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function setFFProbe(\FFMpeg\FFProbe $ffprobe)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFProbe', array('ffprobe' => $ffprobe), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFProbe($ffprobe);
    }

    public function getFFProbe()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFProbe', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFProbe();
    }

    public function setFFMpegDriver(\FFMpeg\Driver\FFMpegDriver $ffmpeg)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFMpegDriver', array('ffmpeg' => $ffmpeg), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFMpegDriver($ffmpeg);
    }

    public function getFFMpegDriver()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFMpegDriver', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFMpegDriver();
    }

    public function open($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'open', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->open($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $instance, 'FFMpeg\\FFMpeg')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    public function __construct(\FFMpeg\Driver\FFMpegDriver $ffmpeg, \FFMpeg\FFProbe $ffprobe)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFMpeg');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($ffmpeg, $ffprobe);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class FFMpegFFProbe_00000000703f1b9800000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \FFMpeg\FFProbe implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getParser()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getParser', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getParser();
    }

    public function setParser(\FFMpeg\FFProbe\OutputParserInterface $parser)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setParser', array('parser' => $parser), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setParser($parser);
    }

    public function getFFProbeDriver()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFProbeDriver', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFProbeDriver();
    }

    public function setFFProbeDriver(\FFMpeg\Driver\FFProbeDriver $ffprobe)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFProbeDriver', array('ffprobe' => $ffprobe), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFProbeDriver($ffprobe);
    }

    public function setOptionsTester(\FFMpeg\FFProbe\OptionsTesterInterface $tester)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setOptionsTester', array('tester' => $tester), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setOptionsTester($tester);
    }

    public function getOptionsTester()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getOptionsTester', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getOptionsTester();
    }

    public function setCache(\Doctrine\Common\Cache\Cache $cache)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setCache', array('cache' => $cache), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setCache($cache);
    }

    public function getCache()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getCache', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getCache();
    }

    public function getMapper()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getMapper', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getMapper();
    }

    public function setMapper(\FFMpeg\FFProbe\MapperInterface $mapper)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setMapper', array('mapper' => $mapper), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setMapper($mapper);
    }

    public function format($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'format', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->format($pathfile);
    }

    public function streams($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'streams', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->streams($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $instance, 'FFMpeg\\FFProbe')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    public function __construct(\FFMpeg\Driver\FFProbeDriver $ffprobe, \Doctrine\Common\Cache\Cache $cache)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFProbe');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($ffprobe, $cache);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class FFMpegFFMpeg_00000000703f1a1d00000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \FFMpeg\FFMpeg implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function setFFProbe(\FFMpeg\FFProbe $ffprobe)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFProbe', array('ffprobe' => $ffprobe), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFProbe($ffprobe);
    }

    public function getFFProbe()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFProbe', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFProbe();
    }

    public function setFFMpegDriver(\FFMpeg\Driver\FFMpegDriver $ffmpeg)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFMpegDriver', array('ffmpeg' => $ffmpeg), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFMpegDriver($ffmpeg);
    }

    public function getFFMpegDriver()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFMpegDriver', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFMpegDriver();
    }

    public function open($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'open', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->open($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $instance, 'FFMpeg\\FFMpeg')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    public function __construct(\FFMpeg\Driver\FFMpegDriver $ffmpeg, \FFMpeg\FFProbe $ffprobe)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFMpeg');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($ffmpeg, $ffprobe);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFMpeg $instance) {
            unset($instance->driver, $instance->ffprobe);
        }, $this, 'FFMpeg\\FFMpeg')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class FFMpegFFProbe_00000000703f1a0700000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \FFMpeg\FFProbe implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getParser()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getParser', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getParser();
    }

    public function setParser(\FFMpeg\FFProbe\OutputParserInterface $parser)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setParser', array('parser' => $parser), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setParser($parser);
    }

    public function getFFProbeDriver()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFFProbeDriver', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFFProbeDriver();
    }

    public function setFFProbeDriver(\FFMpeg\Driver\FFProbeDriver $ffprobe)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setFFProbeDriver', array('ffprobe' => $ffprobe), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setFFProbeDriver($ffprobe);
    }

    public function setOptionsTester(\FFMpeg\FFProbe\OptionsTesterInterface $tester)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setOptionsTester', array('tester' => $tester), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setOptionsTester($tester);
    }

    public function getOptionsTester()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getOptionsTester', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getOptionsTester();
    }

    public function setCache(\Doctrine\Common\Cache\Cache $cache)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setCache', array('cache' => $cache), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setCache($cache);
    }

    public function getCache()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getCache', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getCache();
    }

    public function getMapper()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getMapper', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getMapper();
    }

    public function setMapper(\FFMpeg\FFProbe\MapperInterface $mapper)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setMapper', array('mapper' => $mapper), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setMapper($mapper);
    }

    public function format($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'format', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->format($pathfile);
    }

    public function streams($pathfile)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'streams', array('pathfile' => $pathfile), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->streams($pathfile);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $instance, 'FFMpeg\\FFProbe')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    public function __construct(\FFMpeg\Driver\FFProbeDriver $ffprobe, \Doctrine\Common\Cache\Cache $cache)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('FFMpeg\\FFProbe');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($ffprobe, $cache);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FFMpeg\FFProbe $instance) {
            unset($instance->cache, $instance->optionsTester, $instance->parser, $instance->ffprobe, $instance->mapper);
        }, $this, 'FFMpeg\\FFProbe')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class DoctrineORMEntityManager_00000000703f11cf00000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getConnection()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConnection', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConnection();
    }

    public function getMetadataFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getMetadataFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getMetadataFactory();
    }

    public function getExpressionBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getExpressionBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getExpressionBuilder();
    }

    public function beginTransaction()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'beginTransaction', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->beginTransaction();
    }

    public function getCache()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getCache', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getCache();
    }

    public function transactional($func)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'transactional', array('func' => $func), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->transactional($func);
    }

    public function commit()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'commit', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->commit();
    }

    public function rollback()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'rollback', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->rollback();
    }

    public function getClassMetadata($className)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getClassMetadata', array('className' => $className), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getClassMetadata($className);
    }

    public function createQuery($dql = '')
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQuery', array('dql' => $dql), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQuery($dql);
    }

    public function createNamedQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedQuery($name);
    }

    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNativeQuery($sql, $rsm);
    }

    public function createNamedNativeQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedNativeQuery($name);
    }

    public function createQueryBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQueryBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQueryBuilder();
    }

    public function flush($entity = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'flush', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->flush($entity);
    }

    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->find($entityName, $id, $lockMode, $lockVersion);
    }

    public function getReference($entityName, $id)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getReference($entityName, $id);
    }

    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getPartialReference($entityName, $identifier);
    }

    public function clear($entityName = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'clear', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->clear($entityName);
    }

    public function close()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'close', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->close();
    }

    public function persist($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'persist', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->persist($entity);
    }

    public function remove($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'remove', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->remove($entity);
    }

    public function refresh($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'refresh', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->refresh($entity);
    }

    public function detach($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'detach', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->detach($entity);
    }

    public function merge($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'merge', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->merge($entity);
    }

    public function copy($entity, $deep = false)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->copy($entity, $deep);
    }

    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->lock($entity, $lockMode, $lockVersion);
    }

    public function getRepository($entityName)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getRepository', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getRepository($entityName);
    }

    public function contains($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'contains', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->contains($entity);
    }

    public function getEventManager()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getEventManager', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getEventManager();
    }

    public function getConfiguration()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConfiguration', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConfiguration();
    }

    public function isOpen()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isOpen', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isOpen();
    }

    public function getUnitOfWork()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getUnitOfWork', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getUnitOfWork();
    }

    public function getHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getHydrator($hydrationMode);
    }

    public function newHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->newHydrator($hydrationMode);
    }

    public function getProxyFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getProxyFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getProxyFactory();
    }

    public function initializeObject($obj)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeObject', array('obj' => $obj), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->initializeObject($obj);
    }

    public function getFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFilters();
    }

    public function isFiltersStateClean()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isFiltersStateClean', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isFiltersStateClean();
    }

    public function hasFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'hasFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($conn, $config, $eventManager);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class DoctrineORMEntityManager_00000000703f1e8a00000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getConnection()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConnection', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConnection();
    }

    public function getMetadataFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getMetadataFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getMetadataFactory();
    }

    public function getExpressionBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getExpressionBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getExpressionBuilder();
    }

    public function beginTransaction()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'beginTransaction', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->beginTransaction();
    }

    public function getCache()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getCache', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getCache();
    }

    public function transactional($func)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'transactional', array('func' => $func), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->transactional($func);
    }

    public function commit()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'commit', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->commit();
    }

    public function rollback()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'rollback', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->rollback();
    }

    public function getClassMetadata($className)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getClassMetadata', array('className' => $className), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getClassMetadata($className);
    }

    public function createQuery($dql = '')
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQuery', array('dql' => $dql), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQuery($dql);
    }

    public function createNamedQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedQuery($name);
    }

    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNativeQuery($sql, $rsm);
    }

    public function createNamedNativeQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedNativeQuery($name);
    }

    public function createQueryBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQueryBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQueryBuilder();
    }

    public function flush($entity = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'flush', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->flush($entity);
    }

    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->find($entityName, $id, $lockMode, $lockVersion);
    }

    public function getReference($entityName, $id)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getReference($entityName, $id);
    }

    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getPartialReference($entityName, $identifier);
    }

    public function clear($entityName = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'clear', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->clear($entityName);
    }

    public function close()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'close', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->close();
    }

    public function persist($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'persist', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->persist($entity);
    }

    public function remove($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'remove', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->remove($entity);
    }

    public function refresh($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'refresh', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->refresh($entity);
    }

    public function detach($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'detach', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->detach($entity);
    }

    public function merge($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'merge', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->merge($entity);
    }

    public function copy($entity, $deep = false)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->copy($entity, $deep);
    }

    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->lock($entity, $lockMode, $lockVersion);
    }

    public function getRepository($entityName)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getRepository', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getRepository($entityName);
    }

    public function contains($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'contains', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->contains($entity);
    }

    public function getEventManager()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getEventManager', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getEventManager();
    }

    public function getConfiguration()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConfiguration', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConfiguration();
    }

    public function isOpen()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isOpen', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isOpen();
    }

    public function getUnitOfWork()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getUnitOfWork', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getUnitOfWork();
    }

    public function getHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getHydrator($hydrationMode);
    }

    public function newHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->newHydrator($hydrationMode);
    }

    public function getProxyFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getProxyFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getProxyFactory();
    }

    public function initializeObject($obj)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeObject', array('obj' => $obj), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->initializeObject($obj);
    }

    public function getFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFilters();
    }

    public function isFiltersStateClean()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isFiltersStateClean', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isFiltersStateClean();
    }

    public function hasFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'hasFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($conn, $config, $eventManager);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class DoctrineORMEntityManager_00000000703f1e8f00000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getConnection()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConnection', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConnection();
    }

    public function getMetadataFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getMetadataFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getMetadataFactory();
    }

    public function getExpressionBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getExpressionBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getExpressionBuilder();
    }

    public function beginTransaction()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'beginTransaction', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->beginTransaction();
    }

    public function getCache()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getCache', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getCache();
    }

    public function transactional($func)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'transactional', array('func' => $func), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->transactional($func);
    }

    public function commit()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'commit', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->commit();
    }

    public function rollback()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'rollback', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->rollback();
    }

    public function getClassMetadata($className)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getClassMetadata', array('className' => $className), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getClassMetadata($className);
    }

    public function createQuery($dql = '')
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQuery', array('dql' => $dql), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQuery($dql);
    }

    public function createNamedQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedQuery($name);
    }

    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNativeQuery($sql, $rsm);
    }

    public function createNamedNativeQuery($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createNamedNativeQuery($name);
    }

    public function createQueryBuilder()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'createQueryBuilder', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->createQueryBuilder();
    }

    public function flush($entity = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'flush', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->flush($entity);
    }

    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->find($entityName, $id, $lockMode, $lockVersion);
    }

    public function getReference($entityName, $id)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getReference($entityName, $id);
    }

    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getPartialReference($entityName, $identifier);
    }

    public function clear($entityName = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'clear', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->clear($entityName);
    }

    public function close()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'close', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->close();
    }

    public function persist($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'persist', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->persist($entity);
    }

    public function remove($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'remove', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->remove($entity);
    }

    public function refresh($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'refresh', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->refresh($entity);
    }

    public function detach($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'detach', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->detach($entity);
    }

    public function merge($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'merge', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->merge($entity);
    }

    public function copy($entity, $deep = false)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->copy($entity, $deep);
    }

    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->lock($entity, $lockMode, $lockVersion);
    }

    public function getRepository($entityName)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getRepository', array('entityName' => $entityName), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getRepository($entityName);
    }

    public function contains($entity)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'contains', array('entity' => $entity), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->contains($entity);
    }

    public function getEventManager()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getEventManager', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getEventManager();
    }

    public function getConfiguration()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getConfiguration', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getConfiguration();
    }

    public function isOpen()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isOpen', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isOpen();
    }

    public function getUnitOfWork()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getUnitOfWork', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getUnitOfWork();
    }

    public function getHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getHydrator($hydrationMode);
    }

    public function newHydrator($hydrationMode)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->newHydrator($hydrationMode);
    }

    public function getProxyFactory()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getProxyFactory', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getProxyFactory();
    }

    public function initializeObject($obj)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeObject', array('obj' => $obj), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->initializeObject($obj);
    }

    public function getFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getFilters();
    }

    public function isFiltersStateClean()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'isFiltersStateClean', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->isFiltersStateClean();
    }

    public function hasFilters()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'hasFilters', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($conn, $config, $eventManager);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}

class SymfonyComponentCacheAdapterFilesystemAdapter_00000000703f0fff00000000735bbd018e274c174209ffaa8e3e29eae032d474 extends \Symfony\Component\Cache\Adapter\FilesystemAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder920cc = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer84d63 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicPropertiesa158f = [
        
    ];

    public function getItem($key)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getItem', array('key' => $key), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getItem($key);
    }

    public function getItems(array $keys = [])
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'getItems', array('keys' => $keys), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->getItems($keys);
    }

    public function save(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'save', array('item' => $item), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->save($item);
    }

    public function saveDeferred(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'saveDeferred', array('item' => $item), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->saveDeferred($item);
    }

    public function commit()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'commit', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->commit();
    }

    public function __destruct()
    {
        $this->initializer84d63 || $this->valueHolder920cc->__destruct();
    }

    public function hasItem($key)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'hasItem', array('key' => $key), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->hasItem($key);
    }

    public function clear()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'clear', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->clear();
    }

    public function deleteItem($key)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'deleteItem', array('key' => $key), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->deleteItem($key);
    }

    public function deleteItems(array $keys)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'deleteItems', array('keys' => $keys), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->deleteItems($keys);
    }

    public function enableVersioning($enable = true)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'enableVersioning', array('enable' => $enable), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->enableVersioning($enable);
    }

    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'setLogger', array('logger' => $logger), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return $this->valueHolder920cc->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?? $reflection = new \ReflectionClass(__CLASS__);
        $instance = $reflection->newInstanceWithoutConstructor();

        unset($instance->maxIdLength, $instance->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($instance);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($instance);

        $instance->initializer84d63 = $initializer;

        return $instance;
    }

    public function __construct($namespace = '', $defaultLifetime = 0, $directory = null)
    {
        static $reflection;

        if (! $this->valueHolder920cc) {
            $reflection = $reflection ?: new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter');
            $this->valueHolder920cc = $reflection->newInstanceWithoutConstructor();
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);

        }

        $this->valueHolder920cc->__construct($namespace, $defaultLifetime, $directory);
    }

    public function & __get($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__get', ['name' => $name], $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        if (isset(self::$publicPropertiesa158f[$name])) {
            return $this->valueHolder920cc->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __set($name, $value)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    public function __isset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__isset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __unset($name)
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__unset', array('name' => $name), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder920cc;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder920cc;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__clone', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        $this->valueHolder920cc = clone $this->valueHolder920cc;
    }

    public function __sleep()
    {
        $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, '__sleep', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;

        return array('valueHolder920cc');
    }

    public function __wakeup()
    {
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);
    }

    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer84d63 = $initializer;
    }

    public function getProxyInitializer()
    {
        return $this->initializer84d63;
    }

    public function initializeProxy() : bool
    {
        return $this->initializer84d63 && ($this->initializer84d63->__invoke($valueHolder920cc, $this, 'initializeProxy', array(), $this->initializer84d63) || 1) && $this->valueHolder920cc = $valueHolder920cc;
    }

    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder920cc;
    }

    public function getWrappedValueHolderValue() : ?object
    {
        return $this->valueHolder920cc;
    }


}
